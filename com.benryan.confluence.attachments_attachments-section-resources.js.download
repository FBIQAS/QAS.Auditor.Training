;try {
/* module-key = 'com.benryan.confluence.attachments:attachments-section-resources', location = 'templates/extra/checkout/script/version-compare.js' */
/**
* Compares two software version numbers (e.g. "1.7.1" or "1.2b").
*
* This function was born in http://stackoverflow.com/a/6832721.
*
* @param {string} v1 The first version to be compared.
* @param {string} v2 The second version to be compared.
* @param {object} [options] Optional flags that affect comparison behavior:
* <ul>
* <li>
* <tt>lexicographical: true</tt> compares each part of the version strings lexicographically instead of
* naturally; this allows suffixes such as "b" or "dev" but will cause "1.10" to be considered smaller than
* "1.2".
* </li>
* <li>
* <tt>zeroExtend: true</tt> changes the result if one version string has less parts than the other. In
* this case the shorter string will be padded with "zero" parts instead of being considered smaller.
* </li>
* </ul>
* @returns {number|NaN}
* <ul>
* <li>0 if the versions are equal</li>
* <li>a negative integer iff v1 < v2</li>
* <li>a positive integer iff v1 > v2</li>
* <li>NaN if either version string is in the wrong format</li>
* </ul>
*
* @copyright by Jon Papaioannou (["john", "papaioannou"].join(".") + "@gmail.com")
* @license This function is in the public domain. Do what you want with it, no strings attached.
*/
function versionCompare(v1, v2, options) {
var lexicographical = options && options.lexicographical,
zeroExtend = options && options.zeroExtend,
v1parts = v1.split('.'),
v2parts = v2.split('.');

function isValidPart(x) {
return (lexicographical ? /^\d+[A-Za-z]*$/ : /^\d+$/).test(x);
}

if (!v1parts.every(isValidPart) || !v2parts.every(isValidPart)) {
return NaN;
}

if (zeroExtend) {
while (v1parts.length < v2parts.length) v1parts.push("0");
while (v2parts.length < v1parts.length) v2parts.push("0");
}

if (!lexicographical) {
v1parts = v1parts.map(Number);
v2parts = v2parts.map(Number);
}

for (var i = 0; i < v1parts.length; ++i) {
if (v2parts.length == i) {
return 1;
}

if (v1parts[i] == v2parts[i]) {
continue;
}
else if (v1parts[i] > v2parts[i]) {
return 1;
}
else {
return -1;
}
}

if (v1parts.length != v2parts.length) {
return -1;
}

return 0;
}
} catch (err) {
    if (console && console.log && console.error) {
        console.log("Error running batched script.");
        console.error(err);
    }
}

;
;try {
/* module-key = 'com.benryan.confluence.attachments:attachments-section-resources', location = 'templates/extra/checkout/script/attachments-section.js' */
/*!
 * jQuery Cookie Plugin v1.3
 * https://github.com/carhartl/jquery-cookie
 *
 * Copyright 2011, Klaus Hartl
 * Dual licensed under the MIT or GPL Version 2 licenses.
 * http://www.opensource.org/licenses/mit-license.php
 * http://www.opensource.org/licenses/GPL-2.0
 */
/*(function ($, document, undefined) {

 var pluses = /\+/g;

 function raw(s) {
 return s;
 }

 function decoded(s) {
 return decodeURIComponent(s.replace(pluses, ' '));
 }

 var config = $.cookie = function (key, value, options) {

 // write
 if (value !== undefined) {
 options = $.extend({}, config.defaults, options);

 if (value === null) {
 options.expires = -1;
 }

 if (typeof options.expires === 'number') {
 var days = options.expires, t = options.expires = new Date();
 t.setDate(t.getDate() + days);
 }

 value = config.json ? JSON.stringify(value) : String(value);

 return (document.cookie = [
 encodeURIComponent(key), '=', config.raw ? value : encodeURIComponent(value),
 options.expires ? '; expires=' + options.expires.toUTCString() : '', // use expires attribute, max-age is not supported by IE
 options.path ? '; path=' + options.path : '',
 options.domain ? '; domain=' + options.domain : '',
 options.secure ? '; secure' : ''
 ].join(''));
 }

 // read
 var decode = config.raw ? raw : decoded;
 var cookies = document.cookie.split('; ');
 for (var i = 0, parts; (parts = cookies[i] && cookies[i].split('=')); i++) {
 if (decode(parts.shift()) === key) {
 var cookie = decode(parts.join('='));
 return config.json ? JSON.parse(cookie) : cookie;
 }
 }

 return null;
 };

 config.defaults = {};

 $.removeCookie = function (key, options) {
 if ($.cookie(key) !== null) {
 $.cookie(key, null, options);
 return true;
 }
 return false;
 };

 })(jQuery, document);*/
//end cookie plugin
//global vars
var checkThese = new Array();

if (typeof community == 'undefined')
    community = {};

if (community.plugins == undefined)
    community.plugins = {};

if (community.plugins.attachments == undefined)
    community.plugins.attachments = {};

if (community.plugins.attachments.mds == undefined)
    community.plugins.attachments.mds = {};

//Will be injected by maven. Used for cacheing resources
community.plugins.attachments.versionNumber = "4.5.5.1";

community.plugins.attachments.entityMap = {
    "&": "&amp;",
    "<": "&lt;",
    ">": "&gt;",
    '"': '&quot;',
    "'": '&#39;',
    "/": '&#x2F;'
};

community.plugins.attachments.escapeHtml = function(string) {
    return String(string).replace(/[&<>"'\/]/g, function(s) {
        return community.plugins.attachments.entityMap[s];
    });
}

var smallSpinnerImg = "<img class='attach-waiting-spinner' src='/community/s/1814/82/90/_/download/images/small-spinner.gif'/>";
var smallSpinnerImgInline = "<img class='attach-waiting-spinner' style='position: absolute; top: 3px; left: 101px;' src='/community/s/1814/82/90/_/download/images/small-spinner.gif'/>";
var tempScrollTop;

jQuery_142(document).ready(function() {
    AJS.log('document ready');

    getAttachmentTemplates();

    // init pageId to upload to, for use in various ajax upload features
    community.plugins.attachments.uploadPageId = jQuery_142("#attachmentsPageId").val();

    bindCollapseActions();
    bindSortingActions();
    setSortTooltips();
    bindUploadActions();
    bindNewOfficeFileActions();
    bindAttachmentCommentOverlayActions();

    initAttachmentsSection();

});

var initAttachmentsSection = function(){
    //Need to make sure userPreferences have been loaded first
    if(!userPreferences.ready){
        setTimeout(initAttachmentsSection, 100);
    }
    else {
        // only do this if the page has attachments and is visable
        var isAttachmentsSectionCollapsed = userPreferences.getAttachmentsSectionCollapse();
        // var isAttachmentsSectionCollapsed = false;
        var numberOfAttachmentAtLoad = $("#attachmentsCountTotal").val();
        var numberOfNonHiddenAttachments = $("#attachmentsCountTotalMinusHidden");
        if (parseInt(numberOfAttachmentAtLoad) > 0 && isAttachmentsSectionCollapsed == false) {
            loadAttachmentsSection();
        }
        else if(isAttachmentsSectionCollapsed){
            //Click to close the section
            $("#jquery-attach-collapse").click();
        }
    }
}

var getAttachmentTemplates = function(){
    if($('#attachment-templates').size() == 0) {
        $.ajax({
            url : "/s/" + community.plugins.attachments.versionNumber
                    + "/_/download/batch/com.benryan.confluence.attachments:attachments-template-resources"
                    + "/com.benryan.confluence.attachments:attachment-templates.html",
            async : false,
            success : function(data) {
                $("body").append(data);
            },
            error : function() { 
                alert("An Error occured when loading the attachments section. Please try refreshing this page. If the problem persists, please contact MAX Support.")
            },
        });        
    }
}

var directEditExtDetectChrome = false;
var directEditExtDetectFirefox = false;

//Want to provide option to reload just the section.
function loadAttachmentsSection(attachmentsIdsToHighlight) {
    loadAttachments(attachmentsIdsToHighlight, false);
}

function loadAttachments(loadMacros){
    var highlightNoAtts = new Array();
    loadAttachments(highlightNoAtts, loadMacros);
}

function loadAttachments(attachmentsIdsToHighlight, loadMacros) {
    var showHiddenAttachments = ($("#attachmentsShowHidden").val() == "true");

    // do not load for IE 6 or lower
    if (jQuery_142.browser.msie && parseInt(jQuery_142.browser.version) < 7) {
        return;
    }

    // start time
    var startTime = new Date();

    // clear existing attachments if there are any
    jQuery_142(".attachments-section-ul").remove();

    //Hide sort options and show all link
    $("#page-controls-attachments-sorting").hide();
    $(".view-collapse-attachments-links").hide();

    // show spinner
    $("#attachments-loading-div").show();

    // get pageId
    var pageId = jQuery_142("#attachmentsPageId").val();

    jQuery_142.ajax({
        type: "GET",
        dataType: "json",
        data: "pageId=" + pageId,
        url: contextPath + "/json/max/getpageattachments.action",
        error: function(xhr) {
            if (xhr.status == 403) {
                jQuery_142("#jquery-empty-attachments").html("<h3 class='red'>You do not have permission to view this pages attachments.</h3>").removeClass("hidden");;
            } else {
                jQuery_142("#jquery-empty-attachments").html("<h3 class='red'>An Error occured when loading the attachments section. Please try refreshing this page. <br>If the problem persists please contact MAX Support.</h3>").removeClass("hidden");
            }

            // hide spinner
            jQuery_142("#attachments-loading-div").hide();
            $(".view-collapse-attachments-links").hide();
            $("#page-controls-attachments-sorting").hide();
        },
        success: function(data, textStatus) {
            if (!data || !data.attachmentsDataObject || data.attachmentsDataObject.hasError) {
                jQuery("#jquery-empty-attachments").html("<h3 class='red'>An Error occured when loading the attachments section. Please try refreshing this page. <br>If the problem persists, please contact MAX Support.</h3>").removeClass("hidden");
                
                // hide spinner
                jQuery_142("#attachments-loading-div").hide();
                $(".view-collapse-attachments-links").hide();
                $("#page-controls-attachments-sorting").hide();
                return;
            }

            // start time
            var startTimeSuccess = new Date();

            if (directEditExtDetectChrome == false) {
                jQuery.ajax({
                    url: "chrome-extension://hehijbfgiekmjfkfjpbkbammjbdenadd/js/extapi_wp.js",
                    type: 'GET',
                    async: false,
                    success: function() {
                        console.log("Direct Edit plugin enabled.");

                        directEditExtDetectChrome = true;
                    },
                    error: function() {
                        console.log('Direct Edit plugin not enabled.')
                    }
                });
            }

            // commenting this out because why bother checking when no one here seemingly uses firefox
            /*
             * if(directEditExtDetectChrome == false && directEditExtDetectFirefox == false) { console.log("checking direct edit for Firefox"); jQuery(navigator.plugins).each(function(){
             * if(!directEditExtDetectFirefox && this.name == "IE Tab Plug-in") { console.log("IE Tab Plug-in exists!"); directEditExtDetectFirefox =
             * (jQuery("meta#agency-code").attr("content")=="854" && jQuery("meta[name='ajs-base-url']:first").attr("content")=="https://community.test.max.gov"); } }); }
             */

            if (directEditExtDetectChrome) {
                window.ietab.getVersion(function(version) {

                    var versionComparison = versionCompare(version, "8.2.5.2");

                    /*
                     * if ( !isNaN(versionComparison) && versionComparison >= 0) { directEditExtDetectChrome = directEditExtDetectChrome && true; } else { directEditExtDetectChrome =
                     * false; }
                     */

                    if (isNaN(versionComparison) || versionComparison < 0) {
                        directEditExtDetectChrome = false;
                    }

                    handleSuccessLoadAttachmentsSection(attachmentsIdsToHighlight, pageId, data.attachmentsDataObject, data.attachmentsDataObject.totalAttachments, data.attachmentsDataObject.totalAttachmentsWithOutHidden, showHiddenAttachments);
                    // end time
                    var endTime = new Date();
                    AJS.log("----> render attachments section total elapased time in seconds = " + ((endTime - startTime) / 1000) + "\n --> time spent in sucess method for attachments: " + ((endTime - startTimeSuccess) / 1000));

                });
            } else {
                handleSuccessLoadAttachmentsSection(attachmentsIdsToHighlight, pageId, data.attachmentsDataObject, data.attachmentsDataObject.totalAttachments, data.attachmentsDataObject.totalAttachmentsWithOutHidden, showHiddenAttachments);
                // end time
                var endTime = new Date();
                AJS.log("----> render attachments section total elapased time in seconds = " + ((endTime - startTime) / 1000) + "\n --> time spent in sucess method for attachments: " + ((endTime - startTimeSuccess) / 1000));

            }
        }

    });

    if(loadMacros){

        // Move upload form back to bottom of page before reloading attachments macros -AWP
        jQuery("#jquery-empty-attachments").before(jQuery("#attachment-add-new-wrapper"));

        // Reload any attachments macros
        jQuery('.new-attachments-macro-wrapper').each(function(index) {
            // Unbind to prevent duplicate listeners -AWP
            jQuery(this).find('.btn-new-attachments-macro-add-attachment').unbind();
            var delay = (300 * index);
            var wrapper = this;
            setTimeout(function() {
                community.plugins.attachments.newAttachmentMacro.render(wrapper, index)
            }, delay);
        });
    }
}

function handleSuccessLoadAttachmentsSection(attachmentsIdsToHighlight, pageId, attachmentsDataObject, totalAttachments, totalAttachmentsWithOutHidden, showHiddenAttachments) {
    var showAllAttachments = ($("#attachmentsShowAll").val() == "true");
    generateAttachmentsSection(attachmentsDataObject, totalAttachments, totalAttachmentsWithOutHidden, showAllAttachments, showHiddenAttachments, attachmentsIdsToHighlight);

    // hide spinner
    jQuery_142("#attachments-loading-div").hide();

    // bind events and setup display of attachments, added wrapper to scope in binding
    community.plugins.attachments.bindAllEventsAndSetupDisplay(jQuery("#page-controls-attachments"));

    // bind hovers, if defined
    if (community.plugins.attachments.newAttachmentMacro != undefined) {
        community.plugins.attachments.newAttachmentMacro.bindHovers(jQuery("#page-controls-attachments"));
    }

    handleAttachmentVisibilty();

    // update counts in heading and hidden buttons
    jQuery_142("#attachments-title-heading-h2").html("Attachments (" + totalAttachmentsWithOutHidden + ")");
    jQuery_142("#jquery-attachments-link").html("<span><div></div>Attachments (" + totalAttachmentsWithOutHidden + ")</span>");
    jQuery_142("#jquery-attachments-tab-count").html(totalAttachmentsWithOutHidden); // for dannys tabs
    jQuery_142("#jquery-attachment-count").html(totalAttachmentsWithOutHidden);
    var numberOfHiddenAttachments = (totalAttachments - totalAttachmentsWithOutHidden);
    var showHideText = showHiddenAttachments ? "Hide" : "Show";
    jQuery_142("#hidden-attachments-button-span").html("<div id='jquery-attachments-showhide-text' style='display: inline;'>"+ showHideText +"</div> Hidden Attachments (" + numberOfHiddenAttachments + ")");
    if (numberOfHiddenAttachments > 0) {
        jQuery_142("#show-hidden-attachments-link").show();
    } else if (numberOfHiddenAttachments == 0) {
        jQuery_142("#show-hidden-attachments-link").hide();
    }

    if (totalAttachmentsWithOutHidden > 0) {
        jQuery_142("#attachments-header-options-menu").show();
    }

    if (totalAttachments == 0) { // hide advnaced menu
        jQuery_142("#attachments-header-options-menu").hide();
    }
    else {
        jQuery_142("#download-all-attachments-top").show();
        jQuery_142("#attachments-header-options-menu").show();
    }

    // highlight attachments as necessary
    if (attachmentsIdsToHighlight != undefined) {
        jQuery_142(attachmentsIdsToHighlight).each(function(index, value) {
            jQuery_142("#" + value).addClass("new-attachment");
            // also make sure that its visable..
            jQuery_142("#" + value).show();
        });
    }

    //Get cookie value if any
    var cook = "";

    if (jQuery.cookie("sort") != undefined) {
        cook = jQuery.cookie("sort");
        AJS.log('cookie set (section): ' + cook);
    }

    // apply default sort if no sort cookie present
    if (!sortAttachmentsByCookie(cook)) {
        jQuery_142("#sort-date").click();
    }

    jQuery(window).scrollTop(tempScrollTop);
    AJS.log("scroll to: " + tempScrollTop);

}

//Need to leave as gloabl for bindAllEventsAndSetupDisplay
community.plugins.attachments.canUserAttach;


function generateAttachmentsSection(attachmentsDataObject, totalAttachments, totalAttachmentsWithOutHidden, showAllAttachments, showHiddenAttachments, attachmentsIdsToHighlight) {
    var pageAttachmentsData = attachmentsDataObject.pages[0];


    var pageProps = new Object();
    pageProps.showAllAttachments = showAllAttachments;
    pageProps.showHiddenAttachments = showHiddenAttachments;
    pageProps.isMacro = false;
    community.plugins.attachments.canUserAttach = pageAttachmentsData.canUserAttach;

    // start time
    var startTimeGenerate = new Date();

    // canUserAttach = pageAttachmentsData.canUserAttach; //COP-3431: Value changed from space perm to hasCreatePerm
    // canUserEdit = attachmentsDataObject.canUserEdit; //No longer used after COP-3431
    // canUserRemove = pageAttachmentsData.canUserRemove;
    // canUserReleaseEdits = pageAttachmentsData.canUserReleaseEdits;
    // doesUserHaveIE64 = window.navigator.platform == 'Win64';
    // browserIsFirefox = /Firefox/.test(window.navigator.userAgent);
    // browserIsChrome = /Chrome/.test(window.navigator.userAgent);
    // browserIsSafari = /Safari/.test(window.navigator.userAgent) && !browserIsChrome;
    // platformIsMac = /Mac/.test(window.navigator.platform)
    var numberOfHiddenAttachments = (totalAttachments - totalAttachmentsWithOutHidden);

    // get rid of the old one if its there, need to set the div to its height,
    // so we dont get odd scrolling behavior
    var height = jQuery_142("#page-controls-attachments").height();
    var attachmentUl = jQuery_142(".attachments-section-ul").height();
    if (attachmentUl != null) {
        jQuery_142("#page-controls-attachments").height(height);
    }
    jQuery_142(".attachments-section-ul").remove();

    // reset binding control for hidden attachemnts
    hiddenAttachmentBinded = false;



    // build li's and loop through all attachments
    var numVisible = 0;
    // var attachmentsUl = "<ul class='attachments-section-ul'>";
    var attachmentsUl = doT.template($('#attachments-section-template').text())();

    var attachmentHtml = "";
    // iterate through JSON response object
    for ( var object in pageAttachmentsData.attachments) {
        if (typeof (pageAttachmentsData.attachments[object]) == "object" && !isNaN(object)) {
            var checkOutType = pageAttachmentsData.attachments[object].checkOutType;

            //Render all attachemnts, logic for hiding in the template (refactored for COP-3993)
            if(checkOutType != 4) numVisible++;
            attachmentHtml += renderAttachmentTemplate(attachmentsDataObject, pageAttachmentsData, pageAttachmentsData.attachments[object], numVisible, pageProps);

            }
        }

    attachmentsUl = $(attachmentsUl).append(attachmentHtml);

    jQuery_142("#jquery-ul-attachments").slideDown('fast').append(attachmentsUl); // append entire ul

    // remove set height
    if (attachmentUl != null) {
        jQuery_142("#page-controls-attachments").height("auto");
    }

    var endTimeGenerate = new Date();

    AJS.log("----> Time spent in generateAttachmentsSection method: " + ((endTimeGenerate - startTimeGenerate) / 1000));
}


function renderAttachmentTemplate(attachmentsDataObject, pageAttachmentsData, attachmentObject, numVisible, pageProperties){
    //Maybe replace pageAttachmentsData, attachmentObject above with array indexes, since all the data is in attachmentsDataObject

    // init
    var doesUserHaveIE64 = window.navigator.platform=='Win64';
    var browserIsFirefox = /Firefox/.test(window.navigator.userAgent);
    var browserIsChrome =  /Chrome/.test(window.navigator.userAgent);
    var browserIsSafari = /Safari/.test(window.navigator.userAgent);
    var platformIsMac = /Mac/.test(window.navigator.platform);


    var showAllAttachments = pageProperties.showAllAttachments;
    var showHiddenAttachments = pageProperties.showHiddenAttachments;

    var data = new Object();

    data.attachmentsDataObject = attachmentsDataObject;
    data.pageAttachmentsData = pageAttachmentsData;
    data.isMacro = pageProperties.isMacro;
    var canUserAttach = pageAttachmentsData.canUserAttach;
    var canUserRemove = pageAttachmentsData.canUserRemove;
    var canUserEdit = pageAttachmentsData.canUserEdit;
    if(data.isMacro){
        data.displayCommentBelow = pageProperties.displayCommentBelow;
    }

    data.isNormal = false;
    data.isLocked = false;
    data.isEdited = false;
    data.isHidden = false;
    data.isSPEnabled = false;
    data.isSPEdited = false;
    data.isSPCheckedOut = false;
    data.hasSPError = attachmentsDataObject.hasSPError;

    //Consider moveing below logic into java actions
    if(attachmentObject.checkOutType == 1){
        data.isEdited = true;
    }
    else if(attachmentObject.checkOutType == 2 || attachmentObject.checkOutType == 3){
        data.isLocked = true;
    }
    else if(attachmentObject.checkOutType == 4){
        data.isHidden = true;
    }
    else if(attachmentObject.checkOutType == 6) {
        data.isSPEnabled = true;
        if(!data.hasSPError){
            if(attachmentObject.spData.status.checkOutType != 2){
                data.isSPCheckedOut = true;
            }
            else if (attachmentObject.spData.status.lockType != 2){
                data.isSPEdited = true;
            }
        }
    }
    else {
        data.isNormal = true;
    }

    var canDirectEditThisAttachment = false;
    var cantEditMessage = "";
    var cantEditTooltip = "";
    if (typeof cookiesEnabled === 'undefined') {
        cookiesEnabled = areCookiesEnabled();
    }
    if (typeof hasDavAccess === 'undefined') {
        checkForWebDav();
    }
    if (typeof activeXEnabled === 'undefined') {
        checkForActiveX();
    }
    if (typeof firefoxOfficeWebDavPlugin === 'undefined') {
        checkForFirefoxOfficeWebDavPlugin();
    }

    var browserIsChromeWithDE = browserIsChrome && directEditExtDetectChrome;
    var browserIsFirefoxWithDE = browserIsFirefox && directEditExtDetectFirefox;
    
    if(data.isEdited){
        if (attachmentObject.checkOutUser.name == jQuery("meta[name='ajs-remote-user']").attr("content"))  cantEditMessage = "You are already editing this file.";
        else cantEditMessage = "This file is currently being edited by another user.";
        canDirectEditThisAttachment = false;
    }

    //Removed "canUserEdit" for COP-3431
    else if (cookiesEnabled && hasDavAccess && (((typeof activeXEnabled !== 'undefined') && (activeXEnabled || browserIsChromeWithDE || browserIsFirefoxWithDE)) || ((typeof firefoxOfficeWebDavPlugin !== 'undefined') && firefoxOfficeWebDavPlugin)) && attachmentObject.progID && canUserAttach
        && (browserIsChromeWithDE || browserIsFirefoxWithDE || (!doesUserHaveIE64 && !browserIsSafari))) {
        canDirectEditThisAttachment = true;
    } 
    else {
        cantEditTooltip = "Your browser is not configured for direct editing. Click to learn more.";
        // try to detect the problem
        if (!attachmentObject.progID) {
            cantEditMessage = "The file type for this attachment does not support direct editing.";
        }
        //Removed "|| !canUserEdit" for COP-3431
        else if (!canUserAttach) {
            cantEditMessage = "You don\\'t have permission to create attachments on this page.";
            cantEditTooltip = "You do not have permission to add attachments.";
        } else if (doesUserHaveIE64) {
            cantEditMessage = "The browser that you are using (64-bit IE) does not support direct editing.";
        } else if (platformIsMac) {
            if (browserIsChrome && !directEditExtDetectChrome) {
                cantEditMessage = "chromeMacWithoutDE";
            } else if (browserIsSafari) {
                cantEditMessage = "safariMac";
            } else if (browserIsFirefox && !directEditExtDetectFirefox) {
                cantEditMessage = "firefoxMacWithoutDE";
            }
        } else if (browserIsChrome && !directEditExtDetectChrome) {
            cantEditMessage = "chromeWithoutDE";
        } else if (browserIsSafari) {
            cantEditMessage = "safari";
        } else if (browserIsFirefox && !directEditExtDetectFirefox) {
            cantEditMessage = "firefoxWithoutDE";
        } else if (!activeXEnabled && !firefoxOfficeWebDavPlugin && !browserIsChromeWithDE && !browserIsFirefoxWithDE) {
            cantEditMessage = "You don\\'t have activeX enabled or you don\\'t have Office installed.";
        } else if (!hasDavAccess) {
            cantEditMessage = "The WebDAV server is unavailable from your location. This is most likely due to a proxy or firewall.";
        } else if (!cookiesEnabled) {
            cantEditMessage = "You need to enable cookies to use the attachment direct edit feature.";
        } else {
            cantEditMessage = "We cannot determine the cause of the direct edit failure, please contact support.";
        }
    }

    //Attachment data
    data.attachmentObject = attachmentObject;
    data.versionsArray = attachmentObject.attachmentHistoryArray;
    //Add current version to front of array
    data.versionsArray.unshift(attachmentObject);
    data.cantEditMessage = cantEditMessage;
    data.cantEditTooltip = cantEditTooltip;
    data.fileType = detectFileType(attachmentObject.title); //(add to attachment object?)
    data.doEditInOfficeOnclick = "doEditInOffice2(event, '" + contextPath + "/plugins/servlet/webdav" + attachmentObject.webDavHref + "', '" + attachmentObject.progID + "'); return false;";
    data.numberOfVersions = attachmentObject.numberOfOldVersions + 1;

    //Attachment logic
    data.canUserDelete = (canUserAttach && canUserRemove);
    data.showHistCompare = (attachmentObject.numberOfOldVersions > 0 && attachmentObject.progID == "Word.Document");
    data.canUserAttach = pageAttachmentsData.canUserAttach;
    data.canUserReleaseEdits = attachmentObject.canUserReleaseEdit;
    data.showEditComment = ((data.isNormal) || (data.canUserReleaseEdits && data.isEdited));
    data.showReleaseEdit = data.canUserReleaseEdits && data.isEdited;
    // data.showInfoLink = (canDirectEditThisAttachment && (directEditExtDetectChrome || directEditExtDetectFirefox));
    data.canDirectEditThisAttachment = canDirectEditThisAttachment;
    data.directEditExtDetectChrome = directEditExtDetectChrome;
    data.doEditInOffice = (!directEditDisabledByProxy && !directEditExtDetectChrome && !directEditExtDetectFirefox);

    var showForHighlight = false;
    if (typeof (pageProperties.attachmentsIdsToHighlight) != "undefined") {
        showForHighlight = $.inArray(data.attachmentObject.attachmentId, pageProperties.attachmentsIdsToHighlight);
    }

    data.isWithinLimit = (numVisible < 10);

    if(data.isHidden) {
        data.showAttachment = (showForHighlight || showHiddenAttachments);
    }
    else {
        data.showAttachment = (showForHighlight || showAllAttachments || data.isWithinLimit);
    }

    data.showEnableSP = attachmentObject.showEnableSP; 
    data.isEnableSPEnabled = attachmentObject.canUserEnableSP;
    data.whyCantEnableSPText = !pageAttachmentsData.pageHasSecurePlus ? "" : "Co-Editing is not currently supported on pages that have MAX Secure+ restrictions.";

    data.showDisableSP = data.isSPEnabled && !data.hasSPError && attachmentObject.showDisableSP;
    //Should the disable co-edit link be enabled. Only time it is visible but not enabled is when user who "enabled" can't disabled because users are editing document.
    //Space admins can always disable.
    //Logic enforced on backend in disableSP() in CheckInOutAjax.java
    data.isDisableSPEnabled = attachmentObject.canUserDisableSP;
    data.whyCantDisableText = data.isDisableSPEnabled ? "" : "Cannot disable Co-Editing while document is being edited or is checked out.";
    data.showReleaseSPCheckout = (data.isSPEnabled && data.isSPCheckedOut && attachmentObject.canUserReleaseSPCheckout); //Insert admin/group logic
    data.showSPcheckout = (data.isSPEnabled && !data.isSPCheckedOut && attachmentObject.canUserForceSPCheckout);

    data.allowCoEdit = data.isSPEnabled && !data.hasSPError && !pageAttachmentsData.pageHasSecurePlus;
    data.cantCoEditText =  !pageAttachmentsData.pageHasSecurePlus ? "" : "Co-Editing is not currently supported on pages that have MAX Secure+ restrictions.";
    data.cantCoEditText = data.hasSPError ? "Error loading attachment." : data.cantCoEditText;

    //To remove
    data.escapedComment = community.plugins.attachments.escapeHtml(attachmentObject.comment); //Confirm can be replaced with template escape

    //Action links
    data.contextPath = contextPath;
    data.downloadLink = contextPath + attachmentObject.downloadUrl; //(add to attachment object?)
    data.deleteLink = contextPath + "/pages/removeattachment.action?pageId=" + attachmentObject.pageId + "&fileName=" + escape(attachmentObject.fileName);
    data.releaseEditLink = contextPath + "/checkinout/cancelcheckout.action?pageId=" + attachmentObject.pageId + "&fileName=" + escape(attachmentObject.fileName);
    data.unlockLink = data.releaseEditLink; //Currently the same. Separating for template in case that changes
    data.hideLink = contextPath + "/checkinout/archive.action?pageId=" + attachmentObject.pageId + "&fileName=" + escape(attachmentObject.fileName);
    data.duplicateLink = canUserAttach ? contextPath + "/json/max/ajaxduplicate.action?pageId=" + attachmentObject.pageId + "&attachmentName=" + escape(attachmentObject.fileName) : '#';    
    data.editLink = contextPath + "/plugins/servlet/wdredirect?webdavhref=" + attachmentObject.webDavHref + "&progid=" + attachmentObject.progID;
    data.restoreLink = contextPath + "/json/max/ajaxrestoreattachmentversion.action?"; //pageId, attachmentName, version supplied in template from attachment version object
    data.emailAttachmentLink = contextPath + "/json/max/ajaxemailfiletome.action?pageId=" + attachmentObject.pageId + "&attachmentName=" + escape(attachmentObject.fileName);
    data.lockLink = canUserAttach ? contextPath + "/checkinout/lock.action?ajax=true&pageId=" + attachmentObject.pageId + "&fileName=" + escape(attachmentObject.fileName) : '#';
    data.enableSPLink = data.showEnableSP ? contextPath + "/json/max/enableSP.action?ajax=true&pageId=" + attachmentObject.pageId + "&fileName=" + escape(attachmentObject.fileName) : '#';
    data.disableSPLink = data.showDisableSP ? contextPath + "/json/max/disableSP.action?ajax=true&pageId=" + attachmentObject.pageId + "&fileName=" + escape(attachmentObject.fileName) : '#'; //Same to start, may need to add an intermediate call to remove from SP
    data.SPEditLink = (data.isSPEnabled && !data.hasSPError) ? attachmentObject.spData.url : "";
    data.SPcheckoutLink = (data.isSPEnabled && data.showSPcheckout) ? contextPath + "/json/max/doSPCheckout.action?ajax=true&pageId=" + attachmentObject.pageId + "&fileName=" + escape(attachmentObject.fileName) : '#';
    data.releaseSPCheckoutLink = (data.isSPEnabled && data.showReleaseSPCheckout) ? contextPath + "/json/max/releaseSPCheckout.action?ajax=true&pageId=" + attachmentObject.pageId + "&fileName=" + escape(attachmentObject.fileName) : '#';

    data.browserIsChrome = browserIsChrome;

    data.profileLinkUrl = contextPath + "/users/viewuserprofile.action?username=";
    data.viewPageLink = contextPath + "/pages/viewpage.action?pageId=" + attachmentObject.pageId;
    if(data.isMacro){
        data.spaceKey = data.pageAttachmentsData.spaceKey;
        data.viewSpaceLink = contextPath + "/display/" + escape(data.spaceKey);
        data.pageTitle = data.pageAttachmentsData.title;
    }
    data.ieTabLink = "https://" + window.location.hostname + contextPath + "/plugins;jsessionid=" + jQuery.cookie("JSESSIONID") + "/servlet/wdredirect?webdavhref=" + attachmentObject.webDavHref + "&progid=" + attachmentObject.progID;
    data.editDisabledOnclick = "showDialogWhyEditIsDisabled('" + data.cantEditMessage + "'); return false;";
    data.editOnclick = directEditExtDetectChrome ? "openDirectEditChromeLink(this)" : data.doEditInOfficeOnclick;    

    //Images
    data.cantEditImage = contextPath + "/s/en/2171/25/1.13.57.1,018/_/download/batch/gov.eop.omb.confluence.resources.MAX-Resources:design-resources/images/icon-error-small.png"; //Move this to css?

    //Don't render hidden attachments if is macro
    if(data.isMacro && data.isHidden) return "";
    
    else return(doT.template($('#attachments-template').text())(data));
}

/*
 * var directEditExtDetectChrome = false; var directEditExtDetectFirefox = false;
 */
jQuery(document).ready(function() {
    /*
     * if(directEditExtDetectChrome == false) { jQuery.ajax({ url:"chrome-extension://hehijbfgiekmjfkfjpbkbammjbdenadd/js/extapi_wp.js", type: 'GET', async: false, success: function () {
     * console.log("Direct Edit plugin enabled.");
     * 
     * directEditExtDetectChrome= (jQuery("meta#agency-code").attr("content")=="854" && jQuery("meta[name='ajs-base-url']:first").attr("content")=="https://community.test.max.gov");
     * console.log("directEditExtDetectChrome: "+directEditExtDetectChrome); }, error: function () {console.log('Direct Edit plugin not enabled.')} }); }
     * 
     * if(directEditExtDetectChrome == false && directEditExtDetectFirefox == false) { console.log("checking direct edit for Firefox"); jQuery(navigator.plugins).each(function(){
     * if(!directEditExtDetectFirefox && this.name == "IE Tab Plug-in") { console.log("IE Tab Plug-in exists!"); directEditExtDetectFirefox = (jQuery("meta#agency-code").attr("content")=="854" &&
     * jQuery("meta[name='ajs-base-url']:first").attr("content")=="https://community.test.max.gov"); } }); }
     */
});


function getIETabChromeVersion() {
    var ret;
    window.ietab.getVersion(function(version) {
        ret = version;
        console.log("yourVersion: " + ret);
        console.log("8.2.5.2" == ret);
        console.log("EXITING...");
    });
    console.log("EXITED and returning: " + ret);
    return ret;
}

function openDirectEditChromeLink(element) {
    var requestAccess;
    var theHref = jQuery(element).attr("data-ietab-href");
    window.ietab.getVersion(function(version) {
        var versionComparison = versionCompare(version, "8.2.5.2");

        if (!isNaN(versionComparison) && versionComparison >= 0) {
            window.ietab.requestAccess(true, function(result) {

                if (result) {
                    window.ietab.openWithIETab(theHref, true);
                } else {
                    window.ietab.requestAccess(function(result) {

                        if (result) {
                            window.ietab.openWithIETab(theHref, true);
                        }
                    });
                }
            });
        }
    });
    /*
     * if(!requestAccess) { window.ietab.requestAccess(function(result) { requestAccess = result; }); } if(requestAccess) { window.ietab.openWithIETab(theHref, true); }
     */
    // });
}

function showDialogWhyEditIsDisabled(cantEditMessage) {

    var dialog = jQuery("<div></div>");
    var wrapper = jQuery("<div></div>");
    var dialogConfig = new JQUERYUI_DIALOG_INFO_HASH;

    dialog.attr("id", "attachment-edit-disabled-dialog");

    dialogConfig.height = 275;
    dialogConfig.width = 530;
    dialogConfig.resizable = false;
    dialogConfig.title = "Direct Editing of MS Office Attachments Not Available";

    if (cantEditMessage == "firefoxWithoutDE") {
        wrapper.append('  <p class="dialog-content">' +

            '<img class="ietab-firefox" src="' + contextPath + '/s/en/2172/30/1.14.16.54/_/download/batch/gov.eop.omb.confluence.resources.MAX-Resources:design-resources/images/ietab-firefox.png" alt="IE Tab Image"   />Direct editing of Microsoft Office in <strong>Firefox</strong> requires  '
            + '<a href="http://www.ietab.net/">installing the IE Tab extension</a>.' + ' If the IE Tab is already installed, <strong>right-click</strong> on the page and choose "View Page in IE Tab".' + '</p>'
            + '<p style="margin-top:20px;" class="dialog-content"> <a href="https://max.omb.gov/community/x/poo3KQ">View more information</a> on browser support for direct editing.</p>' + '</div>' + '' + '</div>' + '</body>' + '</html>');
    } else if (cantEditMessage == 'chromeWithoutDE') {
        wrapper.append('  <p class="dialog-content"> ' + '<img class="ietab-chrome" src="' + contextPath + '/s/en/2172/30/1.14.16.54/_/download/batch/gov.eop.omb.confluence.resources.MAX-Resources:design-resources/images/ietab-chrome.png" alt="IE Tab Image" />' +

            'Direct editing of Microsoft Office in <strong>Chrome</strong> requires  ' + '<a href="http://www.ietab.net/">installing the IE Tab extension</a>. ' + 'If the IE Tab is already installed, click on the icon in the top right corner of the browser window.</p>'
            + '<p style="margin-top:20px;" class="dialog-content"><a href="https://max.omb.gov/community/x/poo3KQ">View more information</a> on browser support for direct editing.</p>' + '</div>' + '' + '</div>' + '</body>' + '</html>');
    } else if (cantEditMessage == 'safari') {
        wrapper.append('    <p class="dialog-content">Direct editing of Microsoft Office attachments in Safari is not available.' + ' 	</p>' + '<p class="dialog-content">Support for Safari on Windows was discontinued after Safari version 5.1.7. </p>'
            + '<p style="margin-top:20px;" class="dialog-content"><a href="https://max.omb.gov/community/x/poo3KQ">View more information</a> on browser support for direct editing.</p>' + '      </div>');
    } else if (cantEditMessage == 'safariMac') {
        wrapper.append('<p class="dialog-content"> Direct editing of Microsoft Office attachments is not available on ' + 'Mac OS X.' + '  </p> '
            + '<p style="margin-top:20px;" class="dialog-content"> <a href="https://max.omb.gov/community/x/poo3KQ">View more information</a> on browser support for direct editing.</p>' +

            '</div>' + '</body>' + '</html>');

    }

    else if (cantEditMessage == 'chromeMacWithoutDE') {
        wrapper.append('<p class="dialog-content"> Direct editing of Microsoft Office attachments is not available on ' + 'Mac OS X.' + '  </p> '
            + '<p style="margin-top:20px;" class="dialog-content"> <a href="https://max.omb.gov/community/x/poo3KQ">View more information</a> on browser support for direct editing.</p>' +

            '</div>' + '</body>' + '</html>');
    } else if (cantEditMessage == 'firefoxMacWithoutDE') {
        wrapper.append('<p class="dialog-content"> Direct editing of Microsoft Office attachments is not available on ' + 'Mac OS X.' + '  </p> '
            + '<p style="margin-top:20px;" class="dialog-content"> <a href="https://max.omb.gov/community/x/poo3KQ">View more information</a> on browser support for direct editing.</p>' +

            '</div>' + '</body>' + '</html>');
    }

    else {
        wrapper.append("<h2>" + cantEditMessage + "</h2>")
    }

    dialog.append(wrapper);
    dialog.dialog(dialogConfig);

    return false;
}

function detectFileType(fileName) {

    var dotIdx = fileName.lastIndexOf('.');
    if (dotIdx != -1) {
        var extension = fileName.substring(dotIdx);
        if (extension.toLowerCase() == ".doc" || extension.toLowerCase() == ".docx" || extension.toLowerCase() == ".dotm" || extension.toLowerCase() == ".dot" || extension.toLowerCase() == ".dotx" || extension.toLowerCase() == ".docm") {
            return "word";
        } else if (extension.toLowerCase() == ".xls" || extension.toLowerCase() == ".xlsx" || extension.toLowerCase() == ".xlsm" || extension.toLowerCase() == ".xltx" || extension.toLowerCase() == ".xltm") {
            return "excel";
        } else if (extension.toLowerCase() == ".ppt" || extension.toLowerCase() == ".pptx" || extension.toLowerCase() == ".pptm") {
            return "ppt";
        } else if (extension.toLowerCase() == ".mpp") {
            return "project";
        } else if (extension.toLowerCase() == ".pdf") {
            return "pdf";
        } else if (extension.toLowerCase() == ".xml") {
            return "xml";
        } else if (extension.toLowerCase() == ".html" || extension.toLowerCase() == ".htm") {
            return "html";
        } else if (extension.toLowerCase() == ".jar") {
            return "jar";
        } else if (extension.toLowerCase() == ".txt") {
            return "txt";
        } else if (extension.toLowerCase() == ".zip") {
            return "zip";
        } else if (extension.toLowerCase() == ".jpg" || extension.toLowerCase() == ".jpeg") {
            return "jpg";
        } else if (extension.toLowerCase() == ".gif") {
            return "gif";
        } else if (extension.toLowerCase() == ".png") {
            return "png";
        } else {
            return "generic";
        }
    } else {
        return "generic";
    }
}

function bindCollapseActions() {

    // bind show hide of the entire section
    var isRunningAttachCollapse = false;
    jQuery_142("#jquery-attach-collapse").click(function() {
        if (isRunningAttachCollapse == true) {
            return false;
        }
        isRunningAttachCollapse = true;
        userPreferences.setAttachmentsSectionCollapse(true);
        $(this).addClass("hidden");
        $("#jquery-attach-expand").removeClass("hidden");
        $("ul.attachments-section-ul").slideUp('slow', function(){
            $("#page-controls-attachments-sorting").hide();
        });
        $(".view-collapse-attachments-links").hide();
        $("#jquery-empty-attachments").slideUp('slow', function() {
            $("#jquery-empty-attachments").addClass("hidden");
        });
        $("#jquery-attach-expand").show();
        isRunningAttachCollapse = false;
        return false;
    });

    var isRunningAttachExpand = false;
    jQuery_142("#jquery-attach-expand").click(function() {
        if (isRunningAttachExpand == true) {
            return false;
        }
        userPreferences.setAttachmentsSectionCollapse(false);
        $(this).addClass("hidden");
        $("#jquery-attach-collapse").removeClass("hidden");
        loadAttachmentsSection();
        jQuery("ul.attachments-section-ul").slideDown('slow');
        // $("#page-controls-attachments-sorting").show();
        isRunningAttachExpand = false;
        return false;
    });

}

function hideAttachmentsSection() {
    jQuery_142(this).addClass("hidden");
    jQuery_142("#jquery-attach-expand").removeClass("hidden");
    jQuery_142("ul.attachments-section-ul").slideUp('slow');
    jQuery_142("#jquery-empty-attachments").slideUp('slow');;
    jQuery_142("#jquery-attach-expand").show();
}

function showAttachmentsSection() {
    jQuery_142(this).addClass("hidden");
    jQuery_142("#jquery-attach-collapse").removeClass("hidden");
    loadAttachmentsSection();
    jQuery_142("ul.attachments-section-ul").slideDown('slow');
    jQuery_142("#jquery-empty-attachments").slideDown('slow');
    isRunningAttachExpand = false;
}

community.plugins.attachments.toggleAttachmentOptions = function(target, wrapperObj) {
    var optionsButton = jQuery(target).closest("li.individual-attachment").find("a.attach-options-button");

    var isActive = optionsButton.hasClass('active');
    if (isActive) {
        optionsButton.removeClass('active');
    } else {
        optionsButton.addClass('active');
    }

    var optionsDiv = jQuery(target).closest("li.individual-attachment").find("div.attachment-options");
    if (optionsDiv.hasClass('hidden')) {
        optionsDiv.removeClass('hidden');
    } else {
        optionsDiv.addClass('hidden');
    }

    var detailsDiv = jQuery(target).closest("li.individual-attachment").find("div.attach-details-section");
    if (detailsDiv.hasClass('hidden')) {
        detailsDiv.removeClass('hidden');
    } else {
        detailsDiv.addClass('hidden');
    }

    // show/hide meta data
    /*
     * var postedByH5 = jQuery(target).siblings("h5.jquery-attachment-posted-by") if ( postedByH5.hasClass('hidden') ) { postedByH5.removeClass('hidden'); } else { postedByH5.addClass('hidden'); }
     */

    // reset all others back to hidden
    jQuery(wrapperObj).find("div.attachment-options").not(optionsDiv).addClass('hidden');
    jQuery(wrapperObj).find("div.attach-details-section").not(detailsDiv).addClass('hidden');

    // reset all other arrows
    jQuery(target).closest("ul").find("a.attach-options-button").not(optionsButton).removeClass('active');

}

community.plugins.attachments.bindAllEventsAndSetupDisplay = function(currentSectionWrapper) {

    // ################## Start Hides ######################

    // hide all add attachment divs
    jQuery(currentSectionWrapper).find("#attach-add-attachments .padding-wrapper div:not('.attachment-comment-overlay')").hide();

    // ################## End Hides ####################

    jQuery(currentSectionWrapper).find("#attach-add-attachments .padding-wrapper div.first").show();

    // ################## Start Bindings ###############
    // bind read only attachment download dialog here
    // intercept the normal action to popup a message.. since people dont know how to use computers
    jQuery(currentSectionWrapper).find("a.attach-options-link").click(function() {
        // check for the EDIT link after and make sure its is not disabled
        // if ( jQuery(this).next().hasClass("disabled") ) {
        // return true;
        // }
        readOnlyDownloadDialog(this.href);
        return false;
    });

    // put annoying tooltip on view link
    jQuery(currentSectionWrapper).find("a.attach-options-link").hover(function() {
        // if (jQuery(this).text() === "VIEW-ONLY") {
        var message = jQuery("<div class='attachments-view-warning-tooltip'><span></span>No Editing<div class='subtitle'>changes will NOT be saved!</div></div>");
        jQuery(this).parent().append(message);
        message.css("position", "absolute");
        message.css("top", "-64px");
        message.css("left", "-70px");
        // }
    }, function() {
        // if (jQuery(this).text() === "VIEW-ONLY") {
        jQuery(this).parent().find("div").remove();
        // }
    });

    // put annoying "tooltip" on edit link
    // but only if user can edit attachments anyway
    //Remove "&& canUserEdit" for COP-3431
    if (community.plugins.attachments.canUserAttach) {
        jQuery(currentSectionWrapper).find("a.attach-options-edit.disabled").hover(function() {
            if (!jQuery(this).hasClass("attach-options-edit-locked")) {
                var message = jQuery("<div class='attachments-view-warning-tooltip'><span></span><div class='subtitle'>Your browser is not configured for direct editing. Click to learn more.</div>");
                jQuery(this).parent().append(message);
                message.css("position", "absolute");
                message.css("top", "-64px");
                message.css("left", "0px");
            }
        }, function() {
            if (!jQuery(this).hasClass("attach-options-edit-locked")) {
                jQuery(this).parent().find("div").remove();
            }
        });
    }

    // bind hover attachment title action
    jQuery(currentSectionWrapper).find("#jquery-ul-attachments a.attach-options-button, #jquery-ul-attachments a.attach-options-button-alt").click(function() {
        community.plugins.attachments.toggleAttachmentOptions(jQuery(this), currentSectionWrapper);
        return false;
    });

    jQuery(currentSectionWrapper).find("a.jquery-filename-link, a.file-icon").click(function() {
        community.plugins.attachments.toggleAttachmentOptions(jQuery(this), currentSectionWrapper);
        return false;
    });

    jQuery(currentSectionWrapper).find("h4.jquery-title-line, h5.jquery-attachment-modified-by, span.attach-comment, h5.jquery-attachment-modified-by>a").click(function() {
        if (jQuery(this)[0].tagName == "A" || jQuery(this)[0].tagName == "a") {
            window.open(jQuery(this).attr("href"));
        } else {
            community.plugins.attachments.toggleAttachmentOptions(jQuery(this), currentSectionWrapper);
        }
        return false;
    });

    jQuery(currentSectionWrapper).find("#jquery-ul-attachments a.refresh-attachment-button").click(function() {
        //set the scroll position to restore. There's probs a better way to do this instead of a global var...
        //Maybe at least move into "loadAttachmentsSection"?
        tempScrollTop = jQuery(window).scrollTop();
        var attachmentId = parseInt($(this).parent().attr('id'));
        //Only reload the attachments section for now. -AWP
        loadAttachments(attachmentId, false);
        return false;
    });

    // bind show/hide advanced attachment options
    jQuery(currentSectionWrapper).find("a.attach-options-advanced").toggle(function() {
        // if disabled just return false
        if (jQuery_142(this).hasClass("disabled")) {
            return false;
        }
        // hide all then show selected one
        jQuery_142(this).siblings().removeClass("active");
        jQuery_142(this).parents(".attachment-options").find(".attach-options-rename").removeClass("active");
        jQuery_142(this).parents(".attachment-options").find("form").slideUp(100);
        jQuery_142(this).parents(".attachment-options").find(".attach-options-history-list").slideUp(100);
        jQuery_142(this).parents(".attachment-options").find(".attach-options-headers").slideUp(100);

        jQuery_142(this).addClass("active");
        if (jQuery_142.browser.msie && parseInt(jQuery_142.browser.version) < 8) {
            jQuery_142(this).parents(".attachment-options").find(".advanced-options").show();
        } else {
            jQuery_142(this).parents(".attachment-options").find(".advanced-options").slideDown('fast');
        }
    }, function() {
        // if disabled just return false
        if (jQuery_142(this).hasClass("disabled")) {
            return false;
        }
        var isActive = jQuery_142(this).hasClass("active");
        if (isActive == false) {
            // toggle again, this has been hidden already and needs to
            // be shown now
            jQuery_142(this).click();
            return false;
        }
        jQuery_142(this).removeClass("active");
        jQuery_142(this).parents(".attachment-options").find(".attach-options-rename").removeClass("active");
        jQuery_142(this).parents(".attachment-options").find(".advanced-options").slideUp(100);
        jQuery_142(this).parents(".attachment-options").find("form").slideUp(100);
    });

    // bind attachments history section actions (toggle)
    jQuery(currentSectionWrapper).find("a.attach-options-versionhistory").toggle(function() {
        // if disabled just return false
        if (jQuery_142(this).hasClass("disabled")) {
            return false;
        }
        
        // get data and render html
        if (!$(this).hasClass("rendered")) {
        	renderAttachmentHistory(this);
        }
        
        // hide all then show selected one
        jQuery_142(this).siblings().removeClass("active");
        jQuery_142(this).parents(".attachment-options").find(".attach-options-rename").removeClass("active");
        jQuery_142(this).parents(".attachment-options").find("form").slideUp(100);
        // jQuery_142(this).parents(".attachment-options").find(".advanced-options").slideUp(100);

        jQuery_142(this).addClass("active");
        if (jQuery_142.browser.msie && parseInt(jQuery_142.browser.version) < 8) {
            jQuery_142(this).parents(".attachment-options").find(".attach-options-headers").show();
            jQuery_142(this).parents(".attachment-options").find(".attach-options-history-list").show();
        } else {
            jQuery_142(this).parents(".attachment-options").find(".attach-options-headers").slideDown('fast');
            jQuery_142(this).parents(".attachment-options").find(".attach-options-history-list").slideDown('fast');
        }
    }, function() {
        // if disabled just return false
        if (jQuery_142(this).hasClass("disabled")) {
            return false;
        }
        var isActive = jQuery_142(this).hasClass("active");
        if (isActive == false) {
            // toggle again, this has been hidden already and needs to
            // be shown now
            jQuery_142(this).click();
            return false;
        }
        jQuery_142(this).removeClass("active");
        jQuery_142(this).parents(".attachment-options").find(".attach-options-rename").removeClass("active");
        jQuery_142(this).parents(".attachment-options").find(".attach-options-history-list").slideUp(100);
        jQuery_142(this).parents(".attachment-options").find(".attach-options-headers").slideUp(100);
        jQuery_142(this).parents(".attachment-options").find("form").slideUp(100);
    });

		//To switch "edit comment" function in attachment options section to use propmpt, replace the toggle function below with this (COP-3393)
		//To-Do:Maybe use toggle() here as well? -AWP
	    // jQuery(currentSectionWrapper).find("a.attach-options-editcomment").click( function(eventObject){
	    // 	promptForNewComment($(this).parents('.individual-attachment'), eventObject);
	    // });

    // bind edit comment event (show input area)
    jQuery(currentSectionWrapper).find("a.attach-options-editcomment").toggle(
        // if disabled just return false
        function() {
            if (jQuery_142(this).hasClass("disabled")) {
                return false;
            }

            // hide all then show selected one
            jQuery_142(this).siblings().removeClass("active");
            jQuery_142(this).parents(".attachment-options").find("form").hide();// .slideUp(100);
            jQuery_142(this).parents(".attachment-options").find(".attach-options-history-list").hide();// .slideUp(100);
            jQuery_142(this).parents(".attachment-options").find(".attach-options-headers").hide();// .slideUp(100);

            jQuery_142(this).addClass("active");
            jQuery_142(this).parents(".attachment-options").find("form.attach-edit-comment").show();

        }, function() {
            // if disabled just return false
            if (jQuery_142(this).hasClass("disabled")) {
                return false;
            }
            var isActive = jQuery_142(this).hasClass("active");
            if (isActive == false) {
                // toggle again, this has been hidden already and needs to
                // be shown now
                jQuery_142(this).click();
                return false;
            }
            jQuery_142(this).removeClass("active");
            jQuery_142(this).parents(".attachment-options").find(".attach-options-rename").removeClass("active");
            jQuery_142(this).parents(".attachment-options").find(".attach-options-history-list").hide();// .slideUp(100);
            jQuery_142(this).parents(".attachment-options").find(".attach-options-headers").hide();// .slideUp(100);
            jQuery_142(this).parents(".attachment-options").find("form").hide();// .slideUp(100);

        });

    // bind close link for edit comment
    jQuery(currentSectionWrapper).find("a.attach-form-close-editcomment").click(function() {
        jQuery(this).closest(".attachment-options").find(".attach-options-editcomment").trigger("click");
        return false;
    });

    // bind rename attachment event (show input area)
    jQuery(currentSectionWrapper).find("a.attach-options-rename").toggle(function() {
        if (jQuery_142(this).hasClass("disabled")) {
            return false;
        }
        // hide all then show selected one
        jQuery_142(this).siblings().removeClass("active");
        jQuery_142(this).parents(".options-bottom").find("form").slideUp(100);
        jQuery_142(this).parents(".attachment-options").find(".attach-options-history-list").slideUp(100);
        jQuery_142(this).parents(".attachment-options").find(".attach-options-headers").slideUp(100);

        jQuery_142(this).addClass("active");
        if (jQuery_142.browser.msie && parseInt(jQuery_142.browser.version) < 8) {
            jQuery_142(this).parents(".options-bottom").children("form.attach-edit-rename").show();
        } else {
            jQuery_142(this).parents(".options-bottom").children("form.attach-edit-rename").slideDown('fast');
        }
    }, function() {
        if (jQuery_142(this).hasClass("disabled")) {
            return false;
        }
        var isActive = jQuery_142(this).hasClass("active");
        if (isActive == false) {
            // toggle again, this has been hidden already and needs to
            // be shown now
            jQuery_142(this).click();
            return false;
        }
        jQuery_142(this).removeClass("active");
        jQuery_142(this).parents(".options-bottom").find("form.attach-edit-rename").slideUp(100);
    });

    // bind close link for rename comment
    jQuery(currentSectionWrapper).find("a.attach-form-close-rename").click(function() {
        jQuery(this).closest(".attachment-options").find(".attach-options-rename").trigger("click");
        return false;
    });

    // %%%%%%%%%%%%% START binding attachment option buttons %%%%%%%%%%%%%%%%%%


    // edit attachment comment
    jQuery(currentSectionWrapper).find("form.attach-edit-comment").submit(function(eventObject) {
        // do post and then refresh attachments list - not async
        var newComment = jQuery_142(this).children("input.attach-edit-comment-new-input").val();
        updateAttachmentComment(newComment, eventObject, currentSectionWrapper);

        return false;
    });

    // rename attachment
    jQuery(currentSectionWrapper).find("form.attach-edit-rename").submit(function(eventObject) {
        // do post and then refresh attachments list - not async
        var newFileName = jQuery_142(this).children("input.attach-edit-rename-new-input").val();
        var attachmentFileName = jQuery_142(this).children("input.attach-form-filename").val();
        var attachmentPageId = jQuery_142(this).children("input.attach-form-pageid").val();
        tempScrollTop = jQuery(window).scrollTop();
        AJS.log("rename temp scroll top: " + tempScrollTop);
        //Moved retriving cookie here so value of cook is no longer global -AWP
        if (jQuery.cookie("sort") != undefined) {
            cook = jQuery.cookie("sort");
            AJS.log('cookie set (edit-rename): ' + cook);
        }
        jQuery_142.ajax({
            type: 'POST',
            dataType: "json",
            url: contextPath + "/json/max/editattachmentajax.action",
            data: {
                pageId: attachmentPageId,
                attachmentFileName: attachmentFileName,
                newFileName: newFileName
            },
            async: false,
            success: function(data) {
                handleAjaxAttachmentEditSuccess(eventObject, this, data, currentSectionWrapper)
            },
            error: function() {
                alert('An error has occurred.');
            }
        });
        return false;
    });

    // Bind move attachment dialog interface
    jQuery(currentSectionWrapper).find("a.attach-options-move").click(function() {
        if (jQuery(this).hasClass("disabled")) {
            return false;
        }
        var attachmentFileName = jQuery(this).parent(".advanced-options").parent(".options-bottom").find("form.attach-edit-move").find("input.attach-form-filename").val();
        var attachmentPageId = jQuery(this).parent(".advanced-options").parent(".options-bottom").find("form.attach-edit-move").find("input.attach-form-pageid").val();

        if (jQuery("#move-page-dialog").length > 0) {
            jQuery("#move-page-dialog, body > .shadow, body > .blanket").remove();
        }

        new MoveContentDialog({
            title: "Move Attachment",
            isAttachment: true,
            dialogDataStore: {
                "attachmentFileName": attachmentFileName,
                "attachmentPageId": attachmentPageId
            },
            locationPanelInfo: "Specify the new parent page for this attachment by space and title.",
            searchPanelInfo: "Search for and select the new parent page for this attachment. ",
            historyPanelInfo: "Select the new parent page for this attachment from your history. ",
            browsePanelInfo: "Click to select the new parent page for this attachment. ",
            moveHandler: moveAttachmentHandler
        });

        jQuery().scrollTo('#move-page-dialog', {
            over: {
                left: -3000
            }
        });

        return false;
    });

    jQuery(currentSectionWrapper).find("a.sp-error, .sp-coedit-link-disabled.coedit-link-sp-error").click(function() {
        showAttachmentSPErrorDialog();
        return false;
    });

    function showAttachmentSPErrorDialog(){
        var dialog = jQuery("<div></div>");
        var dialogConfig = new JQUERYUI_DIALOG_INFO_HASH;
        var p = $("<p>An error occurred retrieving data for this Co-Edit enabled attachment.</br></br> You can download the last uploaded file version, or click below to refresh the page. If the problem persists, please contact MAX Support.</br></br></b></p>");
        dialogConfig.title = "Error loading attachment";
        dialogConfig.buttons = {
            "Close": function() {
                jQuery(this).dialog("close");
            },
            "Refresh Page": function() {
                location.reload();
            }
        };
        dialogConfig.width = 500;
        dialog.append(p);
        dialog.dialog(dialogConfig);
    }


    /*
     * function drawAttachmentMoveDialog(this) { }
     */
    function handleAjaxErrors(x, e) {
        killSpinner();
        jQuery_142("button", dialog).attr("disabled", "");
        jQuery_142("#" + myDialog.id).removeClass("waiting");
        myDialog.gotoPage(0); // errors all show on the first page,
        // where you can correct them
        if (x.status == 0) {
            setErrors('You are offline!\n Please Check Your Network.');
        } else if (x.status == 404) {
            setErrors('Requested URL not found.');
        } else if (x.status == 500) {
            setErrors('Internal Server Error.');
        } else if (e == 'parsererror') {
            setErrors('Error:\nParsing JSON Request failed.');
        } else if (e == 'timeout') {
            setErrors('Request Time out.');
        } else {
            setErrors('Unknow Error: \n' + x.responseText);
        }
    }
    // Custom attachment Move Handler
    function moveAttachmentHandler(myDialog, newSpaceKey, newParentPage, dataStore, setErrors) {
        dialog = myDialog.popup.element;
        dialog.addClass("waiting");
        var throbber = jQuery_142("<div class='throbber'></div>");
        dialog.append(throbber);
        var killSpinner = Raphael.spinner(throbber[0], 100, "#666");
        // move the attachment
        jQuery_142.ajax({
            type: 'POST',
            dataType: "json",
            url: contextPath + "/json/max/editattachmentajax.action",
            data: {
                pageId: this.dialogDataStore.attachmentPageId,
                attachmentFileName: this.dialogDataStore.attachmentFileName,
                newParentPage: newParentPage,
                newSpaceKey: newSpaceKey
            },
            async: false,
            success: function(data) {
                setErrors(data.returnObject.errorMessage);
                handleAjaxAttachmentEditSuccessLightBox(myDialog, data, throbber, killSpinner);
            },
            error: handleAjaxErrors

        });
    }

    //TODO:Need to fix these to use the new page/attachments array structure

    function handleAjaxAttachmentEditSuccessLightBox(myDialog, data, throbber, killSpinner) {
        // check for error message
        var errorMessage = data.returnObject.errorMessage;
        if (errorMessage) {
         
            // setErrors(myDialog, errorMessage);
            // showError(data);
            // killSpinner();


            // jQuery_142(".move-button", myDialog).attr("disabled", ""); //is this necessary? commenting out
            jQuery(".move-cancel-button").removeAttr("disabled");
            jQuery_142("#" + myDialog.id).removeClass("waiting");
            myDialog.gotoPage(0); // errors all show on the first page, where
            if (data.returnObject.errorType != "FilenameClash") {
                //Removing this as part of COP-3597 refactor, as the EditattachmentAction no longer will return the errorMessage string below. 
                //If we need to readd, need to refactor so it doen't rely on attachmentsDataObject global and uses new json structure

                // // Changes dialog box and adds filename below error message.
                // if (errorMessage == "Could not move file. A file with the same name already exists on the selected destination page.") {
                //     var duplicateAttachmentFileName = "";
                //     for (var i = 0; i < attachmentsDataObject.attachments.length; i++) {
                //         if (attachmentsDataObject.attachments[i].attachmentId == data.returnObject.attachmentId) {
                //             duplicateAttachmentFileName = attachmentsDataObject.attachments[i].title;
                //         }
                //     }
                //     jQuery("#move-page-dialog").find(".dialog-page-menu").attr("style", "height:474px");
                //     jQuery("#move-page-dialog").find(".dialog-button-panel").append("<div id=\"destination-page-error-filename\" style=\"color:red; text-align:center\">(filename: " + duplicateAttachmentFileName + ")</div>");
                //     jQuery("#move-page-dialog").find(".dialog-button-panel").attr("style", "height:43px");
                // }
            } else {
                var retObject = data.returnObject;
                dialog = jQuery("<div></div>");
                var dialogConfig = new JQUERYUI_DIALOG_MODAL_HASH;

                dialogConfig.height = 160;
                dialogConfig.width = 500;
                dialogConfig.minHeight = false;
                dialogConfig.minWidth = false;
                dialogConfig.zIndex = jQuery("#" + myDialog.id).css("z-index") + 1;
                dialog.attr("id", "jquery-move-attachment-and-rename-dialog-" + myDialog.id);
                dialog.append(jQuery("<span>").text("There is already an attachment with the same name in the destination page. " + "Would you like to continue moving the file by renaming it to '" + retObject.willRenameAs + "'?"));
                dialogConfig.title = "Attachment Already Exists. Rename and Move?";
                // console.log("dialog config buttons:");
                console.log(dialogConfig.buttons);
                dialogConfig.buttons = {};
                dialogConfig.buttons["Cancel"] = function() {
                    jQuery(".throbber").remove();
                    jQuery(this).dialog("close");
                };
                dialogConfig.buttons["Yes"] = function() {
                    jQuery.ajax({
                        type: "POST",
                        url: "/json/max/editattachmentajax.action",
                        data: data.returnObject,
                        dataType: "json",
                        success: function(data, textStatus, jqXHR) {
                            jQuery(dialog).remove();
                            return removeDialogAndReloadAttachments(myDialog);
                        },
                        error: handleAjaxErrors
                    });
                    jQuery(this).dialog("close");
                };
                // console.log("dialog config buttons")
                // console.log(dialogConfig.buttons);
                dialog.dialog(dialogConfig);

            }
            // you can correct them
            jQuery(".move-cancel-button").removeAttr("disabled");
            return false;
        } else {
            return removeDialogAndReloadAttachments(myDialog);
        }
    }

    function removeDialogAndReloadAttachments(myDialog) {
        // success reload the attachments
        myDialog.remove();
        if (jQuery(currentSectionWrapper).hasClass("new-attachments-macro-wrapper")) {
            community.plugins.attachments.newAttachmentMacro.render(currentSectionWrapper);
        } else {
            loadAttachmentsSection();
        }
        return false;
    }

    function showError(data) {
        if (data.returnObject.errorType == "cantCreateAttachmentOnTarget") {
            jQuery_142("div.dialog-button-panel:visible").prepend(
                    '<div class="errorMessage" style="float:left; margin-left:20px;">You do not have the appropriate permissions to move the attachment to <strong>' + data.returnObject.destinationSpace + '</strong> : <strong>' + data.returnObject.destinationPage
                    + '</strong>.</div>');

        }
    }

    function setErrors(myDialog, errors) {
        if (!errors || errors.length == 0) {
            jQuery_142("#move-errors").addClass("hidden");
            jQuery_142("#" + myDialog.id + " .move-button").attr("disabled", "");
            return;
        }
        if (!jQuery_142.isArray(errors)) {
            errors = [ errors ];
        }
        if (jQuery("#" + myDialog.id).find("#move-errors").size() == 0) {
            // missing error container, add it
            jQuery("#" + myDialog.id).find(".dialog-button-panel").prepend("<div id='move-errors' class='warning hidden'></div>");
        }
        jQuery("#" + myDialog.id).find("#move-errors").text(errors[0]).attr("title", errors.join("\n")).removeClass("hidden");
        jQuery("#" + myDialog.id).find("#move-errors").text(errors[0]).attr("style", "color:red");

    }

    jQuery(currentSectionWrapper).find("a.attach-options-email").click(function(eventObject) {
        if (jQuery(this).hasClass("disabled")) {
            return false;
        }
        // do get and then refresh attachments list - not async
        var href = jQuery(this).attr("href");
        // AJS.log("bind email attachment");
        // open bimodal dialog here
        jQuery.ajax({
            type: 'GET',
            dataType: 'json',
            url: href,
            async: false,
            success: function(data) {
                jQuery(data.attachmentEmailed).each(function(index, value) {
                    if (jQuery.browser.msie && parseInt(jQuery.browser.version) < 8) {
                        jQuery(currentSectionWrapper).find("#" + value.id + " .attachment-emailed").show();
                        jQuery(currentSectionWrapper).find("#new-attachments-macro-" + value.id + " .attachment-emailed").show();
                    } else {
                        jQuery(currentSectionWrapper).find("#" + value.id + " .attachment-emailed").slideDown('fast');
                        jQuery(currentSectionWrapper).find("#new-attachments-macro-" + value.id + " .attachment-emailed").slideDown('fast');
                    }
                });
                jQuery(data.attachmentEmailed).each(function(index, value) {
                    if (jQuery.browser.msie && parseInt(jQuery.browser.version) < 8) {
                        setTimeout(function() {
                            jQuery(currentSectionWrapper).find("#" + value.id + " .attachment-emailed").hide();
                        }, 4000);
                        setTimeout(function() {
                            jQuery(currentSectionWrapper).find("#new-attachments-macro-" + value.id + " .attachment-emailed").hide();
                        }, 4000);
                    } else {
                        setTimeout(function() {
                            jQuery(currentSectionWrapper).find("#" + value.id + " .attachment-emailed").slideUp(100);
                        }, 4000);
                        setTimeout(function() {
                            jQuery(currentSectionWrapper).find("#new-attachments-macro-" + value.id + " .attachment-emailed").slideUp(100);
                        }, 4000);
                    }
                });

                AJS.log("email success");

            },
            error: function() {
                AJS.log("Error: You probably don't have the mail server turned on. Check the logs.");
                alert("An error occured while sending the email!");
            } // TODO: show modal
            // error dialog here
        });
        return false;
    });

    // bind duplicate attachment
    jQuery(currentSectionWrapper).find("a.attach-options-duplicate").click(function(eventObject) {
        if (!($(this).hasClass("disabled"))) {

            var actionOptions = new attachmentActionDialogOptions;
            actionOptions.dialogTitle = "Confirm Copy";
            actionOptions.dialogText = "Are you sure you want to <b>copy</b> this attachment?";
            actionOptions.highlightAttachment = true;
            doAttachmentActionDialog(this, actionOptions);
        }

        return false;
    });

    // bind remove attachment
    jQuery(currentSectionWrapper).find("a.attach-options-delete").click(function(eventObject) {
        if (!($(this).hasClass("disabled"))) {

            var actionOptions = new attachmentActionDialogOptions;
            actionOptions.dialogTitle = "Confirm Delete";
            actionOptions.dialogText = "Are you sure you want to <b>delete</b> this attachment?";
            actionOptions.highlightAttachment = false;
            doAttachmentActionDialog(this, actionOptions);
        }

        return false;
    });

    // bind hide attachment
    jQuery(currentSectionWrapper).find("a.attach-options-hide").click(function(eventObject) {
        if (!($(this).hasClass("disabled"))) {

            var actionOptions = new attachmentActionDialogOptions;
            actionOptions.dialogTitle = "Confirm Hide";
            actionOptions.dialogText = "Are you sure you want to <b>hide</b> this attachment?";
            actionOptions.highlightAttachment = false;
            doAttachmentActionDialog(this, actionOptions);
        }

        return false;
    });

    // bind unhide attachment
    jQuery(currentSectionWrapper).find("a.attach-options-unhide").click(function(eventObject) {
        if (!($(this).hasClass("disabled"))) {
            var actionOptions = new attachmentActionDialogOptions;
            actionOptions.dialogTitle = "Confirm Unhide";
            actionOptions.dialogText = "Are you sure you want to <b>unhide</b> this attachment?";
            actionOptions.highlightAttachment = true;
            doAttachmentActionDialog(this, actionOptions);
        }

        return false;
    });

    // bind release direct edit attachment
    jQuery(currentSectionWrapper).find("a.attach-options-release-directedit").click(function(eventObject) {
        if (!($(this).hasClass("disabled"))) {
            var actionOptions = new attachmentActionDialogOptions;
            actionOptions.dialogTitle = "Confirm Release Edit";
            actionOptions.dialogText = "Are you sure you want to release the edit connection between the Microsoft application and this attachment?<br/><br/>"
                + "Warning - you will no longer be able to save changes until you close the document, refresh your browser, and then re-Edit the attachment. <br/><br/>"
                + "Changes not previously saved will be lost! (You may be able to save these changes to your PC desktop and re-upload them with the same file name)";
            actionOptions.highlightAttachment = true;
            doAttachmentActionDialog(this, actionOptions);
        }

        return false;

    });

    // bind lock attachment
    jQuery(currentSectionWrapper).find("a.attach-options-lock").click(function(eventObject) {
        if (!($(this).hasClass("disabled"))) {
            var actionOptions = new attachmentActionDialogOptions;
            actionOptions.dialogTitle = "Confirm Lock";
            actionOptions.dialogText = "Are you sure you want to <b>lock</b> this attachment?";
            actionOptions.highlightAttachment = false;
            doAttachmentActionDialog(this, actionOptions);
        }

        return false;
    });

    // bind unlock attachment
    jQuery(currentSectionWrapper).find("a.attach-options-unlock").click(function(eventObject) {
        if (!($(this).hasClass("disabled"))) {
            var actionOptions = new attachmentActionDialogOptions;
            actionOptions.dialogTitle = "Confirm Unlock";
            actionOptions.dialogText = "Are you sure you want to <b>unlock</b> this attachment?";
            actionOptions.highlightAttachment = false;
            doAttachmentActionDialog(this, actionOptions);
        }

        return false;
    });

    //Bind enable SharePoint
    jQuery(currentSectionWrapper).find(".attach-options-enable-sp").click(function(eventObject) {
        if (!($(this).hasClass("disabled"))) {
            var actionOptions = new attachmentActionDialogOptions;
            actionOptions.dialogTitle = "Confirm Enable Co-Editing";
            actionOptions.dialogText = "Are you sure you want to <b>enable co-editing</b> for this attachment?";
            actionOptions.highlightAttachment = true;
            doAttachmentActionDialog(this, actionOptions);
        }

        return false;
    }); 

    //Bind disable SharePoint
    jQuery(currentSectionWrapper).find(".attach-options-disable-sp").click(function(eventObject) {
        if (!($(this).hasClass("disabled"))) {
            var actionOptions = new attachmentActionDialogOptions;
            actionOptions.dialogTitle = "Confirm Disable Co-Editing";
            actionOptions.dialogText = "Are you sure you want to <b>disable co-editing</b> for this attachment?";
            actionOptions.highlightAttachment = true;
            doAttachmentActionDialog(this, actionOptions);
        }

        return false;
    }); 

    //Bind release SP checkout
    jQuery(currentSectionWrapper).find(".attach-options-release-sp-checkout").click(function(eventObject) {
        if (!($(this).hasClass("disabled"))) {
            var actionOptions = new attachmentActionDialogOptions;
            actionOptions.dialogTitle = "Confirm Release Checkout";
            actionOptions.dialogText = "Are you sure you want to <b>release the checkout</b> of this attachment?</br>Any changes made since the file was checked out will not be saved.";
            actionOptions.highlightAttachment = true;
            doAttachmentActionDialog(this, actionOptions);
        }

        return false;
    }); 

    //Bind do SP checkout
    jQuery(currentSectionWrapper).find(".attach-options-sp-checkout").click(function(eventObject) {
        if (!($(this).hasClass("disabled"))) {
            var actionOptions = new attachmentActionDialogOptions;
            actionOptions.dialogTitle = "Confirm Checkout";
            actionOptions.dialogText = "Are you sure you want to <b>checkout</b> this attachment for editing?</br>All users currently co-editing this attachment will be removed. Any unsaved edits will be lost.";
            actionOptions.highlightAttachment = true;
            doAttachmentActionDialog(this, actionOptions);
        }

        return false;
    }); 

    // History Compare Selected Version
    jQuery(currentSectionWrapper).find("a.attach-version-compare-button").click(function() {
        var selectIntermediate = jQuery(this).closest(".options-bottom").find(".attach-options-check-intermediate-checkbox").is(":checked");
        var checkedVersions = jQuery(this).closest(".options-bottom").find("input.attach-history-item-checkbox:checked");
        var attachmentPageId = jQuery(this).closest("li.individual-attachment").find("input[name='attachmentPageId']").val();
        if (checkedVersions.length <= 1) {
            alert("Please select more than one");
            return false;
        }
        var attachmentFileName = jQuery(this).closest(".individual-attachment").find(".jquery-filename-link").text();
        var emailResult = jQuery(this).closest(".individual-attachment").find("input[name=email-result]").is(":checked");
        var checkedVersionsCSV = "";
        var versionsList = "";
        var min;
        var max;
        checkedVersions.each(function(index) {
            if (index == 0) {
                max = jQuery(this).val();
            }
            if (index == checkedVersions.length - 1) {
                min = jQuery(this).val();

            }
        });

        if (selectIntermediate) {
            var allAttachmentVersions = jQuery(this).closest(".options-bottom").find("input.attach-history-item-checkbox");
            checkedVersions = jQuery(this).closest(".options-bottom").find("input.attach-history-item-checkbox").slice(allAttachmentVersions.length - max, allAttachmentVersions.length - (min - 1));
        }

        checkedVersions.each(function(index) {
            versionsList = versionsList + jQuery(this).val() + ",";
        })
        versionsList = versionsList.substring(0, versionsList.length - 1);

        var dialog = jQuery("<div></div>");
        var dialogConfig = new JQUERYUI_DIALOG_INFO_HASH;
        var div = jQuery("<div class='attachment-version-compare-message-wrapper'><p class='attachment-version-compare-message-top'>Comparing the following versions: " + smallSpinnerImg + "</p></div>");
        var currentAttachmentId = jQuery(this).closest(".individual-attachment").attr("id");
        var attachmentIndex = -1;

        checkedVersions.each(function(index, object) {
            var text = "<p class='attachment-version-detail'>Version " + jQuery(checkedVersions[index]).val();
            if (jQuery(object).val() == jQuery(object).closest(".individual-attachment").find(".attach-history-item").length) {
                text = text + " (Current)";
            }
            text = text + ": " + jQuery(object).closest(".attach-history-item").find(".black").eq(1).text() + " at " + jQuery(object).closest(".attach-history-item").find(".black").eq(0).text() + " by " + jQuery(object).closest(".attach-history-item").find(".blue").text() + "</p>";
            jQuery(div).append(text);
        });

        dialogConfig.title = "Comparing Selected Versions";
        dialogConfig.width = 500;
        dialogConfig.buttons = {
            "Close": function() {
                jQuery(this).dialog("close");
            }
        };
        dialog.append(div);

        if (emailResult) {
            // add message if email result was checked
            dialog.append("<p class='attachment-version-email-message'>You may Close this window at any time - the results will be emailed to you when the comparison is completed.</p>");
        }

        // if (!selectIntermediate) {
        // add message if intermediate was not selected

        /*
         * var versionCompareWarning = "<p class=\"attachment-version-caution\">Caution: This feature uses the Microsoft Word Combine option to provide an approximation of changes between
         * versions. It may contain errors - sometimes significant ones."; if (!selectIntermediate && (checkedVersions.length > 2 || jQuery(checkedVersions[0]).val() -
         * jQuery(checkedVersions[1]).val() != 1)){ //dialog.append("<p class=\"attachment-version-caution\">Caution: This feature should be used only to review changes. It is not perfect,
         * so output may contain some errors in comparison.</p>"); versionCompareWarning = versionCompareWarning + "<br><br>Since the 'include intermediate versions' checkbox was not
         * selected, changes cannot be attributed."; } versionCompareWarning = versionCompareWarning + "</P>"
         */

        var versionCompareWarning = "";

        if (!(checkedVersions.length == 2 && jQuery(checkedVersions[0]).val() - jQuery(checkedVersions[1]).val() == 1)) {
            versionCompareWarning = versionCompareWarning + "<p class=\"attachment-version-caution\">";

            if (checkedVersions.length == 2 && !selectIntermediate) {
                versionCompareWarning = versionCompareWarning + "Caution: Since the 'include intermediate versions' checkbox was not selected, changes cannot be attributed.";
            } else {
                versionCompareWarning = versionCompareWarning + "Caution: This feature uses the Microsoft Word Combine option to provide an approximation of changes between versions. It may contain errors - sometimes significant ones.";

                if (checkedVersions.length > 2 && !selectIntermediate && (jQuery(checkedVersions[0]).val() - jQuery(checkedVersions[checkedVersions.length - 1]).val() + 1 != checkedVersions.length)) {
                    versionCompareWarning = versionCompareWarning + "<br><br>Since the 'include intermediate versions' checkbox was not selected, changes cannot be attributed.";
                }
            }

            versionCompareWarning = versionCompareWarning + "</p>";
        }

        dialog.append(versionCompareWarning);
        dialog.dialog(dialogConfig);
        AJS.log("versionsList: " + versionsList);

        jQuery.ajax({
            type: 'GET',
            dataType: 'json',
            url: contextPath + "/json/max/changetracking.action",
            data: {
                domain: community.plugins.attachments.mds.getProcessingDomain(),
                pageId: attachmentPageId,
                attachmentFileName: attachmentFileName,
                versions: versionsList,
                emailResult: emailResult
            },
            complete: function(jqXHR, textStatus) {
                // dialog.dialog("close");
                if (jqXHR.status == 200) { // Success
                    community.plugins.attachments.mds.loadSuccess(jqXHR.responseText, jqXHR, dialog);
                } else if (jqXHR.status == 500) { // Server Error
                    community.plugins.attachments.mds.loadError(jqXHR, textStatus);
                } else if (jqXHR.readyState == 4 && (jqXHR.status == 0 || jqXHR.status == 12017)) { // Session Timeout
                    community.plugins.attachments.mds.loadError(jqXHR, textStatus);
                } else { // Unknown Error
                    community.plugins.attachments.mds.loadError(jqXHR, textStatus);
                }
                community.plugins.attachments.mds.currentlyRunning = false;

            }
        });

        return false;
    });

    /**
     * @return String containing the domain to process the request on.
     */
    community.plugins.attachments.mds.getProcessingDomain = function() {
        return $('meta[name="debug-mode-domain"]').attr('content');
    };

    community.plugins.attachments.mds.loadSuccess = function(data, jqXHR, dialog) {
        var rpcJsonResponse = JSON.parse(data);
        // check for error...
        if (rpcJsonResponse.errorMessage) {
            community.plugins.attachments.mds.loadError(jqXHR, rpcJsonResponse.errorMessage);
            return false;
        }
        if (rpcJsonResponse.finalDocumentPath) {
            window.location = rpcJsonResponse.finalDocumentPath;
        }

        dialog.find(".attach-waiting-spinner").remove(); // remove spinner, show complete message
        dialog.find(".attachment-version-compare-message-top").append("<strong>Complete!</strong>");

    }

    community.plugins.attachments.mds.loadError = function(jqXHR, textStatus) {
        // Dump error to js console:
        AJS.log("MDS ERROR: [" + JSON.parse(jqXHR.response).errorMessage + "]");

        // hide spinner
        jQuery("img.assemble-document-waiting-image").remove();

        var dialog = jQuery("<div></div>");
        var dialogConfig = new JQUERYUI_DIALOG_ERROR_HASH;

        var p = jQuery("<p><br>" + "The Version Compare you submitted has timed out. This is usually caused<br>" + "by comparing a large number of intermediate versions, very large files, or a<br>" + "combination of these two factors.<br><br>"
            + "Please select the 'Email Results' checkbox and rerun the process.<br><br>" + "When the job completes, you will be emailed the results within a few minutes (depending on your email). " + "If the 'Email Results' option does not work, please contact MAX Support.</p>");
        // p.attr("style","background:url('images/icon-error-alert.jpg') left 15px no-repeat;");
        dialogConfig.title = jQuery("<div class='doc-assemble-error' style='color: #3A81C3 !important;'></div>").text("Version Compare Timeout");
        dialogConfig.buttons.OK = function() {
            jQuery(this).dialog("destroy");
        };

        dialogConfig.height = 300
        dialogConfig.width = 450

        // p.text("An unexpected error has occurred.");
        dialog.append(p);
        dialog.dialog(dialogConfig);
    };

    // Add "Select Changes by Author" button to attachments
    jQuery(currentSectionWrapper).find(".attach-options-changes-by-author").click(function() {
        jQuery(this).closest(".options-bottom").find(".attach-options-check-intermediate-checkbox").attr("checked", false);
        jQuery(this).closest(".options-bottom").find(".attach-history-item-checkbox").attr('checked', false);
        jQuery(this).closest(".options-bottom").find(".attach-history-item").removeClass("selected");
        jQuery(this).closest(".options-bottom").find(".attach-history-item-checkbox").removeClass("manually-selected");
        var allVersions = jQuery(this).closest(".options-bottom").find(".attach-history-item-details .blue");


        //Replacing the prev look up code with a simple jquery find of the version author (which I added as a hidden input)
        //This is so we can stop using the attachmentsDataObject gloabl and do expensive loops -AWP

        var nextVersionAuthor = jQuery(this).closest(".individual-attachment").find(".jquery-attachment-modified-by .username").val();
        //Iterate through the version elements of this attachment, check if value of author changes in next version.
        jQuery(this).closest(".individual-attachment").find('.attach-options-history-list').find('.attach-history-item').each(function(index){
            var currentVersionAuthor = $(this).find('.att-version-author').val();
            //Check if next version has different author or is current version
            if(nextVersionAuthor != currentVersionAuthor || index == 0){
                jQuery(this).find(".attach-history-item-checkbox").attr("checked", true);
                jQuery(this).addClass("selected");
                jQuery(this).find(".attach-history-item-checkbox").addClass("manually-selected");
            }
            nextVersionAuthor = currentVersionAuthor;
        });

    });

    // Add "Select Changes by Date" button to attachments
    jQuery(currentSectionWrapper).find("a.attach-options-changes-by-date").click(function() {
        jQuery(this).closest(".options-bottom").find(".attach-options-check-intermediate-checkbox").attr("checked", false);
        jQuery(this).closest(".options-bottom").find(".attach-history-item-checkbox").attr('checked', false);
        jQuery(this).closest(".options-bottom").find(".attach-history-item").removeClass("selected");
        jQuery(this).closest(".options-bottom").find(".attach-history-item-checkbox").removeClass("manually-selected");

        var nextVersionDate = jQuery(this).closest(".individual-attachment").find('input[name=creation-date]').val()
        //Iterate through the version elements of this attachment, check if value of author changes in next version.
        jQuery(this).closest(".individual-attachment").find('.attach-options-history-list').find('.attach-history-item').each(function(index){
            var currentVersionDate = $(this).find('.att-version-creation-date').val();
            //Check if next version has different author or is current version
            if(nextVersionDate != currentVersionDate || index == 0){
                jQuery(this).find(".attach-history-item-checkbox").attr("checked", true);
                jQuery(this).addClass("selected");
                jQuery(this).find(".attach-history-item-checkbox").addClass("manually-selected");
            }
            nextVersionDate = currentVersionDate;
        });
    });

    // Add "Select None" button to attachments

    jQuery(currentSectionWrapper).find("a.attach-options-select-none").click(function() {
        jQuery(this).closest(".options-bottom").find(".attach-history-item-checkbox").attr('checked', false);
        jQuery(this).closest(".options-bottom").find(".attach-history-item").removeClass("selected");
        jQuery(this).closest(".options-bottom").find(".attach-history-item-checkbox").removeClass("manually-selected");
        jQuery(this).closest(".options-bottom").find(".attach-options-check-intermediate-checkbox").attr("checked", false);
    });

    // Checking box highlights files container
    jQuery(currentSectionWrapper).find("input.attach-history-item-checkbox").click(function() {
        jQuery(this).closest(".attach-history-item").toggleClass("selected");
    });

    // Checking box adds class to distinguish version from intermediate versions which are automatically checked
    jQuery(currentSectionWrapper).find("input.attach-history-item-checkbox").click(function() {
        if (jQuery(this).attr("checked")) {
            jQuery(this).addClass("manually-selected");
        } else if (!jQuery(this).attr("checked")) {
            jQuery(this).removeClass("manually-selected");
        }
    });

    // checks and highlights intermediate versions when "Include Intermediate Versions" checkbox is checked
    jQuery(currentSectionWrapper).find("div.attach-options-headers input[name='attach-options-check-intermediate']").click(function() {
        var includeIntermediateVersionsIsChecked = jQuery("input[name='attach-options-check-intermediate']").attr("checked");
        var checkedVersions = jQuery(this).closest(".options-bottom").find("input.attach-history-item-checkbox:checked");
        var min;
        var max;
        checkedVersions.each(function(index) {
            if (index == 0) {
                max = jQuery(this).val();
            }
            if (index == checkedVersions.length - 1) {
                min = jQuery(this).val();
            }
        });
        var allAttachmentVersions = jQuery(this).closest(".options-bottom").find("input.attach-history-item-checkbox");
        checkedVersions = jQuery(this).closest(".options-bottom").find("input.attach-history-item-checkbox").slice(allAttachmentVersions.length - max, allAttachmentVersions.length - (min - 1));
        console.log(checkedVersions);
        checkedVersions.each(function(index) {
            if (jQuery(this).val() != max && jQuery(this).val() != min && !jQuery(this).hasClass("manually-selected")) {
                if (includeIntermediateVersionsIsChecked) {
                    jQuery(this).closest(".attach-history-item").addClass("selected");
                    jQuery(this).attr("checked", true);
                } else {
                    jQuery(this).closest(".attach-history-item").removeClass("selected");
                    jQuery(this).attr("checked", false);
                }
            }
        });
    });

    // Checks and highlights intermediate versions when additional versions are chosen outside of range
    jQuery(currentSectionWrapper).find("input.attach-history-item-checkbox").click(function() {
        var includeIntermediateVersionsIsChecked = jQuery("input[name='attach-options-check-intermediate']").attr("checked");
        var checkedVersions = jQuery(this).closest(".options-bottom").find("input.attach-history-item-checkbox:checked");

        var min;
        var max;
        checkedVersions.each(function(index) {
            if (index == 0) {
                max = jQuery(this).val();
            }
            if (index == checkedVersions.length - 1) {
                min = jQuery(this).val();

            }
        });
        var allAttachmentVersions = jQuery(this).closest(".options-bottom").find("input.attach-history-item-checkbox");
        checkedVersions = jQuery(this).closest(".options-bottom").find("input.attach-history-item-checkbox").slice(allAttachmentVersions.length - max, allAttachmentVersions.length - (min - 1));
        console.log(checkedVersions);
        checkedVersions.each(function(index) {
            if (jQuery(this).val() != max && jQuery(this).val() != min && !jQuery(this).hasClass("manually-selected")) {
                if (includeIntermediateVersionsIsChecked) {
                    jQuery(this).closest(".attach-history-item").addClass("selected");
                    jQuery(this).attr("checked", true);
                } else {
                    jQuery(this).closest(".attach-history-item").removeClass("selected");
                    jQuery(this).attr("checked", false);
                }
            }
        });
    });

    // %%%%%%%%%%%%% END binding attachment option buttons %%%%%%%%%%%%%%%%%%

}
function handleAttachmentVisibilty(){
    var showHiddenAttachments = ($("#attachmentsShowHidden").val() == "true");
    var showAllAttachments = ($("#attachmentsShowAll").val() == "true");

    //Count the "non-hidden" attachments
    //"Hidden" refers to the checkout status of "hidden"
    var numNonHidden = 0;
    var numHidden = 0;

    //Only show 10 "non-hidden" attachments, unless user clicked to "show all attachments"
    $(".attachments-section-ul .individual-attachment").each(function(){
        if($(this).hasClass("hidden-attachment")) {
            numHidden++;
            if(showHiddenAttachments) $(this).show();
            else $(this).hide();
        }
        else {
            numNonHidden++;
            if(showAllAttachments || (numNonHidden <= 10)) $(this).show();
            else $(this).hide(); 
        }
    });


    if(numNonHidden > 10){
        if(showAllAttachments) {
            $(".collapse-all-attachments-link").show();
            $(".view-all-attachments-link").hide();
        }
        else {
            var numMore = numNonHidden - 10;
            $("#view-all-attachments .show-more-count").text(numMore);

            if(numMore > 1) $("#view-all-attachments .show-more-plural").show();
            else $("#view-all-attachments .show-more-plural").hide();

            $(".collapse-all-attachments-link").hide();
            $(".view-all-attachments-link").show();
        }
    }
    else {
        $(".view-collapse-attachments-links").hide();
    }

    if(numNonHidden == 0 && (!showHiddenAttachments || numHidden == 0)){
        $("#jquery-empty-attachments").slideDown('slow', function() {
            $("#jquery-empty-attachments").removeClass("hidden");
        });
        //Hide sort options
        jQuery("#page-controls-attachments-sorting").hide();
    }
    else{
        $("#jquery-empty-attachments").slideUp('slow', function() {
            $("#jquery-empty-attachments").addClass("hidden");
        });
        //Show sort options
        jQuery("#page-controls-attachments-sorting").show();
    }
}

function sortAttachmentsByCookie(cook) {
    if (cook == null || cook == "" || cook == undefined)
        return false;
    AJS.log('sortAttachmentsByCookie (section): ' + cook);
    var cookie = cook;
    var ascDesc = "asc";
    var upDown = "up"
    if (cookie.indexOf("Desc") != -1) {
        ascDesc = "desc";
        upDown = "down";
    }
    var sort = cookie.substring(4, cookie.length - ascDesc.length);
    AJS.log('sort (section): ' + sort);
    var sortLower = sort.toLowerCase();
    if (sortLower == 'title') {
        sortLower = 'name';
    }
    var id = "sort-" + sortLower;

    //Feels inefficient to click twice to get to desired option -AWP
    //Need to click at least once to do a sort.
    jQuery_142("#" + id).click();
    var upDownCurrent = jQuery_142("#" + id).attr('class');

    while (upDownCurrent != upDown) {
        jQuery_142("#" + id).click();
        upDownCurrent = jQuery_142("#" + id).attr('class');
    }
    return true;
}

function setSortTooltips() {
    jQuery_142("#sort-date").removeAttr("title");
    jQuery_142("#sort-name").removeAttr("title");
    jQuery_142("#sort-type").removeAttr("title");
    jQuery_142("#sort-size").removeAttr("title");
    jQuery_142("#sort-user").removeAttr("title");
    jQuery_142("#sort-comment").removeAttr("title");
    jQuery_142("#sort-date").attr("title", "Sort by date descending. (Default)");
    jQuery_142("#sort-name").attr("title", "Sort by name descending.");
    jQuery_142("#sort-type").attr("title", "Sort by type descending.");
    jQuery_142("#sort-size").attr("title", "Sort by size descending.");
    jQuery_142("#sort-user").attr("title", "Sort by user descending.");
    jQuery_142("#sort-comment").attr("title", "Sort by comment descending.");

}

// %%%%%%%%%%%%% START binding sorting buttons %%%%%%%%%%%%%%%%%%%%
function bindSortingActions() {

    jQuery_142("#sort-date").toggle(function() {
        jQuery_142("#page-controls-attachments-sorting a").removeClass("down").removeClass("up"); // reset
        // all
        // sort
        // links
        jQuery_142(this).addClass("down");
        // sort
        jQuery_142(".attachments-section-ul li").sort(sortDateDesc).appendTo(".attachments-section-ul");
        createCookie("sort", "sortDateDesc", 0);
        jQuery_142("#page-controls-attachments-sorting").removeClass("alternate-sort");
        jQuery_142("#sort-date").removeAttr("title");
        jQuery_142("#sort-date").attr("title", "Sort by date ascending.");
        // fix visibility of elements
        handleAttachmentVisibilty();
    }, function() {
        jQuery_142("#page-controls-attachments-sorting a").removeClass("down").removeClass("up"); // reset
        // all
        // sort
        // links
        jQuery_142(this).addClass("up");
        // sort
        jQuery_142(".attachments-section-ul li").sort(sortDateAsc).appendTo(".attachments-section-ul");
        createCookie("sort", "sortDateAsc", 0);
        jQuery_142("#page-controls-attachments-sorting").addClass("alternate-sort");
        jQuery_142("#sort-date").removeAttr("title");
        jQuery_142("#sort-date").attr("title", "Sort by date descending. (Default)");
        // fix visibility of elements
        handleAttachmentVisibilty();
    });

    jQuery_142("#sort-name").toggle(function() {
        jQuery_142("#page-controls-attachments-sorting a").removeClass("down").removeClass("up"); // reset
        // all
        // sort
        // links
        jQuery_142(this).addClass("down");
        // sort
        jQuery_142(".attachments-section-ul li").sort(sortTitleDesc).appendTo(".attachments-section-ul");
        createCookie("sort", "sortTitleDesc", 0);
        jQuery_142("#page-controls-attachments-sorting").addClass("alternate-sort");
        jQuery_142("#sort-name").removeAttr("title");
        jQuery_142("#sort-name").attr("title", "Sort by name ascending.");
        // fix visibility of elements
        handleAttachmentVisibilty();
    }, function() {
        jQuery_142("#page-controls-attachments-sorting a").removeClass("down").removeClass("up"); // reset
        // all
        // sort
        // links
        jQuery_142(this).addClass("up");
        // sort
        jQuery_142(".attachments-section-ul li").sort(sortTitleAsc).appendTo(".attachments-section-ul");
        createCookie("sort", "sortTitleAsc", 0);
        jQuery_142("#page-controls-attachments-sorting").addClass("alternate-sort");
        jQuery_142("#sort-name").removeAttr("title");
        jQuery_142("#sort-name").attr("title", "Sort by name descending.");
        // fix visibility of elements
        handleAttachmentVisibilty();
    });

    jQuery_142("#sort-type").toggle(function() {
        jQuery_142("#page-controls-attachments-sorting a").removeClass("down").removeClass("up"); // reset
        // all
        // sort
        // links
        jQuery_142(this).addClass("down");
        // sort
        jQuery_142(".attachments-section-ul li").sort(sortTypeDesc).appendTo(".attachments-section-ul");
        createCookie("sort", "sortTypeDesc", 0);
        jQuery_142("#page-controls-attachments-sorting").addClass("alternate-sort");
        jQuery_142("#sort-type").removeAttr("title");
        jQuery_142("#sort-type").attr("title", "Sort by type ascending.");
        // fix visibility of elements
        handleAttachmentVisibilty();
    }, function() {
        jQuery_142("#page-controls-attachments-sorting a").removeClass("down").removeClass("up"); // reset
        // all
        // sort
        // links
        jQuery_142(this).addClass("up");
        // sort
        jQuery_142(".attachments-section-ul li").sort(sortTypeAsc).appendTo(".attachments-section-ul");
        createCookie("sort", "sortTypeAsc", 0);
        jQuery_142("#page-controls-attachments-sorting").addClass("alternate-sort");
        jQuery_142("#sort-type").removeAttr("title");
        jQuery_142("#sort-type").attr("title", "Sort by type descending.");
        // fix visibility of elements
        handleAttachmentVisibilty();
    });

    jQuery_142("#sort-size").toggle(function() {
        jQuery_142("#page-controls-attachments-sorting a").removeClass("down").removeClass("up"); // reset
        // all
        // sort
        // links
        jQuery_142(this).addClass("down");
        // Pretty sure we can just remove this line since we are removing the global var
        // attachmentsDataObject.attachments = jQuery_142(attachmentsDataObject.attachments).sort(sortSizeAsc);
        // sort
        jQuery_142(".attachments-section-ul li").sort(sortSizeDesc).appendTo(".attachments-section-ul");
        createCookie("sort", "sortSizeDesc", 0);
        jQuery_142("#page-controls-attachments-sorting").addClass("alternate-sort");
        jQuery_142("#sort-size").removeAttr("title");
        jQuery_142("#sort-size").attr("title", "Sort by size ascending.");
        // fix visibility of elements
        handleAttachmentVisibilty();
    }, function() {
        jQuery_142("#page-controls-attachments-sorting a").removeClass("down").removeClass("up"); // reset
        // all
        // sort
        // links
        jQuery_142(this).addClass("up");
        // sort
        jQuery_142(".attachments-section-ul li").sort(sortSizeAsc).appendTo(".attachments-section-ul");
        createCookie("sort", "sortSizeAsc", 0);
        jQuery_142("#page-controls-attachments-sorting").addClass("alternate-sort");
        jQuery_142("#sort-size").removeAttr("title");
        jQuery_142("#sort-size").attr("title", "Sort by size descending.");
        // fix visibility of elements
        handleAttachmentVisibilty();
    });

    jQuery_142("#sort-user").toggle(function() {
        jQuery_142("#page-controls-attachments-sorting a").removeClass("down").removeClass("up"); // reset
        // all
        // sort
        // links
        jQuery_142(this).addClass("down");
        // sort
        jQuery_142(".attachments-section-ul li").sort(sortUserDesc).appendTo(".attachments-section-ul");
        createCookie("sort", "sortUserDesc", 0);
        jQuery_142("#page-controls-attachments-sorting").addClass("alternate-sort");
        jQuery_142("#sort-user").removeAttr("title");
        jQuery_142("#sort-user").attr("title", "Sort by user ascending.");
        // fix visibility of elements
        handleAttachmentVisibilty();
    }, function() {
        jQuery_142("#page-controls-attachments-sorting a").removeClass("down").removeClass("up"); // reset
        // all
        // sort
        // links
        jQuery_142(this).addClass("up");
        // sort
        jQuery_142(".attachments-section-ul li").sort(sortUserAsc).appendTo(".attachments-section-ul");
        createCookie("sort", "sortUserAsc", 0);
        jQuery_142("#page-controls-attachments-sorting").addClass("alternate-sort");
        jQuery_142("#sort-user").removeAttr("title");
        jQuery_142("#sort-user").attr("title", "Sort by user descending.");
        // fix visibility of elements
        handleAttachmentVisibilty();
    });

    jQuery_142("#sort-comment").toggle(function() {
        jQuery_142("#page-controls-attachments-sorting a").removeClass("down").removeClass("up"); // reset
        // all
        // sort
        // links
        jQuery_142(this).addClass("down");
        // sort
        jQuery_142(".attachments-section-ul li").sort(sortCommentDesc).appendTo(".attachments-section-ul");
        createCookie("sort", "sortCommentDesc", 0);
        jQuery_142("#page-controls-attachments-sorting").addClass("alternate-sort");
        jQuery_142("#sort-comment").removeAttr("title");
        jQuery_142("#sort-comment").attr("title", "Sort by comment ascending.");
        // fix visibility of elements
        handleAttachmentVisibilty();
    }, function() {
        jQuery_142("#page-controls-attachments-sorting a").removeClass("down").removeClass("up"); // reset
        // all
        // sort
        // links
        jQuery_142(this).addClass("up");
        // sort
        jQuery_142(".attachments-section-ul li").sort(sortCommentAsc).appendTo(".attachments-section-ul");
        createCookie("sort", "sortCommentAsc", 0);
        jQuery_142("#page-controls-attachments-sorting").addClass("alternate-sort");
        jQuery_142("#sort-comment").removeAttr("title");
        jQuery_142("#sort-comment").attr("title", "Sort by comment descending.");
        // fix visibility of elements
        handleAttachmentVisibilty();
    });

    // %%%%%%%%%%%%% Bindings for sort area %%%%%%%%%%%%%%%%%%%%
    // bind show hidden attachments button
    $("#show-hidden-attachments-link").click(function() {
        var showHiddenAttachments = ($("#attachmentsShowHidden").val() == "true");

        var isAttachmentsSectionCollapse = userPreferences.getAttachmentsSectionCollapse();
        if (isAttachmentsSectionCollapse == true) {
            $("#jquery-attach-expand").click();
        }

        if (showHiddenAttachments == false) {
            $("#attachmentsShowHidden").val("true");
            $("#jquery-attachments-showhide-text").html("Hide");

        } else {
            $("#attachmentsShowHidden").val("false");
            // dont hide just change the text..
            $("#jquery-attachments-showhide-text").html("Show");
        }

        handleAttachmentVisibilty();
        return false;
    });

    // bind add another attachment actions
    jQuery_142("#attach-add-attachments .padding-wrapper div .add-comment").click(function() {
        jQuery_142(this).next(".file-comment").fadeIn('slow');
        jQuery_142(this).hide();
        jQuery_142(this).next(".file-comment").focus();
        return false;
    });

    // bind add attachments button action (first click)
    jQuery_142("#btn-add-attachment, #btn-add-attachment2").click(function() {
        // hide the there are no attachment div

        // jQuery("#attachment-add-new-wrapper").fadeIn('slow');
        if (jQuery("#page-controls-attachments-padding").find("#attachment-add-new-wrapper").length === 0) {
            jQuery("#jquery-empty-attachments").before(jQuery("#attachment-add-new-wrapper"));
            // aset upload pageid back to the page we are on
            community.plugins.attachments.uploadPageId = jQuery_142("#attachmentsPageId").val();
            jQuery("#attachment-add-new-wrapper").find("input[name='contentId']").val(community.plugins.attachments.uploadPageId);

            //COP-3633: Correcting page id here to catch case when macro is included from a different page.
            //Kind of a bandaid fix, but best way to do since only one uploadify settings object per page. -AWP
            //Also added in new-attachments-macro.js

            var addAttachmentWrapper = $("#page-controls-attachments-padding").find('#attachment-add-new-wrapper');
            var uploadPageId = addAttachmentWrapper.find('#attach-add-attachments input[name=contentId]').val();
            var uploadifyInput = addAttachmentWrapper.find('#uploadifive-uploadifive input#uploadifive');

            var uploadifyInputData = uploadifyInput.data("uploadifive");

            //Update page id value
            uploadifyInputData.settings.formData.contentId = uploadPageId;

            //Replace data on element with modified data
            uploadifyInput.data("uploadifive", uploadifyInputData);
        }

        jQuery("#attachment-add-new-wrapper").fadeIn('slow');
        // jQuery.scrollTo("#attachment-add-new-wrapper");

        return false;
    });

    // bind add attachments button click action
    jQuery_142("#attach-add-attachments .padding-wrapper div .add").click(function() {
        jQuery_142(this).parent().next("#attach-add-attachments .padding-wrapper div").fadeIn('slow');
        jQuery_142(this).removeClass('add');
        jQuery_142(this).addClass('add-disabled');
        jQuery_142(this).siblings("span").find("a.add-another-attach-link").addClass('hidden');
        return false;
    });

    // bind tabs for new attachment vs. upload attahcment vs. bulk upload
    jQuery_142("#attach-create-new").click(function() {
        jQuery(this).parent().addClass("active");
        jQuery_142("#attach-upload-new").parent().removeClass("active");
        jQuery_142("#attach-upload-bulk").parent().removeClass("active");
        jQuery_142("#attachment-add-new-docs").show();
        jQuery_142("#attach-add-attachments").hide();
        jQuery_142("#attachment-bulk-upload-wrapper").hide();
        var current = new Date();
        var endTime = (current - clickEventsStartTime);
        clickEvents.push({
            "event": {
                "eventId": "create-new-attachment-tab-click",
                "timeSinceLoad": endTime,
                "occuredAt": current.getTime()
            }
        });
        return false;
    });

    jQuery_142("#attach-upload-new").click(function() {
        jQuery(this).parent().addClass("active");
        jQuery_142("#attach-create-new").parent().removeClass("active");
        jQuery_142("#attach-upload-bulk").parent().removeClass("active");
        jQuery_142("#attachment-add-new-docs").hide();
        jQuery_142("#attachment-bulk-upload-wrapper").hide();
        jQuery_142("#attach-add-attachments").show();
        var current = new Date();
        var endTime = (current - clickEventsStartTime);
        clickEvents.push({
            "event": {
                "eventId": "upload-new-attachment-tab-click",
                "timeSinceLoad": endTime,
                "occuredAt": current.getTime()
            }
        });
        return false;
    });

    jQuery_142("#attach-upload-bulk").click(function() {
        jQuery(this).parent().addClass("active");
        jQuery_142("#attach-create-new").parent().removeClass("active");
        jQuery_142("#attach-upload-new").parent().removeClass("active");
        jQuery_142("#attachment-add-new-docs").hide();
        jQuery_142("#attach-add-attachments").hide();
        jQuery_142("#attachment-bulk-upload-wrapper").show();
        var current = new Date();
        var endTime = (current - clickEventsStartTime);
        clickEvents.push({
            "event": {
                "eventId": "bulk-upload-new-attachment-tab-click",
                "timeSinceLoad": endTime,
                "occuredAt": current.getTime()
            }
        });
        return false;
    });

    // bind new link that does the same thing as the above icon..
    jQuery_142("#attach-add-attachments .add-another-attach-link").click(function() {
        jQuery_142(this).parents("#attach-add-attachments").find("a.add:visible").click();
        if (jQuery_142(this).parents("#attach-add-attachments").find("a.add:visible").size() == 0) {
            jQuery_142(this).addClass('hidden');
            jQuery_142("#attach-show-attachments").addClass('hidden');
        }
        return false;
    });

    jQuery_142("#attach-show-attachments").click(function() {
        jQuery_142("#attach-add-attachments .padding-wrapper div").fadeIn('slow');
        jQuery_142(this).hide();
        jQuery_142("#attach-add-attachments .padding-wrapper div .add").removeClass('add').addClass('add-disabled');
        jQuery("#attach-add-attachments .padding-wrapper div span a.add-another-attach-link").addClass("hidden");
        jQuery_142("#attach-add-attachments .add-another-attach-link").addClass('hidden');
        return false;
    });

    // %%%%%%%%%%%%% BIND Show All link
    $(".view-collapse-attachments-links").click(function() {
        var showAllAttachments = ($("#attachmentsShowAll").val() == "true");


        var isAttachmentsSectionCollapse = userPreferences.getAttachmentsSectionCollapse();
        if (isAttachmentsSectionCollapse == true) {
            jQuery_142("#jquery-attach-expand").click();
        }

        if (showAllAttachments == false) {
            $("#attachmentsShowAll").val("true");
            handleAttachmentVisibilty();

        } else {
            $("#attachmentsShowAll").val("false");
            handleAttachmentVisibilty();
        }
        return false;
    });

}

// %%%%%%%%%%%%% END binding sorting buttons %%%%%%%%%%%%%%%%%%%%

// %%%%%%%%%%%%% START binding attachments options overlay actions
// %%%%%%%%%%%%%%%%%%%%
function bindAttachmentCommentOverlayActions() {

    jQuery(".file-comment").focus(function() {
        jQuery(this).siblings("div.attachment-comment-overlay").addClass("hidden");
    });

    jQuery("div.attachment-comment-overlay").click(function() {
        jQuery(this).addClass("hidden");
        jQuery(this).siblings(".file-comment").focus();
    });

    jQuery(".file-comment").blur(function() {
        var text = jQuery(this).val();
        if (text == "") {
            jQuery(this).siblings("div.attachment-comment-overlay").removeClass("hidden");
        }
    });

}
// %%%%%%%%%%%%% End binding attachments options overlay actions
// %%%%%%%%%%%%%%%%%%%%
function getUploadId() {
    if (queueStarted) {
        lastUploadId = 1 + Math.floor(Math.random() * 9999999);
        return lastUploadId;
    } else {
        return lastUploadId;
    }

}
var queueStarted = false;
var lastUploadId;

// %%%%%%%%%%%%% START Attachment Upload actions %%%%%%%%%%%%%%%%
function bindUploadActions() {
    // COP-2588
    if (jQuery(".attachmentMacroUploadForm input[name='stayOnRenderedPage']").val()) {
        jQuery(".attachmentMacroUploadForm").ajaxForm({
            dataType: "json",
            success: handleAttachmentMacroUpload
        });
    }
    jQuery(".btn-macro-add-attachment").click(function() {
        jQuery(this).closest(".attachment-macro-controls").find(".commentTextFieldNew").val("optional comment (up to 255 characters)");
        jQuery(this).closest(".attachment-macro-controls").find(".attachment-macro-upload-interface").show();
    });
    jQuery(".attachment-macro-close-button").click(function() {
        jQuery(this).closest(".attachment-macro-controls").find(".attachment-macro-upload-interface").hide();
        return false;
    });

    // bind form using 'ajaxForm' jquery plugin - use older version of jQuery so
    // we dont have to load the lib twice
    jQuery("#attach-add-attachments").ajaxForm({
        dataType: "json",
        beforeSubmit: handleAttachmentUploadPreSubmit,
        success: handleAttachmentUploadPostSubmit,
        error: handleAttachmentUploadPostSubmitErrors,
        clearForm: true
        // ,
        // resetForm: false
    });

    // bind cancel for upload
    jQuery(".jquery-upload-attachment-done-button").click(function() {
        jQuery("#attachment-add-new-wrapper").hide();
        return false;
    });

    // #######################################
    // bind uploadify AND uploadifive
    // #######################################
    var attachmentIdsBulkUpload = new Array();

    var uploadifyConfig = {
        'uploader': contextPath + '/json/max/attachfile.action?responseFormat=json&bulk=true',
        'swf': contextPath + '/s/en/2172/32/4.1.1.19/_/download/batch/com.benryan.confluence.attachments:attachments-section-resources/com.benryan.confluence.attachments:uploadify.swf',
        'formData': {
            'contentId': community.plugins.attachments.uploadPageId, // jQuery("#attach-add-attachments").find("input[name='contentId']").val(),
            'name': "file_0"
        },
        'onUpload': function() {
            queueStarted = true;
            // supressing all watcher emails for now
            // jQuery.get(contextPath+"/json/max/ajaxbulkuploadnotifier.action?pageId="+pageId+"&status=begin&uploadId="+getUploadId());
        },
        'onUploadSuccess': function(file, data, response) {
            var responseJson = JSON.parse(data);
            if (responseJson.actionErrors.length > 0) {
                // add error message
                jQuery("#" + file.id).addClass("complete").addClass("error");
                jQuery("#" + file.id).find("span.data").html("<span class='uploadify-queue-item-error-message'>Error! " + responseJson.actionErrors + "</span>")
            } else {
                // success
                jQuery("#" + file.id).addClass("complete").addClass("success");
                jQuery("#" + file.id).find("span.data").html("Completed")
                attachmentIdsBulkUpload.push(responseJson.attachmentsAdded[0].id);
                jQuery("#" + file.id).delay(5000).fadeOut('fast');// fade out from queue
                delete this.queueData.files[file.id]; // remove from queue
            }
            jQuery("#" + file.id).find("div.uploadify-progress").hide(); // hide the complete progress bar
        },
        'onUploadComplete': function(file) {
            jQuery("#uploadify-queue").show();
        },
        'onQueueComplete': function(uploads) {
            loadAttachmentsSection(attachmentIdsBulkUpload);
            attachmentIdsBulkUpload = new Array(); // reset
            var queueStarted = false;
            // supressing all watcher emails for now
            // jQuery.get(contextPath+"/json/max/ajaxbulkuploadnotifier.action?pageId="+pageId+"&status=end&uploadId="+getUploadId());
        },
        height: 30,
        width: 330,
        fileSizeLimit: '100MB',
        'buttonText': 'Select and Upload Multiple Files',
        removeCompleted: false
    }

    var uploadifiveConfig = {
        'uploadScript': contextPath + '/json/max/attachfile.action?responseFormat=json&bulk=true',
        fileSizeLimit: '100MB',
        queueID: 'attachment-bulk-upload-queue-custom',
        'buttonText': 'Select and Upload Multiple Files',
        'formData': {
            'contentId': community.plugins.attachments.uploadPageId, // jQuery("#attach-add-attachments").find("input[name='contentId']").val(),
            'name': "file_0"
        },
        'onUpload': function() {
            queueStarted = true;
            // supressing all watcher emails for now
            // jQuery.get(contextPath+"/json/max/ajaxbulkuploadnotifier.action?pageId="+pageId+"&status=begin&uploadId="+getUploadId());
        },
        // TODO: FIX THIS.. not working
        'onUploadStart': function(file) {
            jQuery('#file_upload').uploadify('settings', 'formData', {
                'contentId': community.plugins.attachments.uploadPageId, // jQuery("#attach-add-attachments").find("input[name='contentId']").val(),
                'name': "file_0"
            });
        },
        'onUploadComplete': function(file, data) {
            var responseJson = JSON.parse(data);
            if (responseJson.actionErrors.length > 0) {
                // add error message
                jQuery(file.queueItem).addClass("error");
                jQuery(file.queueItem).find("span.fileinfo").html("<span class='uploadifive-queue-item-error-message'>Error! " + responseJson.actionErrors + "</span>")
            } else {
                // success
                jQuery(file.queueItem).addClass("success");
                jQuery(file.queueItem).find("span.fileinfo").html("Completed")
                attachmentIdsBulkUpload.push(responseJson.attachmentsAdded[0].id);
                jQuery(file.queueItem).delay(5000).fadeOut('fast');// fade out from queue
            }
            jQuery("#attachment-bulk-upload-queue-custom").addClass("bulk-queue-visible");
        },
        'onQueueComplete': function(uploads) {
            // TODO:, needs work: reload any "new" attachents macros first
            // jQuery("div.new-attachments-macro-wrapper").each( function ( i, wrapperObj ) {
            // community.plugins.attachments.newAttachmentMacro.render(wrapperObj, attachmentIdsBulkUpload);
            // });

            //If upload was done in a macro, don't highlight added attachment, keep user in current place
            if(this.parents(".new-attachments-macro-target").size() > 0){
                loadAttachmentsSection();
                //Close the add attachments uploader (necessary for COp-3633 fix), user must click "Add Attachment(s)" for the pageid to properly reset
                $("#attachment-add-new-wrapper").hide();
                //Reset to first tab
                $("#attach-upload-new").click();
                //Hide any queue items
                $(".uploadifive-queue-item").hide();
            }
            else {
                loadAttachmentsSection(attachmentIdsBulkUpload);
            }
            attachmentIdsBulkUpload = new Array(); // reset
            queueStarted = false;
            // supressing all watcher emails for now
            // jQuery.get(contextPath+"/json/max/ajaxbulkuploadnotifier.action?pageId="+pageId+"&status=end&uploadId="+getUploadId());
        },
        simUploadLimit: 1,
        'onFallback': function() {
            jQuery("#uploadifive").hide();
            jQuery("#uploadify").show();
            jQuery("#attachment-bulk-upload-queue-custom").hide();
            jQuery("#uploadify").uploadify(uploadifyConfig);
            jQuery("#uploadify-queue").hide();
            jQuery("#attachment-bulk-upload-wrapper").addClass("uploadify-fallback");
        }
    }

    jQuery("#uploadifive").uploadifive(uploadifiveConfig);

    // jQuery("#uploadify").uploadify(uploadifyConfig); // for testing - non thml5 only for all

    jQuery("#attachment-bulk-upload-queue-custom").bind('dragenter', function(event) {
        jQuery(this).addClass("bulk-highlight");
    });

    jQuery("#attachment-bulk-upload-queue-custom").bind('drop', function(event) {
        jQuery(this).removeClass("bulk-highlight");
        jQuery(this).addClass("bulk-queue-visible");
    });

}

// pre-submit callback
function handleAttachmentUploadPreSubmit(formData, jqForm, options) {
    var isUploadingInput = $("#page-controls-attachments #isUploadInProgress");
    var isUploading = (isUploadingInput.val() == "true");

    // check that upload is not in progres
    if (isUploading) {
        return false;
    }

    // make sure there is at least one file specified
    var atLeastOneAttachment = false;
    jQuery("#attach-add-attachments input.file-upload").each(function(index) {
        if (jQuery(this).val().length > 0) {
            atLeastOneAttachment = true;
        }
    });

    if (atLeastOneAttachment == false) {
        jQuery("#attachment-alert-upload").append("<p class='red'>You must select at least one file below to upload.</p>");
        jQuery("#attachment-alert-upload").show();
        jQuery.scrollTo("#attachment-alert-upload", {
            offset: -50
        });
        return false;
    }

    isUploadingInput.val("true");

    // reset the error div
    jQuery("#attachment-alert-upload").html("");
    jQuery("#attachment-alert-upload").hide();

    // show spinner
    jQuery("#jquery-attach-button").parent().prepend("<span id='upload-spinner-image-wrapper'>" + smallSpinnerImg + "</span>");

    return true;
}

function handleAttachmentMacroUpload(data) {
    console.log("handleAttachmentMacroUpload - entering");
    location.reload();
}

function handleAttachmentUploadPostSubmit(data) {
    if(typeof(data) == "string") { //for calls from crypto applet
        data = JSON.parse(jQuery(jQuery(data)[1]).text())
    }

    var isUploadingInput = $("#page-controls-attachments #isUploadInProgress");
    isUploadingInput.val("false");


    // create json object since confluence is setting the WRONG response type
    // (not json)
    var jsonData = data;

    // check for upload errors and validation errors
    var errors = jsonData.actionErrors;
    if (errors != undefined && errors.length > 0) {
        // loop through and display errors
        jQuery(errors).each(function(index, value) {
            jQuery("#attachment-alert-upload").append("<p class='red'>" + value + "</p>");
        });
        jQuery.scrollTo("#attachment-alert-upload", {
            offset: -50
        });
        jQuery("#attachment-alert-upload").show();

        // highlight the uploaded attachments
        var attachmentIds = new Array();

        jQuery(jsonData.attachmentsAdded).each(function(index, value) {
            jQuery_142("#" + value.id).addClass("new-attachment");
            // also make sure that its visable..
            jQuery_142("#" + value.id).show();
        });

        // remove spinner
        jQuery("#jquery-attach-button").parent().find(".attach-waiting-spinner").remove();
        return false;
    }

    // highlight the uploaded attachments
    var attachmentIds = new Array();

    jQuery(jsonData.attachmentsAdded).each(function(index, value) {
        // jQuery_142("#" + value.id).addClass("new-attachment");
        attachmentIds.push(value.id);
    });

    // reload any "new" attachents macros first
    // TODO: hold off on this for now, need to rework
    // jQuery("div.new-attachments-macro-wrapper").each( function ( i, wrapperObj ) {
    // community.plugins.attachments.newAttachmentMacro.render(wrapperObj, attachmentIds);
    // });

    // Added attachments macro refresh in loadAttachmentsSection(). Applies to all upload methods there -AWP;

    loadAttachmentsSection(attachmentIds);

    // remove spinner
    jQuery("#jquery-attach-button").parent().find(".attach-waiting-spinner").remove();

    // reset the upload form to hidden and its divs and set the add comment to
    // display
    jQuery("#attachment-add-new-wrapper").hide();
    // jQuery("#attach-add-attachments").hide();
    jQuery("#attach-add-attachments .padding-wrapper div a.add-comment").show();
    jQuery("#attach-add-attachments .padding-wrapper div span a.add-another-attach-link").removeClass("hidden");

    // reset inputs
    // jQuery("#attach-add-attachments input.file-upload ").val(""); // this
    // dosent work.. browser security model blocks it

    // workaround to reset inputs
    var file_input_index = 0;
    jQuery_142("#attach-add-attachments input.file-upload").each(function() {
        file_input_index++;
        jQuery_142(this).wrap('<div id="file_input_container_' + file_input_index + '"></div>');
        jQuery_142("#file_input_container_" + file_input_index).html(jQuery_142("#file_input_container_" + file_input_index).html());
        jQuery_142("#file_input_container_" + file_input_index + " input").unwrap();
    });

    // make sure show all inputs is visable
    jQuery_142("#attach-show-attachments").show();

    // reset attachment comment placeholder state
    jQuery("div.attachment-comment-overlay").siblings(".file-comment").blur();

    // reset state of first toggle icon for add attachments section
    jQuery("#attach-add-attachments .padding-wrapper div.first a.add-disabled").addClass("add").removeClass("add-disabled");

}

function handleAttachmentUploadPostSubmitErrors(data) {
    var isUploadingInput = $("#page-controls-attachments #isUploadInProgress");
    isUploadingInput.val("false");

    // TODO: handle error here
    // remove spinner
    if(typeof(data) == "string") { //for calls from crypto applet
        data = JSON.parse(jQuery(jQuery(data)[1]).text())
    }
    jQuery("#jquery-attach-button").parent().find(".attach-waiting-spinner").remove();
    AJS.log("An error occured during upload. date: " + data);

}

// %%%%%%%%%%%%% END Attachment Upload actions %%%%%%%%%%%%%%%%

// %%%%%%%%%%%%% START Add New Office File actions %%%%%%%%%%%%%%%

function bindNewOfficeFileActions() {

    jQuery(".attachment-docs-creation-list a").click(function() {

        var createDocClass = jQuery(this).attr("class");
        var fileName = "";
        var fileType = "";

        var current = new Date();
        var endTime = (current - clickEventsStartTime);
        clickEvents.push({
            "event": {
                "eventId": "new-attachment-create-click-" + createDocClass,
                "timeSinceLoad": endTime,
                "occuredAt": current.getTime()
            }
        });

        switch (createDocClass) {
            case "attach-create-docx":
                fileName = "New Word Document.docx";
                fileType = "docx";
                break;
            case "attach-create-xlsx":
                fileName = "New Excel Spreadsheet.xlsx";
                fileType = "xlsx";
                break;
            case "attach-create-pptx":
                fileName = "New Powerpoint Presentation.pptx";
                fileType = "pptx";
                break;
            case "attach-create-doc":
                fileName = "New Word Document.doc";
                fileType = "doc";
                break;
            case "attach-create-xls":
                fileName = "New Excel Spreadsheet.xls";
                fileType = "xls";
                break;
            case "attach-create-ppt":
                fileName = "New Powerpoint Presentation.ppt";
                fileType = "ppt";
                break;
        }

        // open bimodal dialog here
        var dialog = jQuery("<div></div>");
        var dialogConfig = new JQUERYUI_DIALOG_INFO_HASH;
        var p = jQuery("<p>Please provide a filename for the new attachment:</p><input type='text' value='" + fileName + "' class='new-attachemnt-filename-input'>'");

        var href = contextPath + "/json/max/newofficedoc.action";

        dialogConfig.title = "Name New Attachment";
        dialogConfig.buttons = {
            "Cancel": function() {
                jQuery(this).dialog("close");
            },
            "Create": function() {
                // add small spinner
                jQuery_142(this).append(smallSpinnerImg);

                var data = {};
                data["officeDocumentType"] = fileType;
                data["officeDocumentName"] = jQuery(dialog).find("input.new-attachemnt-filename-input").val();
                data["pageId"] = community.plugins.attachments.uploadPageId; // AJS.params.pageId;

                jQuery_142.ajax({
                    type: 'GET',
                    dataType: 'json',
                    url: href,
                    data: data,
                    async: false,
                    success: function(data, textStatus, jqXHR) {
                        if (data.actionErrors && data.actionErrors.length > 0) {
                            var warningMsg = jQuery("<p>").addClass("red").text(data.actionErrors);
                            jQuery("#attachment-alert-create").append(warningMsg);
                            jQuery("#attachment-alert-create").css("display", "block");
                            return;
                        }
                        // highlight the uploaded attachments
                        // Wrapper is hidden, form should be shown so it is visible when wrapper opened -AWP
                        jQuery("#attach-add-attachments").show();
                        // Hiding create new docs section
                        jQuery("#attachment-add-new-docs").hide();

                        jQuery("#attachment-add-new-wrapper").hide(); // .addClass("hidden");
                        jQuery("#attach-upload-new").parent().addClass("active");
                        jQuery("#attach-create-new").parent().removeClass("active");
                        jQuery("#attach-upload-bulk").parent().removeClass("active");

                        var attachmentIds = new Array();
                        jQuery_142(data.attachmentsAdded).each(function(index, value) {
                            attachmentIds.push(value.id);
                        });

                        // reload any "new" attachents macros first
                        // TODO: hold off on this for now, need to rework
                        // jQuery("div.new-attachments-macro-wrapper").each( function ( i, wrapperObj ) {
                        // community.plugins.attachments.newAttachmentMacro.render(wrapperObj, attachmentIds);
                        // });

                        // Reloading attachments macros in loadAttachments function -AWP
                        loadAttachmentsSection(attachmentIds);
                    },
                    error: function() {
                        alert("Error!!");
                    } // TODO: show modal
                    // error dialog here
                });
                jQuery(this).dialog("close");
            }
        };
        dialogConfig.width = 500;
        dialogConfig.modal = true;
        dialog.append(p);
        dialog.dialog(dialogConfig);

        var current = new Date();
        var endTime = (current - clickEventsStartTime);
        clickEvents.push({
            "event": {
                "eventId": "new-attachment-create-click-save-" + createDocClass,
                "timeSinceLoad": endTime,
                "occuredAt": current.getTime()
            }
        });

        return false;
    });

}

// %%%%%%%%%%%%% END Add New Office File actions %%%%%%%%%%%%%%%


// %%%%%%%%%%%%%% START WebDAV, cookies and ActiveX checks %%%%%%%%%%%%%%%%%

function areCookiesEnabled() {
    var cookieEnabled = (navigator.cookieEnabled) ? true : false;

    if (typeof navigator.cookieEnabled == "undefined" && !cookieEnabled) {
        document.cookie = "testcookie";
        cookieEnabled = (document.cookie.indexOf("testcookie") != -1) ? true : false;
    }
    return (cookieEnabled);
}

function checkForActiveX() {
    if (window.ActiveXObject || (this.supportActiveX = ("ActiveXObject" in window))) {
        try {
            var ed = new ActiveXObject('SharePoint.OpenDocuments.1');
            activeXEnabled = true;
        } catch (err) {
        }
    } else {
        // firefox = true;
        // FireFox is ok now - MJK
        firefox = false;
    }
}

function checkForFirefoxOfficeWebDavPlugin() {
    if (window.URLLauncher) {
        firefoxOfficeWebDavPlugin = true;
    }
}

function checkForWebDav() {

    var cookieName = 'com.benryan.webdavenabled';
    var cookieNameDisabledByProxy = 'com.benryan.webdavdisabled'; // this is to disable direct edit from citrix farms (connect.eop.gov)
    var davCookie = jQuery.cookie(cookieName);
    var davCookieDisable = jQuery.cookie(cookieNameDisabledByProxy);
    if (davCookieDisable == "true") {
        directEditDisabledByProxy = true;
    }
    if (davCookie) {
        // window.alert('found cookie');
        hasDavAccess = davCookie == 'true';
    } else {
        var request = window.XMLHttpRequest ? new XMLHttpRequest() : new ActiveXObject("MSXML2.XMLHTTP.3.0");
        request.open('OPTIONS', contextPath + '/plugins/servlet/webdav', false);
        request.send(null);

        var hasLock = false;
        var hasUnlock = false;
        var hasPropFind = false;
        var hasPut = false;

        if (request.status == 200) {
            var httpAllow = request.getResponseHeader('Allow');
            if (httpAllow) {
                var allowed = httpAllow.split(',');
                for (var i = 0; i < allowed.length; i++) {
                    var method = allowed[i].replace(' ', '');
                    if (method == 'LOCK') {
                        hasLock = true;
                    } else if (method == 'UNLOCK') {
                        hasUnlock = true;
                    } else if (method == 'PUT') {
                        hasPut = true;
                    } else if (method == 'PROPFIND') {
                        hasPropFind = true;
                    }
                }
            }
            // check for disabled header
            var proxyDisableheader = request.getResponseHeader('DisableJSDirectEdit');
            if (proxyDisableheader == "true") {
                createCookie(cookieNameDisabledByProxy, "true", 0); // session cookie
            }
        }
        hasDavAccess = hasLock && hasUnlock && hasPropFind && hasPut;
        createCookie(cookieName, hasDavAccess, 0); // session cookie
        // window.alert('made cookie');
    }
    var warnNode = document.getElementById('davwarning');
    if (warnNode) {
        if (hasDavAccess) {
            warnNode.style.display = 'none';
        } else {
            warnNode.style.display = '';
        }
    }
}
function resetCookie() {
    eraseCookie(cookieName);
    checkForWebDav();
}

function readCookie(cookie_name) {
    var results = document.cookie.match(cookie_name + '=(.*?)(;|$)');
    var ret = null;
    if (results) {
        ret = (unescape(results[1]));
    }

    return ret;
}

function createCookie(name, value, days) {
    if (days) {
        var date = new Date();
        date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
        var expires = "; expires=" + date.toGMTString();
    } else
        var expires = "";

    document.cookie = name + "=" + value + expires + "; path=/";
}

function eraseCookie(name) {
    createCookie(name, "", -1);
}

// %%%%%%%%%%%%%% END WebDAV, cookies and ActiveX checks %%%%%%%%%%%%%%%%%

// %%%%%%%%%%%%%%%%%%%%% START Direct Edit Code %%%%%%%%%%%%%%%%%%%%%%%%

function doEditInOffice2(e, href, progID) {
    // var webDavUrl = '$webDavUtil.baseWebDavUrl' + href;
    var JSESSIONID = "XXXXXXXXXX";
    JSESSIONID = jQuery.cookie("JSESSIONID");
    var fileNameToappend;

    try {

        /*
         * Old way, with jsession right before the filename
         * 
         * var value1 = unescape(href).match( new RegExp(/^(.*)\/(.*?)$/)); fileNameToappend = value1[2]; href = value1[1];
         */

        // new way (chop off context path, append jsession after, put back on.
        // var value1 = unescape(href).replace(new RegExp("^" + contextPath),
        // "");
        // href = contextPath + "/JSESSIONID=" + JSESSIONID + "/" +
        // escape(value1);
        // OLD proxy mangler method
        // var value1 = unescape(href).match(new RegExp("^(.*)" + contextPath + "(\/plugins)(.*?)$" ) );
        // href = value1[1] + contextPath + "/JSESSIONID=" + JSESSIONID + "/" + escape(value1[2]);
        // NEW tomcat 6 way
        var value1 = unescape(href).match(new RegExp("^(.*)" + contextPath + "\/(plugins)(.*?)$"));
        href = "/" + value1[1] + contextPath + value1[2] + ";jsessionid=" + JSESSIONID + escape(value1[3]);

        // console.log("the href:"+href);
    } catch (err) {
        //
        AJS.log("Error occured in doEditInOffice2: " + err);
    }

    if (!e)
        var e = window.event;
    e.cancelBubble = true;
    if (e.stopPropagation)
        e.stopPropagation();

    if (window.ActiveXObject || (this.supportActiveX = ("ActiveXObject" in window))) {
        var ed;
        try {
            ed = new ActiveXObject('SharePoint.OpenDocuments.1');
        } catch (err) {
            window.alert('Unable to create an ActiveX object to open the document. This is most likely because of the security settings for your browser.');
            return false;
        }
        if (ed) {
            // Old way
            // ed.EditDocument(window.location.protocol + "//"+
            // window.location.host + "/" + href + "/JSESSIONID=" + JSESSIONID +
            // "/" + fileNameToappend , progID);
            ed.EditDocument(window.location.protocol + "//" + window.location.host + "/" + href, progID);
            return false;
        } else {
            window.alert('Cannot instantiate the required ActiveX control to open the document. This is most likely because you do not have Office installed or you have an older version of Office.');
            return false;
        }
    } else if (window.URLLauncher) {
        var wdFile = new URLLauncher();
        // wdFile.open(href + "/JSESSIONID=" + JSESSIONID + "/" +
        // fileNameToappend);
        wdFile.open(href);
        return false;
    } else if (window.InstallTrigger) {
        if (window.confirm('A plugin is required to use this feature. Would you like to download it?')) {
            InstallTrigger.install({
                'Atlassian WebDAV Launcher': 'https://update.atlassian.com/office-connector/URLLauncher/latest/webdavloader.xpi'
            });
        }
    } else {
        window.alert('Internet Explorer version 5.5+ or FireFox 3+ is required to use this feature. You will download the file but you will not be able to edit it.');
        return true;
    }
    return false;
}

// %%%%%%%%%%%%%% END WebDAV, cookies and ActiveX checks %%%%%%%%%%%%%%%%%

// %%%%%%%%%%%%%%%%%%%%% START Sorting Code %%%%%%%%%%%%%%%%%%%%%%%%%%

jQuery_142.fn.sort = function() {
    return this.pushStack([].sort.apply(this, arguments), []);
};

function sortPageTitleAsc(a, b) {
    var nameA = jQuery_142(a).find("input[name=pageTitle]").val().toLowerCase(), nameB = jQuery_142(b).find("input[name=pageTitle]").val().toLowerCase()
    if (nameA < nameB) { // sort string ascending
        return -1
    }
    if (nameA > nameB) {
        return 1
    }
    return 0 // default return value (no sorting)
};

function sortPageTitleDesc(a, b) {
    var nameA = jQuery_142(a).find("input[name=pageTitle]").val().toLowerCase(), nameB = jQuery_142(b).find("input[name=pageTitle]").val().toLowerCase()
    if (nameA > nameB) { // sort string descending
        return -1
    }
    if (nameA < nameB) {
        return 1
    }
    return 0 // default return value (no sorting)
};

function sortTitleAsc(a, b) {
    var nameA = jQuery_142(a).find("input[name=title]").val().toLowerCase(), nameB = jQuery_142(b).find("input[name=title]").val().toLowerCase()
    if (nameA < nameB) { // sort string ascending
        return -1
    }
    if (nameA > nameB) {
        return 1
    }
    return 0 // default return value (no sorting)
};

function sortTitleDesc(a, b) {
    var nameA = jQuery_142(a).find("input[name=title]").val().toLowerCase(), nameB = jQuery_142(b).find("input[name=title]").val().toLowerCase()
    if (nameA > nameB) { // sort string descending
        return -1
    }
    if (nameA < nameB) {
        return 1
    }
    return 0 // default return value (no sorting)
};

function sortTypeAsc(a, b) {
    var nameA = jQuery_142(a).find("input[name=type]").val().toLowerCase(), nameB = jQuery_142(b).find("input[name=type]").val().toLowerCase()
    if (nameA < nameB) { // sort string ascending
        return -1
    }
    if (nameA > nameB) {
        return 1
    }
    return 0 // default return value (no sorting)
};

function sortTypeDesc(a, b) {
    var nameA = jQuery_142(a).find("input[name=type]").val().toLowerCase(), nameB = jQuery_142(b).find("input[name=type]").val().toLowerCase()
    if (nameA > nameB) { // sort string descending
        return -1
    }
    if (nameA < nameB) {
        return 1
    }
    return 0 // default return value (no sorting)
};

function sortCommentAsc(a, b) {
    var nameA = jQuery_142(a).find("input[name=comment]").val().toLowerCase(), nameB = jQuery_142(b).find("input[name=comment]").val().toLowerCase()
    if (nameA < nameB) { // sort string ascending
        return -1
    }
    if (nameA > nameB) {
        return 1
    }
    return 0 // default return value (no sorting)
};

function sortCommentDesc(a, b) {
    var nameA = jQuery_142(a).find("input[name=comment]").val().toLowerCase(), nameB = jQuery_142(b).find("input[name=comment]").val().toLowerCase()
    if (nameA < nameB) { // sort string descending
        return 1
    }
    if (nameA > nameB) {
        return -1
    }
    return 0 // default return value (no sorting)
};

function sortDateAsc(a, b) {
    var dateA = jQuery_142(a).find("input[name=date]").val(), dateB = jQuery_142(b).find("input[name=date]").val()
    return dateA - dateB // sort by date ascending
}

function sortDateDesc(a, b) {
    var dateA = jQuery_142(a).find("input[name=date]").val(), dateB = jQuery_142(b).find("input[name=date]").val()
    return dateB - dateA // sort by date descending
}

function sortCreateDateAsc(a, b) {
    var dateA = jQuery_142(a).find("input[name=createdate]").val(), dateB = jQuery_142(b).find("input[name=createdate]").val()
    return dateA - dateB // sort by date ascending
}

function sortCreateDateDesc(a, b) {
    var dateA = jQuery_142(a).find("input[name=createdate]").val(), dateB = jQuery_142(b).find("input[name=createdate]").val()
    return dateB - dateA // sort by date descending
}

function sortSizeAsc(a, b) {
    var sizeA = jQuery_142(a).find("input[name=size]").val(), sizeB = jQuery_142(b).find("input[name=size]").val()
    return sizeA - sizeB // sort by number ascending
}

function sortSizeDesc(a, b) {
    var sizeA = jQuery_142(a).find("input[name=size]").val(), sizeB = jQuery_142(b).find("input[name=size]").val()
    return sizeB - sizeA // sort by number ascending
}

function sortUserAsc(a, b) {
    var nameA = jQuery_142(a).find("input[name=user]").val().toLowerCase(), nameB = jQuery_142(b).find("input[name=user]").val().toLowerCase()
    if (nameA < nameB) { // sort string ascending
        return -1
    }
    if (nameA > nameB) {
        return 1
    }
    return 0 // default return value (no sorting)
};

function sortUserDesc(a, b) {
    var nameA = jQuery_142(a).find("input[name=user]").val().toLowerCase(), nameB = jQuery_142(b).find("input[name=user]").val().toLowerCase()
    if (nameA > nameB) { // sort string descending
        return -1
    }
    if (nameA < nameB) {
        return 1
    }
    return 0 // default return value (no sorting)
};

function customParseJSON(data) {
    if (typeof (data) != "object") {
        if (typeof (JSON) != "undefined") {
            return JSON.parse(data);
        } else {
            // fall back to eval
            return eval("(" + data + ")");
        }
    } else {
        return data;
    }
};

    //Moved the follwoing to functions out of "bind" function to global to allow call from new-attachments-macro.js. -AWP
    function handleAjaxAttachmentEditSuccess(eventObject, formElement, data, currentSectionWrapper) {
        // check for error message
        AJS.log("handleAjaxAttachmentEditSuccess -- entered");
        var errorStatus = data.returnObject.errorStatus;
        var errorMessage = data.returnObject.errorMessage;
        var attachmentId = data.returnObject.attachmentId;
        if (errorStatus) {
            jQuery_142(eventObject.currentTarget).find(".edit-attachment-error-div").show();
            jQuery_142(eventObject.currentTarget).find(".edit-attachment-error-div").html(errorMessage);
            return false;
        } else {
            var attachmentIds = new Array();
            attachmentIds.push(attachmentId);
            // success reload the attachments
            if (jQuery(currentSectionWrapper).hasClass("new-attachments-macro-wrapper")) {
                community.plugins.attachments.newAttachmentMacro.render(currentSectionWrapper, attachmentIds);
            } else {
                loadAttachmentsSection(attachmentIds);
            }

            return false;
        }
    }

    function updateAttachmentComment(newComment, eventObject, currentSectionWrapper){
              // do post and then refresh attachments list - not async
        var thisAttachment = $(eventObject.currentTarget).parents(".individual-attachment");

        var attachmentPageId = thisAttachment.find("input[name=attachmentPageId]").val();
        var attachmentFileName = thisAttachment.find('.attach-edit-comment').find(".attach-form-filename").val();
        tempScrollTop = jQuery(window).scrollTop();

        jQuery_142.ajax({
            type: 'POST',
            dataType: "json",
            url: contextPath + "/json/max/editattachmentajax.action",
            data: {
                pageId: attachmentPageId,
                attachmentFileName: attachmentFileName,
                newComment: newComment
            },
            async: false,
            success: function(data) {
                handleAjaxAttachmentEditSuccess(eventObject, this, data, currentSectionWrapper)
            },
            error: function() {
                alert('An error has occurred.')
            }
        });
    }
    
    function renderAttachmentHistory(historyLinkObj) {
    	
    	// show loading spinner
    	$(historyLinkObj).append(smallSpinnerImgInline);
    	
        jQuery.ajax({
            type: 'GET',
            url: historyLinkObj.href,
            success: function(data) {                 
            	data.contextPath = contextPath;
            	data.restoreLink = contextPath + "/json/max/ajaxrestoreattachmentversion.action?"; //pageId, attachmentName, version supplied in template from attachment version object
            	data.profileLinkUrl = contextPath + "/users/viewuserprofile.action?username=";
            	data.isNormal = ($(historyLinkObj).parents("li.individual-attachment").find("input[name='attachmentIsItNormal']").val() == "true");
            	data.canUserAttach = community.plugins.attachments.canUserAttach;
            	$(historyLinkObj).parents('.attachment-options').find('.attach-options-history-list').html(doT.template($('#attachments-section-history-template').text())(data));
                
                //COP-3993: Bind restore to a function, do with AJAX
                $(".attach-version-restore").click(function(eventObject) {
                    handleRestoreClick(this, eventObject);
                    return false;
                });

                $(historyLinkObj).addClass("rendered");
                // remove loading spinner 
                $(historyLinkObj).find("img.attach-waiting-spinner").remove();
                
            },
            error: function() {
            	// remove loading spinner 
            	$(historyLinkObj).find("img.attach-waiting-spinner").remove();
                alert("An error has occurred.");
            } 
        });

        var handleRestoreClick = function(link, event){

            if ($(link).hasClass("disabled")) {
                return false;
            }
            //Since this is moved to new scope, need to reselect currentSectionWrapper.
            var currentSectionWrapper = $(historyLinkObj).parents(".new-attachments-macro-wrapper");
            if(currentSectionWrapper.size() == 0) {
                currentSectionWrapper = $("#page-controls-attachments");
            }

            var restoreVersionNum = $(link).parent(".attach-history-item").find(".attach-history-item-checkbox").val();

            var actionOptions = new attachmentActionDialogOptions;
            actionOptions.dialogTitle = "Confirm Restore Version " + restoreVersionNum;
            actionOptions.dialogText = "Are you sure you want to restore this attachment to version " + restoreVersionNum + "?";
            actionOptions.highlightAttachment = true;
            doAttachmentActionDialog(link, actionOptions);

            return false;
        };

        var standardAttachments
    }
    
    function doAttachmentActionDialog(linkElement, options){
        //Will call action specified in the link href.

        var isAttachmentsMacro =  ($(linkElement).parents(".new-attachments-macro-wrapper").size() != 0);

        // do get and then refresh attachments list
        var href = jQuery(linkElement).attr("href");
        var dialog = jQuery("<div></div>");
        var dialogConfig = new JQUERYUI_DIALOG_INFO_HASH;
        var p = $("<p>" + options.dialogText + "</b></p>");
        dialogConfig.title = options.dialogTitle;
        dialogConfig.buttons = {
            "Cancel": function() {
                jQuery(this).dialog("close");
            },
            "Yes": function() {
                var errorText = "An error occurred during your request. Please refresh the page and try again. If the problem persists, please contact MAX Support.";
                // add small spinner
                jQuery(this).append(smallSpinnerImg);
                var that = this;

                jQuery.ajax({
                    type: 'GET',
                    url: href,
                    async: true,
                    success: function(data) {
                        if(data.hasError){
                            if(data.statusMessage != undefined || data.statusMessage != "") {
                                errorText = data.statusMessage;
                                alert(errorText);
                            }
                        }
                        else {
                            if (isAttachmentsMacro) {
                                community.plugins.attachments.newAttachmentMacro.render($(linkElement).parents(".new-attachments-macro-wrapper"));
                            } else {
                                var attachmentIds = new Array();
                                if((data.attachmentsAdded != undefined) && options.highlightAttachment) {
                                    //Refresh and hightlight impacted attachment, refresh macros
                                    $.each(data.attachmentsAdded, function(index, value) {
                                        attachmentIds.push(value.id);
                                    });
                                }
                                loadAttachments(attachmentIds, true);
                            }
                        }
                        jQuery(that).dialog("close");
                    },
                    error: function() {
                        alert("An error occurred during your request. Please refresh the page and try again. If the problem persists, please contact MAX Support.");
                    } // TODO: show modal
                    // error dialog here
                });
                $(this).parent().find("button").attr("disabled", true);
            }
        };
        dialogConfig.width = 500;
        dialog.append(p);
        dialog.dialog(dialogConfig); 
    }

    function attachmentActionDialogOptions(){
        return {
            dialogTitle: "",
            dialogText: "",
            highlightAttachment: false
        }
    }
} catch (err) {
    if (console && console.log && console.error) {
        console.log("Error running batched script.");
        console.error(err);
    }
}

;
;try {
/* module-key = 'com.benryan.confluence.attachments:attachments-section-resources', location = 'templates/extra/checkout/script/readonly-dialog.js' */
var DIALOG_EXPIRE_DATE_INTERVAL = 30; // In Days

function readOnlyDownloadDialog(link) {

	
	// only show for office file types - MJK
	var fileType = detectFileType(link);
	if ( fileType != "word" && fileType != "excel" && fileType != "ppt" & fileType != "project") {
		launchDownload(link);
		return true;
	}
	
	
	/*if ( supressViewOnlyDialog() ) {
		launchDownload(link);
		return false;
	}*/

	// TODO: open bimodal dialog here
	var dialog = jQuery("<div class='view-attachment-warning-dialog-wrapper'></div>");
	var dialogConfig = new JQUERYUI_DIALOG_INFO_HASH;
	var p = jQuery_142("<h2><span class='view-attchment-warning-dialog-icon'></span>This option is READ ONLY &mdash; no editing possible</h2>" +
			"<div class='view-attachment-warning-dialog-message'><p><strong>Ignore Microsoft Office instructions</strong> that imply you can edit and save back to the MAX Community. " +
			"You will only be able to save this file to your local computer. </p>" +
			"<p><strong>If using MAX Shared Desktop,</strong> all local files will be removed when the desktop is closed.</p>" +
			"</div>");
	var dontShowAgain = jQuery_142("<br/><input id='readonly-dont-show-again' style='position: relative; top: 2px;' name='readonly-dont-show-again' type='checkbox'>" +
	"<label for='readonly-dont-show-again' id='readonly-dont-show-again-text' style='padding-left: 7px;'>Do not show this dialog again</label>");

	dialogConfig.title = "View (or download) Attachment";
	dialogConfig.buttons = {
		"Cancel": function() {
			var current = new Date();
			var endTime = (current - clickEventsStartTime );
			clickEvents.push(
					{ "event" : {
						"eventId" : "read-only-download-dialog-click-cancel", 
						"timeSinceLoad" : endTime,
						"occuredAt" : current.getTime()
					}
					});		
			jQuery(this).dialog("close");			
			//setReadOnlyDialogPreferences(jQuery_142("#readonly-dont-show-again").is(':checked'));
			//return false;
		},
		"View or Download Attachment": function() {
			var current = new Date();
			var endTime = (current - clickEventsStartTime );
			clickEvents.push(
					{ "event" : {
						"eventId" : "read-only-download-dialog-click-download", 
						"timeSinceLoad" : endTime,
						"occuredAt" : current.getTime()
					}
					});		
			jQuery(this).dialog("close");
			readOnlyDialogOpenBool = false;
			var dontShowCheckedState = jQuery_142("#readonly-dont-show-again").is(':checked');
			if (dontShowCheckedState) {
				clickEvents.push(
						{ "event" : {
							"eventId" : "read-only-download-dialog-click-dont-show-again", 
							"timeSinceLoad" : endTime,
							"occuredAt" : current.getTime()
						}
						});		
				setReadOnlyDialogPreferences(true) 
			};
			launchDownload(link);
			//location.href = link; // navigate to download the attachment in a new window			
			//return false;
		}
	};
	dialogConfig.width = 560;
	dialogConfig.modal = true;
	dialogConfig.closeOnEscape = false;
	
	dialogConfig.resizable = false;	
		
	// hide the X
	dialogConfig.open = function(event, ui) { 
	
		jQuery(".ui-dialog-titlebar-close").hide();
		
		// scroll bars
		jQuery('body').css('overflow','hidden'); 
		jQuery('.ui-widget-overlay').css('width','100%');			
		document.getElementsByTagName("html")[0].style.overflow = "hidden";	
		
	} 
	
	dialogConfig.close = function(event, ui){	
		
		jQuery('body').css('overflow','auto');
		document.getElementsByTagName("html")[0].style.overflow = "scroll";
	};
	
	dialog.append(p);
	//dialog.append(dontShowAgain);
	dialog.dialog(dialogConfig);
	
	// set classes on buttons
	jQuery(dialog).parent().find("div.ui-dialog-buttonpane button:nth-child(1)").addClass("view-attachment-download-file-cancel");
	jQuery(dialog).parent().find("div.ui-dialog-buttonpane button:nth-child(2)").addClass("view-attachment-download-file-ok");

	readOnlyDialogOpenBool = true;

	//return false;

}

function launchDownload(link) {
	
	var downloadWindow = window.open(
			  link,
			  '_blank' // <- This is what makes it open in a new window.
			);
	downloadWindow.focus();
	
}

function supressViewOnlyDialog() {
	var systemPreferences = userPreferences.getSystemPreferences();
	var suppress = false;

	if(systemPreferences.downloadAttachmentDialog) {
		if(new Date() > systemPreferences.downloadAttachmentDialog.expireDate) {
			setReadOnlyDialogPreferences();
			suppress = false;
		} else if(systemPreferences.downloadAttachmentDialog.suppress == true) {
			suppress = true;
		}
	} else {
		suppress = false;
		setReadOnlyDialogPreferences();
	}

	return suppress;
}

function setReadOnlyDialogPreferences(value) {
	var systemPreferences = userPreferences.getSystemPreferences();

	var expireDate = new Date();

	expireDate.setDate(expireDate.getDate() + DIALOG_EXPIRE_DATE_INTERVAL);

	if(typeof(value) === "undefined")
		value = false;

	systemPreferences.downloadAttachmentDialog = {};
	systemPreferences.downloadAttachmentDialog.suppress = value;
	systemPreferences.downloadAttachmentDialog.expireDate = expireDate;

	userPreferences.setSystemPreferences(systemPreferences, true, false);
}

} catch (err) {
    if (console && console.log && console.error) {
        console.log("Error running batched script.");
        console.error(err);
    }
}

;
;try {
/* module-key = 'com.benryan.confluence.attachments:attachments-section-resources', location = 'templates/extra/checkout/script/uploadify/jquery.uploadifive.js' */
/*
UploadiFive 1.0.4
Copyright (c) 2012 Reactive Apps, Ronnie Garcia
Released under the UploadiFive Commercial License <http://www.uploadify.com/uploadifive-commercial-license>
*/
;(function($) {

    var methods = {

        init : function(options) {
            
            return this.each(function() {

                // Create a reference to the jQuery DOM object
                var $this = $(this);
                    $this.data('uploadifive', {
                        inputs     : {}, // The object that contains all the file inputs
                        inputCount : 0,  // The total number of file inputs created
                        fileID     : 0,
                        queue      : {
                                         count      : 0, // Total number of files in the queue
                                         selected   : 0, // Number of files selected in the last select operation
                                         replaced   : 0, // Number of files replaced in the last select operation
                                         errors     : 0, // Number of files that returned an error in the last select operation
                                         queued     : 0, // Number of files added to the queue in the last select operation
                                         cancelled  : 0  // Total number of files that have been cancelled or removed from the queue
                                     },
                        uploads    : {
                                         current    : 0, // Number of files currently being uploaded
                                         attempts   : 0, // Number of file uploads attempted in the last upload operation
                                         successful : 0, // Number of files successfully uploaded in the last upload operation
                                         errors     : 0, // Number of files returning errors in the last upload operation
                                         count      : 0  // Total number of files uploaded successfully
                                     }
                    });
                var $data = $this.data('uploadifive');

                // Set the default options
                var settings = $data.settings = $.extend({
                    'auto'            : true,               // Automatically upload a file when it's added to the queue
                    'buttonClass'     : false,              // A class to add to the UploadiFive button
                    'buttonText'      : 'Select Files',     // The text that appears on the UploadiFive button
                    'checkScript'     : false,              // Path to the script that checks for existing file names 
                    'dnd'             : true,               // Allow drag and drop into the queue
                    'dropTarget'      : false,              // Selector for the drop target
                    'fileSizeLimit'   : 0,                  // Maximum allowed size of files to upload
                    'fileType'        : false,              // Type of files allowed (image, etc)
                    'formData'        : {},                 // Additional data to send to the upload script
                    'height'          : 30,                 // The height of the button
                    'method'          : 'post',             // The method to use when submitting the upload
                    'multi'           : true,               // Set to true to allow multiple file selections
                    'overrideEvents'  : [],                 // An array of events to override
                    'queueID'         : false,              // The ID of the file queue
                    'queueSizeLimit'  : 0,                  // The maximum number of files that can be in the queue
                    'removeCompleted' : false,              // Set to true to remove files that have completed uploading
                    'simUploadLimit'  : 0,                  // The maximum number of files to upload at once
                    'truncateLength'  : 0,                  // The length to truncate the file names to
                    'uploadLimit'     : 0,                  // The maximum number of files you can upload
                    'uploadScript'    : 'uploadifive.php',  // The path to the upload script
                    'width'           : 100                // The width of the button

                    /*
                    // Events
                    'onAddQueueItem'   : function(file) {},                        // Triggered for each file that is added to the queue
                    'onCancel'         : function(file) {},                        // Triggered when a file is cancelled or removed from the queue
                    'onCheck'          : function(file, exists) {},                // Triggered when the server is checked for an existing file
                    'onClearQueue'     : function(queue) {},                       // Triggered during the clearQueue function
                    'onDestroy'        : function() {}                             // Triggered during the destroy function
                    'onDrop'           : function(files, numberOfFilesDropped) {}, // Triggered when files are dropped into the file queue
                    'onError'          : function(file, fileType, data) {},        // Triggered when an error occurs
                    'onFallback'       : function() {},                            // Triggered if the HTML5 File API is not supported by the browser
                    'onInit'           : function() {},                            // Triggered when UploadiFive if initialized
                    'onQueueComplete'  : function() {},                            // Triggered once when an upload queue is done
                    'onProgress'       : function(file, event) {},                 // Triggered during each progress update of an upload
                    'onSelect'         : function() {},                            // Triggered once when files are selected from a dialog box
                    'onUpload'         : function(file) {},                        // Triggered when an upload queue is started
                    'onUploadComplete' : function(file, data) {},                  // Triggered when a file is successfully uploaded
                    'onUploadFile'     : function(file) {},                        // Triggered for each file being uploaded
                    */
                }, options);

                // Calculate the file size limit
                if (isNaN(settings.fileSizeLimit)) {
                    var fileSizeLimitBytes = parseInt(settings.fileSizeLimit) * 1.024
                    if (settings.fileSizeLimit.indexOf('KB') > -1) {
                        settings.fileSizeLimit = fileSizeLimitBytes * 1000;
                    } else if (settings.fileSizeLimit.indexOf('MB') > -1) {
                        settings.fileSizeLimit = fileSizeLimitBytes * 1000000;
                    } else if (settings.fileSizeLimit.indexOf('GB') > -1) {
                        settings.fileSizeLimit = fileSizeLimitBytes * 1000000000;
                    }
                } else {
                    settings.fileSizeLimit = settings.fileSizeLimit * 1024;
                }

                // Create a template for a file input
                $data.inputTemplate = $('<input type="file">')
                .css({
                   'opacity'  : 0,
                   'position' : 'absolute',
                   'z-index'  : 999 
                });

                // Create a new input
                $data.createInput = function() {

                    // Create a clone of the file input
                    var input     = $data.inputTemplate.clone();
                    // Create a unique name for the input item
                    var inputName = input.name = 'input' + $data.inputCount++;
                    // Set the multiple attribute
                    if (settings.multi) {
                        input.attr('multiple', true);
                    }
                    // Set the onchange event for the input
                    input.bind('change', function() {
                        $data.queue.selected = 0;
                        $data.queue.replaced = 0;
                        $data.queue.errors   = 0;
                        $data.queue.queued   = 0;
                        // Add a queue item to the queue for each file
                        var limit = this.files.length;
                        $data.queue.selected = limit;
                        if (($data.queue.count + limit) > settings.queueSizeLimit && settings.queueSizeLimit !== 0) {
                            if ($.inArray('onError', settings.overrideEvents) < 0) {
                                alert('The maximum number of queue items has been reached (' + settings.queueSizeLimit + ').  Please select fewer files.');
                            }
                            // Trigger the error event
                            if (typeof settings.onError === 'function') {
                                settings.onError.call($this, 'QUEUE_LIMIT_EXCEEDED');
                            }
                        } else {
                            for (var n = 0; n < limit; n++) {
                                file = this.files[n];
                                $data.addQueueItem(file);
                            }
                            $data.inputs[inputName] = this;
                            $data.createInput();
                        }
                        // Upload the file if auto-uploads are enabled
                        if (settings.auto) {
                            methods.upload.call($this);
                        }
                        // Trigger the select event
                        if (typeof settings.onSelect === 'function') {
                            settings.onSelect.apply($this, $data.queue);
                        }
                    });
                    // Hide the existing current item and add the new one
                    if ($data.currentInput) {
                        $data.currentInput.hide();
                    }
                    $data.button.append(input);
                    $data.currentInput = input;
                }

                // Remove an input
                $data.destroyInput = function(key) {
                    $($data.inputs[key]).remove();
                    delete $data.inputs[key];
                    $data.inputCount--;
                }

                // Drop a file into the queue
                $data.drop = function(e) {
                    $data.queue.selected = 0;
                    $data.queue.replaced = 0;
                    $data.queue.errors   = 0;
                    $data.queue.queued   = 0;

                    var fileData = e.dataTransfer;

                    var inputName = fileData.name = 'input' + $data.inputCount++;
                    // Add a queue item to the queue for each file
                    var limit = fileData.files.length;
                    $data.queue.selected = limit;
                    if (($data.queue.count + limit) > settings.queueSizeLimit && settings.queueSizeLimit !== 0) {
                        // Check if the queueSizeLimit was reached
                        if ($.inArray('onError', settings.overrideEvents) < 0) {
                            alert('The maximum number of queue items has been reached (' + settings.queueSizeLimit + ').  Please select fewer files.');
                        }
                        // Trigger the onError event
                        if (typeof settings.onError === 'function') {
                            settings.onError.call($this, 'QUEUE_LIMIT_EXCEEDED');
                        }
                    } else {
                        // Add a queue item for each file
                        for (var n = 0; n < limit; n++) {
                            file = fileData.files[n];
                            $data.addQueueItem(file);
                        }
                        // Save the data to the inputs object
                        $data.inputs[inputName] = fileData;
                    }

                    // Upload the file if auto-uploads are enabled
                    if (settings.auto) {
                        methods.upload.call($this);
                    }

                    // Trigger the onDrop event
                    if (typeof settings.onDrop === 'function') {
                        settings.onDrop.call($this, fileData.files, fileData.files.length);
                    }

                    // Stop FireFox from opening the dropped file(s)
                    e.preventDefault();
                    e.stopPropagation();
                }

                // Check if a filename exists in the queue
                $data.fileExistsInQueue = function(file) {
                    for (var key in $data.inputs) {
                        input = $data.inputs[key];
                        limit = input.files.length;
                        for (var n = 0; n < limit; n++) {
                            existingFile = input.files[n];
                            // Check if the filename matches
                            if (existingFile.name == file.name && !existingFile.complete) {
                                return true;
                            }
                        }
                    }
                    return false;
                }

                // Remove an existing file in the queue
                $data.removeExistingFile = function(file) {
                    for (var key in $data.inputs) {
                        input = $data.inputs[key];
                        limit = input.files.length;
                        for (var n = 0; n < limit; n++) {
                            existingFile = input.files[n];
                            // Check if the filename matches
                            if (existingFile.name == file.name && !existingFile.complete) {
                                $data.queue.replaced++;
                                methods.cancel.call($this, existingFile, true);
                            }
                        }
                    }
                }

                // Queue item template
                $data.queueItem = $('<div class="uploadifive-queue-item">\
                    <a class="close" href="#">X</a>\
                    <div><span class="filename"></span><span class="fileinfo"></span></div>\
                    <div class="progress">\
                        <div class="progress-bar"></div>\
                    </div>\
                </div>');

                // Add an item to the queue
                $data.addQueueItem = function(file) {
                    if ($.inArray('onAddQueueItem', settings.overrideEvents) < 0) {
                        // Check if the filename already exists in the queue
                        $data.removeExistingFile(file);
                        // Create a clone of the queue item template
                        file.queueItem = $data.queueItem.clone();
                        // Add an ID to the queue item
                        file.queueItem.attr('id', settings.id + '-file-' + $data.fileID++);
                        // Bind the close event to the close button
                        file.queueItem.find('.close').bind('click', function() {
                           methods.cancel.call($this, file);
                           return false;
                        });
                        var fileName = file.name;
                        if (fileName.length > settings.truncateLength && settings.truncateLength != 0) {
                            fileName = fileName.substring(0, settings.truncateLength) + '...';
                        }
                        file.queueItem.find('.filename').html(fileName);
                        // Add a reference to the file
                        file.queueItem.data('file', file);
                        $data.queueEl.append(file.queueItem); 

                    }
                    // Trigger the addQueueItem event
                    if (typeof settings.onAddQueueItem === 'function') {
                        settings.onAddQueueItem.call($this, file);
                    }
                    // Check the filetype
                    if (settings.fileType) {
                        if ($.isArray(settings.fileType)) {
                            var isValidFileType = false;
                            for (var n = 0; n < settings.fileType.length; n++) {
                                if (file.type.indexOf(settings.fileType[n]) > -1) {
                                    isValidFileType = true;
                                }
                            }
                            if (!isValidFileType) {
                                $data.error('FORBIDDEN_FILE_TYPE', file);
                            }
                        } else {
                            if (file.type.indexOf(settings.fileType) < 0) {
                                $data.error('FORBIDDEN_FILE_TYPE', file);
                            }
                        }
                    }
                    // Check the filesize
                    if (file.size > settings.fileSizeLimit && settings.fileSizeLimit != 0) {
                        $data.error('FILE_SIZE_LIMIT_EXCEEDED', file);
                    } else {
                        $data.queue.queued++;
                        $data.queue.count++;
                    }
                }

                // Remove an item from the queue
                $data.removeQueueItem = function(file, instant, delay) {
                    // Set the default delay
                    if (!delay) delay = 0;
                    var fadeTime = instant ? 0 : 500;
                    if (file.queueItem) {
                        if (file.queueItem.find('.fileinfo').html() != ' - Completed') {
                            file.queueItem.find('.fileinfo').html(' - Cancelled');
                        }
                        file.queueItem.find('.progress-bar').width(0);
                        file.queueItem.delay(delay).fadeOut(fadeTime, function() {
                           $(this).remove();
                        });
                        delete file.queueItem;
                        $data.queue.count--;
                    }
                }

                // Count the number of files that need to be uploaded
                $data.filesToUpload = function() {
                    var filesToUpload = 0;
                    for (var key in $data.inputs) {
                        input = $data.inputs[key];
                        limit = input.files.length;
                        for (var n = 0; n < limit; n++) {
                            file = input.files[n];
                            if (!file.skip && !file.complete) {
                                filesToUpload++;
                            }
                        }
                    }
                    return filesToUpload;
                }

                // Check if a file exists
                $data.checkExists = function(file) {
                    if ($.inArray('onCheck', settings.overrideEvents) < 0) {
                        // This request needs to be synchronous
                        $.ajaxSetup({
                            'async' : false
                        });
                        // Send the filename to the check script
                        var checkData = $.extend(settings.formData, {filename: file.name});
                        $.post(settings.checkScript, checkData, function(fileExists) {
                            file.exists = parseInt(fileExists);
                        });
                        if (file.exists) {
                            if (!confirm('A file named ' + file.name + ' already exists in the upload folder.\nWould you like to replace it?')) {
                                // If not replacing the file, cancel the upload
                                methods.cancel.call($this, file);
                                return true;
                            }
                        }
                    }
                    // Trigger the check event
                    if (typeof settings.onCheck === 'function') {
                        settings.onCheck.call($this, file, file.exists);
                    }
                    return false;
                }

                // Upload a single file
                $data.uploadFile = function(file, uploadAll) {
                    if (!file.skip && !file.complete && !file.uploading) {
                        file.uploading = true;
                        $data.uploads.current++;
                        $data.uploads.attempted++;

                        // Create a new AJAX request
                        xhr = file.xhr = new XMLHttpRequest();

                        // Start the upload
                        // Use the faster FormData if it exists
                        if (typeof FormData === 'function' || typeof FormData === 'object') {

                            // Create a new FormData object
                            var formData = new FormData();

                            // Add the form data
                            formData.append('Filedata', file);

                            // Add the rest of the formData
                            for (i in settings.formData) {
                                formData.append(i, settings.formData[i]);
                            }

                            // Open the AJAX call
                            xhr.open(settings.method, settings.uploadScript, true);

                            // On progress function
                            xhr.upload.addEventListener('progress', function(e) {
                                if (e.lengthComputable) {
                                    $data.progress(e, file);
                                }
                            }, false);

                            // On complete function
                            xhr.addEventListener('load', function(e) {
                                if (this.readyState == 4) {
                                    file.uploading = false;
                                    if (this.status == 200) {
                                        if (file.xhr.responseText !== 'Invalid file type.') {
                                            $data.uploadComplete(e, file, uploadAll);
                                        } else {
                                            $data.error(file.xhr.responseText, file, uploadAll);
                                        }
                                    } else if (this.status == 404) {
                                        $data.error('404_FILE_NOT_FOUND', file, uploadAll);
                                    } else if (this.status == 403) {
                                        $data.error('403_FORBIDDEN', file, uplaodAll);
                                    } else {
                                        $data.error('Unknown Error', file, uploadAll);
                                    }
                                }
                            });

                            // Send the form data (multipart/form-data)
                            xhr.send(formData);

                        } else {

                            // Send as binary
                            var reader = new FileReader();
                            reader.onload = function(e) {

                                // Set some file builder variables
                                var boundary = '-------------------------' + (new Date).getTime(),
                                    dashes   = '--',
                                    eol      = '\r\n',
                                    binFile  = '';

                                // Build an RFC2388 String 
                                binFile += dashes + boundary + eol;
                                // Generate the headers
                                binFile += 'Content-Disposition: form-data; name="Filedata"';
                                if (file.name) {
                                    binFile += '; filename="' + file.name + '"';
                                }
                                binFile += eol;
                                binFile += 'Content-Type: application/octet-stream' + eol + eol;
                                binFile += e.target.result + eol;

                                for (key in settings.formData) {
                                    binFile += dashes + boundary + eol;
                                    binFile += 'Content-Disposition: form-data; name="' + key + '"' + eol + eol;
                                    binFile += settings.formData[key] + eol;
                                }

                                binFile += dashes + boundary + dashes + eol;

                                // On progress function
                                xhr.upload.addEventListener('progress', function(e) {
                                    $data.progress(e, file);
                                }, false);

                                // On complete function
                                xhr.addEventListener('load', function(e) {
                                    file.uploading = false;
                                    var status = this.status;
                                    if (status == 404) {
                                        $data.error('404_FILE_NOT_FOUND', file, uploadAll);
                                    } else {
                                        if (file.xhr.responseText != 'Invalid file type.') {    
                                            $data.uploadComplete(e, file, uploadAll);
                                        } else {
                                            $data.error(file.xhr.responseText, file, uploadAll);
                                        } 
                                    }
                                }, false);

                                // Open the ajax request
                                var url = settings.uploadScript;
                                if (settings.method == 'get') {
                                    var params = $(settings.formData).param();
                                    url += params;
                                }
                                xhr.open(settings.method, settings.uploadScript, true);
                                xhr.setRequestHeader("Content-Type", "multipart/form-data; boundary=" + boundary);

                                // Trigger the uploadFile event
                                if (typeof settings.onUploadFile === 'function') {
                                    settings.onUploadFile.call($this, file);
                                }

                                // Send the file for upload
                                xhr.sendAsBinary(binFile);
                            }
                            reader.readAsBinaryString(file);

                        }
                    }
                }

                // Update a file upload's progress
                $data.progress = function(e, file) {
                    if ($.inArray('onProgress', settings.overrideEvents) < 0) {
                        if (e.lengthComputable) {
                            var percent = Math.round((e.loaded / e.total) * 100);
                        }
                        file.queueItem.find('.fileinfo').html(' - ' + percent + '%');
                        file.queueItem.find('.progress-bar').css('width', percent + '%');
                    }
                    // Trigger the progress event
                    if (typeof settings.onProgress === 'function') {
                        settings.onProgress.call($this, file, e);
                    }
                }

                // Trigger an error
                $data.error = function(errorType, file, uploadAll) {
                    if ($.inArray('onError', settings.overrideEvents) < 0) {
                        // Get the error message
                        switch(errorType) {
                            case '404_FILE_NOT_FOUND':
                                errorMsg = '404 Error';
                                break;
                            case '403_FORBIDDEN':
                                errorMsg = '403 Forbidden';
                                break;
                            case 'FORBIDDEN_FILE_TYPE':
                                errorMsg = 'Forbidden File Type';
                                break;
                            case 'FILE_SIZE_LIMIT_EXCEEDED':
                                errorMsg = 'File Too Large';
                                break;
                            default:
                                errorMsg = 'Unknown Error';
                                break;
                        }

                        // Add the error class to the queue item
                        file.queueItem.addClass('error')
                        // Output the error in the queue item
                        .find('.fileinfo').html(' - ' + errorMsg);
                        // Hide the 
                        file.queueItem.find('.progress').remove();
                    }
                    // Trigger the error event
                    if (typeof settings.onError === 'function') {
                        settings.onError.call($this, errorType, file);
                    }
                    file.skip = true;
                    if (errorType == '404_FILE_NOT_FOUND') {
                        $data.uploads.errors++;
                    } else {
                        $data.queue.errors++;
                    }
                    if (uploadAll) {
                        methods.upload.call($this, null, true);
                    }
                }

                // Trigger when a single file upload is complete
                $data.uploadComplete = function(e, file, uploadAll) {
                    if ($.inArray('onUploadComplete', settings.overrideEvents) < 0) {
                        file.queueItem.find('.progress-bar').css('width', '100%');
                        file.queueItem.find('.fileinfo').html(' - Completed');
                        file.queueItem.find('.progress').slideUp(250);
                        file.queueItem.addClass('complete');
                    }
                    // Trigger the complete event
                    if (typeof settings.onUploadComplete === 'function') {
                        settings.onUploadComplete.call($this, file, file.xhr.responseText);
                    }
                    if (settings.removeCompleted) {
                        setTimeout(function() { methods.cancel.call($this, file); }, 3000);
                    }
                    file.complete = true;
                    $data.uploads.successful++;
                    $data.uploads.count++;
                    $data.uploads.current--;
                    delete file.xhr;
                    if (uploadAll) {
                        methods.upload.call($this, null, true);
                    }
                }

                // Trigger when all the files are done uploading
                $data.queueComplete = function() {
                    // Trigger the queueComplete event
                    if (typeof settings.onQueueComplete === 'function') {
                        settings.onQueueComplete.call($this, $data.uploads);
                    }
                }

                // ----------------------
                // Initialize UploadiFive
                // ----------------------

                // Check if HTML5 is available
                if (window.File && window.FileList && window.Blob && (window.FileReader || window.FormData)) {
                    // Assign an ID to the object
                    settings.id = 'uploadifive-' + $this.attr('id');

                    // Wrap the file input in a div with overflow set to hidden
                    $data.button = $('<div id="' + settings.id + '" class="uploadifive-button">' + settings.buttonText + '</div>');
                    if (settings.buttonClass) $data.button.addClass(settings.buttonClass);

                    // Style the button wrapper
                    $data.button.css({
                        'height'      : settings.height,
                        'line-height' : settings.height + 'px', 
                        'overflow'    : 'hidden',
                        'position'    : 'relative',
                        'text-align'  : 'center', 
                        'width'       : settings.width
                    });

                    // Insert the button above the file input
                    $this.before($data.button)
                    // Add the file input to the button
                    .appendTo($data.button)
                    // Modify the styles of the file input
                    .hide();

                    // Create a new input
                    $data.createInput.call($this);

                    // Position the browse files button under the cursor
                    $data.button.mousemove(function(e) {
                        var offset = $data.button.offset();
                        $data.currentInput.css({
                           'left' : e.pageX - offset.left - $this.width() + 10,
                           'top'  : e.pageY - offset.top - $this.height() + 10
                        });
                    });

                    // Create the queue container
                    if (!settings.queueID) {
                        settings.queueID = settings.id + '-queue';
                        $data.queueEl = $('<div id="' + settings.queueID + '" class="uploadifive-queue" />');
                        $data.button.after($data.queueEl);
                    } else {
                        $data.queueEl = $('#' + settings.queueID);
                    }

                    // Add drag and drop functionality
                    if (settings.dnd) {
                        var $dropTarget = settings.dropTarget ? $(settings.dropTarget) : $data.queueEl.get(0);
                        $dropTarget.addEventListener('dragleave', function(e) {
                            // Stop FireFox from opening the dropped file(s)
                            e.preventDefault();
                            e.stopPropagation();
                        }, false);
                        $dropTarget.addEventListener('dragenter', function(e) {
                            // Stop FireFox from opening the dropped file(s)
                            e.preventDefault();
                            e.stopPropagation();
                        }, false);
                        $dropTarget.addEventListener('dragover', function(e) {
                            // Stop FireFox from opening the dropped file(s)
                            e.preventDefault();
                            e.stopPropagation();
                        }, false);
                        $dropTarget.addEventListener('drop', $data.drop, false);
                    }

                    // Send as binary workaround for Chrome
                    if (!XMLHttpRequest.prototype.sendAsBinary) {
                        XMLHttpRequest.prototype.sendAsBinary = function(datastr) {
                            function byteValue(x) {
                                return x.charCodeAt(0) & 0xff;
                            }
                            var ords = Array.prototype.map.call(datastr, byteValue);
                            var ui8a = new Uint8Array(ords);
                            this.send(ui8a.buffer);
                        }
                    }

                    // Trigger the oninit event
                    if (typeof settings.onInit === 'function') {
                        settings.onInit.call($this);
                    }

                } else {

                    // Trigger the fallback event
                    if (typeof settings.onFallback === 'function') {
                        settings.onFallback.call($this);
                    }
                    return false;

                }

            });

        },


        // Write some data to the console
        debug : function() {

            return this.each(function() {

                console.log($(this).data('uploadifive'));

            });

        },

        // Clear all the items from the queue
        clearQueue : function() {

            this.each(function() {

                var $this    = $(this),
                    $data    = $this.data('uploadifive'),
                    settings = $data.settings;

                for (var key in $data.inputs) {
                    input = $data.inputs[key];
                    limit = input.files.length;
                    for (i = 0; i < limit; i++) {
                        file = input.files[i];
                        methods.cancel.call($this, file);
                    }
                }
                // Trigger the onClearQueue event
                if (typeof settings.onClearQueue === 'function') {
                    settings.onClearQueue.call($this, $('#' + $data.options.queueID));
                }

            });

        },

        // Cancel a file upload in progress or remove a file from the queue
        cancel : function(file, fast) {

            this.each(function() {

                var $this    = $(this),
                    $data    = $this.data('uploadifive'),
                    settings = $data.settings;

                // If user passed a queue item ID instead of file...
                if (typeof file === 'string') {
                    if (!isNaN(file)) {
                        fileID = 'uploadifive-' + $(this).attr('id') + '-file-' + file;
                    }
                    file = $('#' + fileID).data('file');
                }

                file.skip = true;
                $data.filesCancelled++;
                if (file.uploading) {
                    $data.uploads.current--;
                    file.uploading = false;
                    file.xhr.abort();
                    delete file.xhr;
                    methods.upload.call($this);
                }
                if ($.inArray('onCancel', settings.overrideEvents) < 0) {
                    $data.removeQueueItem(file, fast);
                }

                // Trigger the cancel event
                if (typeof settings.onCancel === 'function') {
                    settings.onCancel.call($this, file);
                }
                
            });
            
        },

        // Upload the files in the queue
        upload : function(file, keepVars) {

            this.each(function() {

                var $this    = $(this),
                    $data    = $this.data('uploadifive'),
                    settings = $data.settings;

                if (file) {

                    $data.uploadFile.call($this, file);

                } else {

                    // Check if the upload limit was reached
                    if (($data.uploads.count + $data.uploads.current) < settings.uploadLimit || settings.uploadLimit == 0) {
                        if (!keepVars) {
                            $data.uploads.attempted   = 0;
                            $data.uploads.successsful = 0;
                            $data.uploads.errors      = 0;
                            var filesToUpload = $data.filesToUpload();
                            // Trigger the onUpload event
                            if (typeof settings.onUpload === 'function') {
                                settings.onUpload.call($this, filesToUpload);
                            }
                        }

                        // Loop through the files
                        $('#' + settings.queueID).find('.uploadifive-queue-item').not('.error, .complete').each(function() {
                            _file = $(this).data('file');
                            // Check if the simUpload limit was reached
                            if (($data.uploads.current >= settings.simUploadLimit && settings.simUploadLimit !== 0) || ($data.uploads.current >= settings.uploadLimit && settings.uploadLimit !== 0) || ($data.uploads.count >= settings.uploadLimit && settings.uploadLimit !== 0)) {
                                return false;
                            }
                            if (settings.checkScript) {
                                // Let the loop know that we're already processing this file
                                _file.checking = true;
                                skipFile = $data.checkExists(_file);
                                _file.checking = false;
                                if (!skipFile) {
                                    $data.uploadFile(_file, true);
                                }
                            } else {
                                $data.uploadFile(_file, true);
                            }
                        });
                        if ($('#' + settings.queueID).find('.uploadifive-queue-item').not('.error, .complete').size() == 0) {
                            $data.queueComplete();
                        }
                    } else {
                        if ($data.uploads.current == 0) {
                            if ($.inArray('onError', settings.overrideEvents) < 0) {
                                if ($data.filesToUpload() > 0 && settings.uploadLimit != 0) {
                                    alert('The maximum upload limit has been reached.');
                                }
                            }
                            // Trigger the onError event
                            if (typeof settings.onError === 'function') {
                                settings.onError.call($this, 'UPLOAD_LIMIT_EXCEEDED', $data.filesToUpload());
                            }
                        }
                    }

                }

            });

        },

        // Destroy an instance of UploadiFive
        destroy : function() {

            this.each(function() {

                var $this    = $(this),
                    $data    = $this.data('uploadifive'),
                    settings = $data.settings;
            
                // Clear the queue
                methods.clearQueue.call($this);
                // Destroy the queue if it was created
                if (!settings.queueID) $('#' + settings.queueID).remove();
                // Remove extra inputs
                $this.siblings('input').remove();
                // Show the original file input
                $this.show()
                // Move the file input out of the button
                .insertBefore($data.button);
                // Delete the button
                $data.button.remove();
                // Trigger the destroy event
                if (typeof settings.onDestroy === 'function') {
                    settings.onDestroy.call($this);
                }

            });

        }

    }

    $.fn.uploadifive = function(method) {

        if (methods[method]) {
            return methods[method].apply(this, Array.prototype.slice.call(arguments, 1));
        } else if (typeof method === 'object' || !method) {
            return methods.init.apply(this, arguments);
        } else {
            $.error('The method ' + method + ' does not exist in $.uploadify');
        }

    }

})(jQuery);

/* I gave the queueItems IDs and they each have a reference to the file held in the 'data' obj. */
} catch (err) {
    if (console && console.log && console.error) {
        console.log("Error running batched script.");
        console.error(err);
    }
}

;
;try {
/* module-key = 'com.benryan.confluence.attachments:attachments-section-resources', location = 'templates/extra/checkout/script/uploadify/jquery.uploadify-3.1.js' */
/*
SWFObject v2.2 <http://code.google.com/p/swfobject/> 
is released under the MIT License <http://www.opensource.org/licenses/mit-license.php> 
*/
;var swfobject=function(){var D="undefined",r="object",S="Shockwave Flash",W="ShockwaveFlash.ShockwaveFlash",q="application/x-shockwave-flash",R="SWFObjectExprInst",x="onreadystatechange",O=window,j=document,t=navigator,T=false,U=[h],o=[],N=[],I=[],l,Q,E,B,J=false,a=false,n,G,m=true,M=function(){var aa=typeof j.getElementById!=D&&typeof j.getElementsByTagName!=D&&typeof j.createElement!=D,ah=t.userAgent.toLowerCase(),Y=t.platform.toLowerCase(),ae=Y?/win/.test(Y):/win/.test(ah),ac=Y?/mac/.test(Y):/mac/.test(ah),af=/webkit/.test(ah)?parseFloat(ah.replace(/^.*webkit\/(\d+(\.\d+)?).*$/,"$1")):false,X=!+"\v1",ag=[0,0,0],ab=null;
if(typeof t.plugins!=D&&typeof t.plugins[S]==r){ab=t.plugins[S].description;if(ab&&!(typeof t.mimeTypes!=D&&t.mimeTypes[q]&&!t.mimeTypes[q].enabledPlugin)){T=true;
X=false;ab=ab.replace(/^.*\s+(\S+\s+\S+$)/,"$1");ag[0]=parseInt(ab.replace(/^(.*)\..*$/,"$1"),10);ag[1]=parseInt(ab.replace(/^.*\.(.*)\s.*$/,"$1"),10);
ag[2]=/[a-zA-Z]/.test(ab)?parseInt(ab.replace(/^.*[a-zA-Z]+(.*)$/,"$1"),10):0;}}else{if(typeof O.ActiveXObject!=D){try{var ad=new ActiveXObject(W);if(ad){ab=ad.GetVariable("$version");
if(ab){X=true;ab=ab.split(" ")[1].split(",");ag=[parseInt(ab[0],10),parseInt(ab[1],10),parseInt(ab[2],10)];}}}catch(Z){}}}return{w3:aa,pv:ag,wk:af,ie:X,win:ae,mac:ac};
}(),k=function(){if(!M.w3){return;}if((typeof j.readyState!=D&&j.readyState=="complete")||(typeof j.readyState==D&&(j.getElementsByTagName("body")[0]||j.body))){f();
}if(!J){if(typeof j.addEventListener!=D){j.addEventListener("DOMContentLoaded",f,false);}if(M.ie&&M.win){j.attachEvent(x,function(){if(j.readyState=="complete"){j.detachEvent(x,arguments.callee);
f();}});if(O==top){(function(){if(J){return;}try{j.documentElement.doScroll("left");}catch(X){setTimeout(arguments.callee,0);return;}f();})();}}if(M.wk){(function(){if(J){return;
}if(!/loaded|complete/.test(j.readyState)){setTimeout(arguments.callee,0);return;}f();})();}s(f);}}();function f(){if(J){return;}try{var Z=j.getElementsByTagName("body")[0].appendChild(C("span"));
Z.parentNode.removeChild(Z);}catch(aa){return;}J=true;var X=U.length;for(var Y=0;Y<X;Y++){U[Y]();}}function K(X){if(J){X();}else{U[U.length]=X;}}function s(Y){if(typeof O.addEventListener!=D){O.addEventListener("load",Y,false);
}else{if(typeof j.addEventListener!=D){j.addEventListener("load",Y,false);}else{if(typeof O.attachEvent!=D){i(O,"onload",Y);}else{if(typeof O.onload=="function"){var X=O.onload;
O.onload=function(){X();Y();};}else{O.onload=Y;}}}}}function h(){if(T){V();}else{H();}}function V(){var X=j.getElementsByTagName("body")[0];var aa=C(r);
aa.setAttribute("type",q);var Z=X.appendChild(aa);if(Z){var Y=0;(function(){if(typeof Z.GetVariable!=D){var ab=Z.GetVariable("$version");if(ab){ab=ab.split(" ")[1].split(",");
M.pv=[parseInt(ab[0],10),parseInt(ab[1],10),parseInt(ab[2],10)];}}else{if(Y<10){Y++;setTimeout(arguments.callee,10);return;}}X.removeChild(aa);Z=null;H();
})();}else{H();}}function H(){var ag=o.length;if(ag>0){for(var af=0;af<ag;af++){var Y=o[af].id;var ab=o[af].callbackFn;var aa={success:false,id:Y};if(M.pv[0]>0){var ae=c(Y);
if(ae){if(F(o[af].swfVersion)&&!(M.wk&&M.wk<312)){w(Y,true);if(ab){aa.success=true;aa.ref=z(Y);ab(aa);}}else{if(o[af].expressInstall&&A()){var ai={};ai.data=o[af].expressInstall;
ai.width=ae.getAttribute("width")||"0";ai.height=ae.getAttribute("height")||"0";if(ae.getAttribute("class")){ai.styleclass=ae.getAttribute("class");}if(ae.getAttribute("align")){ai.align=ae.getAttribute("align");
}var ah={};var X=ae.getElementsByTagName("param");var ac=X.length;for(var ad=0;ad<ac;ad++){if(X[ad].getAttribute("name").toLowerCase()!="movie"){ah[X[ad].getAttribute("name")]=X[ad].getAttribute("value");
}}P(ai,ah,Y,ab);}else{p(ae);if(ab){ab(aa);}}}}}else{w(Y,true);if(ab){var Z=z(Y);if(Z&&typeof Z.SetVariable!=D){aa.success=true;aa.ref=Z;}ab(aa);}}}}}function z(aa){var X=null;
var Y=c(aa);if(Y&&Y.nodeName=="OBJECT"){if(typeof Y.SetVariable!=D){X=Y;}else{var Z=Y.getElementsByTagName(r)[0];if(Z){X=Z;}}}return X;}function A(){return !a&&F("6.0.65")&&(M.win||M.mac)&&!(M.wk&&M.wk<312);
}function P(aa,ab,X,Z){a=true;E=Z||null;B={success:false,id:X};var ae=c(X);if(ae){if(ae.nodeName=="OBJECT"){l=g(ae);Q=null;}else{l=ae;Q=X;}aa.id=R;if(typeof aa.width==D||(!/%$/.test(aa.width)&&parseInt(aa.width,10)<310)){aa.width="310";
}if(typeof aa.height==D||(!/%$/.test(aa.height)&&parseInt(aa.height,10)<137)){aa.height="137";}j.title=j.title.slice(0,47)+" - Flash Player Installation";
var ad=M.ie&&M.win?"ActiveX":"PlugIn",ac="MMredirectURL="+O.location.toString().replace(/&/g,"%26")+"&MMplayerType="+ad+"&MMdoctitle="+j.title;if(typeof ab.flashvars!=D){ab.flashvars+="&"+ac;
}else{ab.flashvars=ac;}if(M.ie&&M.win&&ae.readyState!=4){var Y=C("div");X+="SWFObjectNew";Y.setAttribute("id",X);ae.parentNode.insertBefore(Y,ae);ae.style.display="none";
(function(){if(ae.readyState==4){ae.parentNode.removeChild(ae);}else{setTimeout(arguments.callee,10);}})();}u(aa,ab,X);}}function p(Y){if(M.ie&&M.win&&Y.readyState!=4){var X=C("div");
Y.parentNode.insertBefore(X,Y);X.parentNode.replaceChild(g(Y),X);Y.style.display="none";(function(){if(Y.readyState==4){Y.parentNode.removeChild(Y);}else{setTimeout(arguments.callee,10);
}})();}else{Y.parentNode.replaceChild(g(Y),Y);}}function g(ab){var aa=C("div");if(M.win&&M.ie){aa.innerHTML=ab.innerHTML;}else{var Y=ab.getElementsByTagName(r)[0];
if(Y){var ad=Y.childNodes;if(ad){var X=ad.length;for(var Z=0;Z<X;Z++){if(!(ad[Z].nodeType==1&&ad[Z].nodeName=="PARAM")&&!(ad[Z].nodeType==8)){aa.appendChild(ad[Z].cloneNode(true));
}}}}}return aa;}function u(ai,ag,Y){var X,aa=c(Y);if(M.wk&&M.wk<312){return X;}if(aa){if(typeof ai.id==D){ai.id=Y;}if(M.ie&&M.win){var ah="";for(var ae in ai){if(ai[ae]!=Object.prototype[ae]){if(ae.toLowerCase()=="data"){ag.movie=ai[ae];
}else{if(ae.toLowerCase()=="styleclass"){ah+=' class="'+ai[ae]+'"';}else{if(ae.toLowerCase()!="classid"){ah+=" "+ae+'="'+ai[ae]+'"';}}}}}var af="";for(var ad in ag){if(ag[ad]!=Object.prototype[ad]){af+='<param name="'+ad+'" value="'+ag[ad]+'" />';
}}aa.outerHTML='<object classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"'+ah+">"+af+"</object>";N[N.length]=ai.id;X=c(ai.id);}else{var Z=C(r);Z.setAttribute("type",q);
for(var ac in ai){if(ai[ac]!=Object.prototype[ac]){if(ac.toLowerCase()=="styleclass"){Z.setAttribute("class",ai[ac]);}else{if(ac.toLowerCase()!="classid"){Z.setAttribute(ac,ai[ac]);
}}}}for(var ab in ag){if(ag[ab]!=Object.prototype[ab]&&ab.toLowerCase()!="movie"){e(Z,ab,ag[ab]);}}aa.parentNode.replaceChild(Z,aa);X=Z;}}return X;}function e(Z,X,Y){var aa=C("param");
aa.setAttribute("name",X);aa.setAttribute("value",Y);Z.appendChild(aa);}function y(Y){var X=c(Y);if(X&&X.nodeName=="OBJECT"){if(M.ie&&M.win){X.style.display="none";
(function(){if(X.readyState==4){b(Y);}else{setTimeout(arguments.callee,10);}})();}else{X.parentNode.removeChild(X);}}}function b(Z){var Y=c(Z);if(Y){for(var X in Y){if(typeof Y[X]=="function"){Y[X]=null;
}}Y.parentNode.removeChild(Y);}}function c(Z){var X=null;try{X=j.getElementById(Z);}catch(Y){}return X;}function C(X){return j.createElement(X);}function i(Z,X,Y){Z.attachEvent(X,Y);
I[I.length]=[Z,X,Y];}function F(Z){var Y=M.pv,X=Z.split(".");X[0]=parseInt(X[0],10);X[1]=parseInt(X[1],10)||0;X[2]=parseInt(X[2],10)||0;return(Y[0]>X[0]||(Y[0]==X[0]&&Y[1]>X[1])||(Y[0]==X[0]&&Y[1]==X[1]&&Y[2]>=X[2]))?true:false;
}function v(ac,Y,ad,ab){if(M.ie&&M.mac){return;}var aa=j.getElementsByTagName("head")[0];if(!aa){return;}var X=(ad&&typeof ad=="string")?ad:"screen";if(ab){n=null;
G=null;}if(!n||G!=X){var Z=C("style");Z.setAttribute("type","text/css");Z.setAttribute("media",X);n=aa.appendChild(Z);if(M.ie&&M.win&&typeof j.styleSheets!=D&&j.styleSheets.length>0){n=j.styleSheets[j.styleSheets.length-1];
}G=X;}if(M.ie&&M.win){if(n&&typeof n.addRule==r){n.addRule(ac,Y);}}else{if(n&&typeof j.createTextNode!=D){n.appendChild(j.createTextNode(ac+" {"+Y+"}"));
}}}function w(Z,X){if(!m){return;}var Y=X?"visible":"hidden";if(J&&c(Z)){c(Z).style.visibility=Y;}else{v("#"+Z,"visibility:"+Y);}}function L(Y){var Z=/[\\\"<>\.;]/;
var X=Z.exec(Y)!=null;return X&&typeof encodeURIComponent!=D?encodeURIComponent(Y):Y;}var d=function(){if(M.ie&&M.win){window.attachEvent("onunload",function(){var ac=I.length;
for(var ab=0;ab<ac;ab++){I[ab][0].detachEvent(I[ab][1],I[ab][2]);}var Z=N.length;for(var aa=0;aa<Z;aa++){y(N[aa]);}for(var Y in M){M[Y]=null;}M=null;for(var X in swfobject){swfobject[X]=null;
}swfobject=null;});}}();return{registerObject:function(ab,X,aa,Z){if(M.w3&&ab&&X){var Y={};Y.id=ab;Y.swfVersion=X;Y.expressInstall=aa;Y.callbackFn=Z;o[o.length]=Y;
w(ab,false);}else{if(Z){Z({success:false,id:ab});}}},getObjectById:function(X){if(M.w3){return z(X);}},embedSWF:function(ab,ah,ae,ag,Y,aa,Z,ad,af,ac){var X={success:false,id:ah};
if(M.w3&&!(M.wk&&M.wk<312)&&ab&&ah&&ae&&ag&&Y){w(ah,false);K(function(){ae+="";ag+="";var aj={};if(af&&typeof af===r){for(var al in af){aj[al]=af[al];}}aj.data=ab;
aj.width=ae;aj.height=ag;var am={};if(ad&&typeof ad===r){for(var ak in ad){am[ak]=ad[ak];}}if(Z&&typeof Z===r){for(var ai in Z){if(typeof am.flashvars!=D){am.flashvars+="&"+ai+"="+Z[ai];
}else{am.flashvars=ai+"="+Z[ai];}}}if(F(Y)){var an=u(aj,am,ah);if(aj.id==ah){w(ah,true);}X.success=true;X.ref=an;}else{if(aa&&A()){aj.data=aa;P(aj,am,ah,ac);
return;}else{w(ah,true);}}if(ac){ac(X);}});}else{if(ac){ac(X);}}},switchOffAutoHideShow:function(){m=false;},ua:M,getFlashPlayerVersion:function(){return{major:M.pv[0],minor:M.pv[1],release:M.pv[2]};
},hasFlashPlayerVersion:F,createSWF:function(Z,Y,X){if(M.w3){return u(Z,Y,X);}else{return undefined;}},showExpressInstall:function(Z,aa,X,Y){if(M.w3&&A()){P(Z,aa,X,Y);
}},removeSWF:function(X){if(M.w3){y(X);}},createCSS:function(aa,Z,Y,X){if(M.w3){v(aa,Z,Y,X);}},addDomLoadEvent:K,addLoadEvent:s,getQueryParamValue:function(aa){var Z=j.location.search||j.location.hash;
if(Z){if(/\?/.test(Z)){Z=Z.split("?")[1];}if(aa==null){return L(Z);}var Y=Z.split("&");for(var X=0;X<Y.length;X++){if(Y[X].substring(0,Y[X].indexOf("="))==aa){return L(Y[X].substring((Y[X].indexOf("=")+1)));
}}}return"";},expressInstallCallback:function(){if(a){var X=c(R);if(X&&l){X.parentNode.replaceChild(l,X);if(Q){w(Q,true);if(M.ie&&M.win){l.style.display="block";
}}if(E){E(B);}}a=false;}}};}();

/*
SWFUpload: http://www.swfupload.org, http://swfupload.googlecode.com

mmSWFUpload 1.0: Flash upload dialog - http://profandesign.se/swfupload/,  http://www.vinterwebb.se/

SWFUpload is (c) 2006-2007 Lars Huring, Olov Nilzén and Mammon Media and is released under the MIT License:
http://www.opensource.org/licenses/mit-license.php
 
SWFUpload 2 is (c) 2007-2008 Jake Roberts and is released under the MIT License:
http://www.opensource.org/licenses/mit-license.php
*/

var SWFUpload;if(SWFUpload==undefined){SWFUpload=function(a){this.initSWFUpload(a)}}SWFUpload.prototype.initSWFUpload=function(b){try{this.customSettings={};this.settings=b;this.eventQueue=[];this.movieName="SWFUpload_"+SWFUpload.movieCount++;this.movieElement=null;SWFUpload.instances[this.movieName]=this;this.initSettings();this.loadFlash();this.displayDebugInfo()}catch(a){delete SWFUpload.instances[this.movieName];throw a}};SWFUpload.instances={};SWFUpload.movieCount=0;SWFUpload.version="2.2.0 2009-03-25";SWFUpload.QUEUE_ERROR={QUEUE_LIMIT_EXCEEDED:-100,FILE_EXCEEDS_SIZE_LIMIT:-110,ZERO_BYTE_FILE:-120,INVALID_FILETYPE:-130};SWFUpload.UPLOAD_ERROR={HTTP_ERROR:-200,MISSING_UPLOAD_URL:-210,IO_ERROR:-220,SECURITY_ERROR:-230,UPLOAD_LIMIT_EXCEEDED:-240,UPLOAD_FAILED:-250,SPECIFIED_FILE_ID_NOT_FOUND:-260,FILE_VALIDATION_FAILED:-270,FILE_CANCELLED:-280,UPLOAD_STOPPED:-290};SWFUpload.FILE_STATUS={QUEUED:-1,IN_PROGRESS:-2,ERROR:-3,COMPLETE:-4,CANCELLED:-5};SWFUpload.BUTTON_ACTION={SELECT_FILE:-100,SELECT_FILES:-110,START_UPLOAD:-120};SWFUpload.CURSOR={ARROW:-1,HAND:-2};SWFUpload.WINDOW_MODE={WINDOW:"window",TRANSPARENT:"transparent",OPAQUE:"opaque"};SWFUpload.completeURL=function(a){if(typeof(a)!=="string"||a.match(/^https?:\/\//i)||a.match(/^\//)){return a}var c=window.location.protocol+"//"+window.location.hostname+(window.location.port?":"+window.location.port:"");var b=window.location.pathname.lastIndexOf("/");if(b<=0){path="/"}else{path=window.location.pathname.substr(0,b)+"/"}return path+a};SWFUpload.prototype.initSettings=function(){this.ensureDefault=function(b,a){this.settings[b]=(this.settings[b]==undefined)?a:this.settings[b]};this.ensureDefault("upload_url","");this.ensureDefault("preserve_relative_urls",false);this.ensureDefault("file_post_name","Filedata");this.ensureDefault("post_params",{});this.ensureDefault("use_query_string",false);this.ensureDefault("requeue_on_error",false);this.ensureDefault("http_success",[]);this.ensureDefault("assume_success_timeout",0);this.ensureDefault("file_types","*.*");this.ensureDefault("file_types_description","All Files");this.ensureDefault("file_size_limit",0);this.ensureDefault("file_upload_limit",0);this.ensureDefault("file_queue_limit",0);this.ensureDefault("flash_url","swfupload.swf");this.ensureDefault("prevent_swf_caching",true);this.ensureDefault("button_image_url","");this.ensureDefault("button_width",1);this.ensureDefault("button_height",1);this.ensureDefault("button_text","");this.ensureDefault("button_text_style","color: #000000; font-size: 16pt;");this.ensureDefault("button_text_top_padding",0);this.ensureDefault("button_text_left_padding",0);this.ensureDefault("button_action",SWFUpload.BUTTON_ACTION.SELECT_FILES);this.ensureDefault("button_disabled",false);this.ensureDefault("button_placeholder_id","");this.ensureDefault("button_placeholder",null);this.ensureDefault("button_cursor",SWFUpload.CURSOR.ARROW);this.ensureDefault("button_window_mode",SWFUpload.WINDOW_MODE.WINDOW);this.ensureDefault("debug",false);this.settings.debug_enabled=this.settings.debug;this.settings.return_upload_start_handler=this.returnUploadStart;this.ensureDefault("swfupload_loaded_handler",null);this.ensureDefault("file_dialog_start_handler",null);this.ensureDefault("file_queued_handler",null);this.ensureDefault("file_queue_error_handler",null);this.ensureDefault("file_dialog_complete_handler",null);this.ensureDefault("upload_start_handler",null);this.ensureDefault("upload_progress_handler",null);this.ensureDefault("upload_error_handler",null);this.ensureDefault("upload_success_handler",null);this.ensureDefault("upload_complete_handler",null);this.ensureDefault("debug_handler",this.debugMessage);this.ensureDefault("custom_settings",{});this.customSettings=this.settings.custom_settings;if(!!this.settings.prevent_swf_caching){this.settings.flash_url=this.settings.flash_url+(this.settings.flash_url.indexOf("?")<0?"?":"&")+"preventswfcaching="+new Date().getTime()}if(!this.settings.preserve_relative_urls){this.settings.upload_url=SWFUpload.completeURL(this.settings.upload_url);this.settings.button_image_url=SWFUpload.completeURL(this.settings.button_image_url)}delete this.ensureDefault};SWFUpload.prototype.loadFlash=function(){var a,b;if(document.getElementById(this.movieName)!==null){throw"ID "+this.movieName+" is already in use. The Flash Object could not be added"}a=document.getElementById(this.settings.button_placeholder_id)||this.settings.button_placeholder;if(a==undefined){throw"Could not find the placeholder element: "+this.settings.button_placeholder_id}b=document.createElement("div");b.innerHTML=this.getFlashHTML();a.parentNode.replaceChild(b.firstChild,a);if(window[this.movieName]==undefined){window[this.movieName]=this.getMovieElement()}};SWFUpload.prototype.getFlashHTML=function(){return['<object id="',this.movieName,'" type="application/x-shockwave-flash" data="',this.settings.flash_url,'" width="',this.settings.button_width,'" height="',this.settings.button_height,'" class="swfupload">','<param name="wmode" value="',this.settings.button_window_mode,'" />','<param name="movie" value="',this.settings.flash_url,'" />','<param name="quality" value="high" />','<param name="menu" value="false" />','<param name="allowScriptAccess" value="always" />','<param name="flashvars" value="'+this.getFlashVars()+'" />',"</object>"].join("")};SWFUpload.prototype.getFlashVars=function(){var b=this.buildParamString();var a=this.settings.http_success.join(",");return["movieName=",encodeURIComponent(this.movieName),"&amp;uploadURL=",encodeURIComponent(this.settings.upload_url),"&amp;useQueryString=",encodeURIComponent(this.settings.use_query_string),"&amp;requeueOnError=",encodeURIComponent(this.settings.requeue_on_error),"&amp;httpSuccess=",encodeURIComponent(a),"&amp;assumeSuccessTimeout=",encodeURIComponent(this.settings.assume_success_timeout),"&amp;params=",encodeURIComponent(b),"&amp;filePostName=",encodeURIComponent(this.settings.file_post_name),"&amp;fileTypes=",encodeURIComponent(this.settings.file_types),"&amp;fileTypesDescription=",encodeURIComponent(this.settings.file_types_description),"&amp;fileSizeLimit=",encodeURIComponent(this.settings.file_size_limit),"&amp;fileUploadLimit=",encodeURIComponent(this.settings.file_upload_limit),"&amp;fileQueueLimit=",encodeURIComponent(this.settings.file_queue_limit),"&amp;debugEnabled=",encodeURIComponent(this.settings.debug_enabled),"&amp;buttonImageURL=",encodeURIComponent(this.settings.button_image_url),"&amp;buttonWidth=",encodeURIComponent(this.settings.button_width),"&amp;buttonHeight=",encodeURIComponent(this.settings.button_height),"&amp;buttonText=",encodeURIComponent(this.settings.button_text),"&amp;buttonTextTopPadding=",encodeURIComponent(this.settings.button_text_top_padding),"&amp;buttonTextLeftPadding=",encodeURIComponent(this.settings.button_text_left_padding),"&amp;buttonTextStyle=",encodeURIComponent(this.settings.button_text_style),"&amp;buttonAction=",encodeURIComponent(this.settings.button_action),"&amp;buttonDisabled=",encodeURIComponent(this.settings.button_disabled),"&amp;buttonCursor=",encodeURIComponent(this.settings.button_cursor)].join("")};SWFUpload.prototype.getMovieElement=function(){if(this.movieElement==undefined){this.movieElement=document.getElementById(this.movieName)}if(this.movieElement===null){throw"Could not find Flash element"}return this.movieElement};SWFUpload.prototype.buildParamString=function(){var c=this.settings.post_params;var b=[];if(typeof(c)==="object"){for(var a in c){if(c.hasOwnProperty(a)){b.push(encodeURIComponent(a.toString())+"="+encodeURIComponent(c[a].toString()))}}}return b.join("&amp;")};SWFUpload.prototype.destroy=function(){try{this.cancelUpload(null,false);var a=null;a=this.getMovieElement();if(a&&typeof(a.CallFunction)==="unknown"){for(var c in a){try{if(typeof(a[c])==="function"){a[c]=null}}catch(e){}}try{a.parentNode.removeChild(a)}catch(b){}}window[this.movieName]=null;SWFUpload.instances[this.movieName]=null;delete SWFUpload.instances[this.movieName];this.movieElement=null;this.settings=null;this.customSettings=null;this.eventQueue=null;this.movieName=null;return true}catch(d){return false}};SWFUpload.prototype.displayDebugInfo=function(){this.debug(["---SWFUpload Instance Info---\n","Version: ",SWFUpload.version,"\n","Movie Name: ",this.movieName,"\n","Settings:\n","\t","upload_url:               ",this.settings.upload_url,"\n","\t","flash_url:                ",this.settings.flash_url,"\n","\t","use_query_string:         ",this.settings.use_query_string.toString(),"\n","\t","requeue_on_error:         ",this.settings.requeue_on_error.toString(),"\n","\t","http_success:             ",this.settings.http_success.join(", "),"\n","\t","assume_success_timeout:   ",this.settings.assume_success_timeout,"\n","\t","file_post_name:           ",this.settings.file_post_name,"\n","\t","post_params:              ",this.settings.post_params.toString(),"\n","\t","file_types:               ",this.settings.file_types,"\n","\t","file_types_description:   ",this.settings.file_types_description,"\n","\t","file_size_limit:          ",this.settings.file_size_limit,"\n","\t","file_upload_limit:        ",this.settings.file_upload_limit,"\n","\t","file_queue_limit:         ",this.settings.file_queue_limit,"\n","\t","debug:                    ",this.settings.debug.toString(),"\n","\t","prevent_swf_caching:      ",this.settings.prevent_swf_caching.toString(),"\n","\t","button_placeholder_id:    ",this.settings.button_placeholder_id.toString(),"\n","\t","button_placeholder:       ",(this.settings.button_placeholder?"Set":"Not Set"),"\n","\t","button_image_url:         ",this.settings.button_image_url.toString(),"\n","\t","button_width:             ",this.settings.button_width.toString(),"\n","\t","button_height:            ",this.settings.button_height.toString(),"\n","\t","button_text:              ",this.settings.button_text.toString(),"\n","\t","button_text_style:        ",this.settings.button_text_style.toString(),"\n","\t","button_text_top_padding:  ",this.settings.button_text_top_padding.toString(),"\n","\t","button_text_left_padding: ",this.settings.button_text_left_padding.toString(),"\n","\t","button_action:            ",this.settings.button_action.toString(),"\n","\t","button_disabled:          ",this.settings.button_disabled.toString(),"\n","\t","custom_settings:          ",this.settings.custom_settings.toString(),"\n","Event Handlers:\n","\t","swfupload_loaded_handler assigned:  ",(typeof this.settings.swfupload_loaded_handler==="function").toString(),"\n","\t","file_dialog_start_handler assigned: ",(typeof this.settings.file_dialog_start_handler==="function").toString(),"\n","\t","file_queued_handler assigned:       ",(typeof this.settings.file_queued_handler==="function").toString(),"\n","\t","file_queue_error_handler assigned:  ",(typeof this.settings.file_queue_error_handler==="function").toString(),"\n","\t","upload_start_handler assigned:      ",(typeof this.settings.upload_start_handler==="function").toString(),"\n","\t","upload_progress_handler assigned:   ",(typeof this.settings.upload_progress_handler==="function").toString(),"\n","\t","upload_error_handler assigned:      ",(typeof this.settings.upload_error_handler==="function").toString(),"\n","\t","upload_success_handler assigned:    ",(typeof this.settings.upload_success_handler==="function").toString(),"\n","\t","upload_complete_handler assigned:   ",(typeof this.settings.upload_complete_handler==="function").toString(),"\n","\t","debug_handler assigned:             ",(typeof this.settings.debug_handler==="function").toString(),"\n"].join(""))};SWFUpload.prototype.addSetting=function(b,c,a){if(c==undefined){return(this.settings[b]=a)}else{return(this.settings[b]=c)}};SWFUpload.prototype.getSetting=function(a){if(this.settings[a]!=undefined){return this.settings[a]}return""};SWFUpload.prototype.callFlash=function(functionName,argumentArray){argumentArray=argumentArray||[];var movieElement=this.getMovieElement();var returnValue,returnString;try{returnString=movieElement.CallFunction('<invoke name="'+functionName+'" returntype="javascript">'+__flash__argumentsToXML(argumentArray,0)+"</invoke>");returnValue=eval(returnString)}catch(ex){throw"Call to "+functionName+" failed"}if(returnValue!=undefined&&typeof returnValue.post==="object"){returnValue=this.unescapeFilePostParams(returnValue)}return returnValue};SWFUpload.prototype.selectFile=function(){this.callFlash("SelectFile")};SWFUpload.prototype.selectFiles=function(){this.callFlash("SelectFiles")};SWFUpload.prototype.startUpload=function(a){this.callFlash("StartUpload",[a])};SWFUpload.prototype.cancelUpload=function(a,b){if(b!==false){b=true}this.callFlash("CancelUpload",[a,b])};SWFUpload.prototype.stopUpload=function(){this.callFlash("StopUpload")};SWFUpload.prototype.getStats=function(){return this.callFlash("GetStats")};SWFUpload.prototype.setStats=function(a){this.callFlash("SetStats",[a])};SWFUpload.prototype.getFile=function(a){if(typeof(a)==="number"){return this.callFlash("GetFileByIndex",[a])}else{return this.callFlash("GetFile",[a])}};SWFUpload.prototype.addFileParam=function(a,b,c){return this.callFlash("AddFileParam",[a,b,c])};SWFUpload.prototype.removeFileParam=function(a,b){this.callFlash("RemoveFileParam",[a,b])};SWFUpload.prototype.setUploadURL=function(a){this.settings.upload_url=a.toString();this.callFlash("SetUploadURL",[a])};SWFUpload.prototype.setPostParams=function(a){this.settings.post_params=a;this.callFlash("SetPostParams",[a])};SWFUpload.prototype.addPostParam=function(a,b){this.settings.post_params[a]=b;this.callFlash("SetPostParams",[this.settings.post_params])};SWFUpload.prototype.removePostParam=function(a){delete this.settings.post_params[a];this.callFlash("SetPostParams",[this.settings.post_params])};SWFUpload.prototype.setFileTypes=function(a,b){this.settings.file_types=a;this.settings.file_types_description=b;this.callFlash("SetFileTypes",[a,b])};SWFUpload.prototype.setFileSizeLimit=function(a){this.settings.file_size_limit=a;this.callFlash("SetFileSizeLimit",[a])};SWFUpload.prototype.setFileUploadLimit=function(a){this.settings.file_upload_limit=a;this.callFlash("SetFileUploadLimit",[a])};SWFUpload.prototype.setFileQueueLimit=function(a){this.settings.file_queue_limit=a;this.callFlash("SetFileQueueLimit",[a])};SWFUpload.prototype.setFilePostName=function(a){this.settings.file_post_name=a;this.callFlash("SetFilePostName",[a])};SWFUpload.prototype.setUseQueryString=function(a){this.settings.use_query_string=a;this.callFlash("SetUseQueryString",[a])};SWFUpload.prototype.setRequeueOnError=function(a){this.settings.requeue_on_error=a;this.callFlash("SetRequeueOnError",[a])};SWFUpload.prototype.setHTTPSuccess=function(a){if(typeof a==="string"){a=a.replace(" ","").split(",")}this.settings.http_success=a;this.callFlash("SetHTTPSuccess",[a])};SWFUpload.prototype.setAssumeSuccessTimeout=function(a){this.settings.assume_success_timeout=a;this.callFlash("SetAssumeSuccessTimeout",[a])};SWFUpload.prototype.setDebugEnabled=function(a){this.settings.debug_enabled=a;this.callFlash("SetDebugEnabled",[a])};SWFUpload.prototype.setButtonImageURL=function(a){if(a==undefined){a=""}this.settings.button_image_url=a;this.callFlash("SetButtonImageURL",[a])};SWFUpload.prototype.setButtonDimensions=function(c,a){this.settings.button_width=c;this.settings.button_height=a;var b=this.getMovieElement();if(b!=undefined){b.style.width=c+"px";b.style.height=a+"px"}this.callFlash("SetButtonDimensions",[c,a])};SWFUpload.prototype.setButtonText=function(a){this.settings.button_text=a;this.callFlash("SetButtonText",[a])};SWFUpload.prototype.setButtonTextPadding=function(b,a){this.settings.button_text_top_padding=a;this.settings.button_text_left_padding=b;this.callFlash("SetButtonTextPadding",[b,a])};SWFUpload.prototype.setButtonTextStyle=function(a){this.settings.button_text_style=a;this.callFlash("SetButtonTextStyle",[a])};SWFUpload.prototype.setButtonDisabled=function(a){this.settings.button_disabled=a;this.callFlash("SetButtonDisabled",[a])};SWFUpload.prototype.setButtonAction=function(a){this.settings.button_action=a;this.callFlash("SetButtonAction",[a])};SWFUpload.prototype.setButtonCursor=function(a){this.settings.button_cursor=a;this.callFlash("SetButtonCursor",[a])};SWFUpload.prototype.queueEvent=function(b,c){if(c==undefined){c=[]}else{if(!(c instanceof Array)){c=[c]}}var a=this;if(typeof this.settings[b]==="function"){this.eventQueue.push(function(){this.settings[b].apply(this,c)});setTimeout(function(){a.executeNextEvent()},0)}else{if(this.settings[b]!==null){throw"Event handler "+b+" is unknown or is not a function"}}};SWFUpload.prototype.executeNextEvent=function(){var a=this.eventQueue?this.eventQueue.shift():null;if(typeof(a)==="function"){a.apply(this)}};SWFUpload.prototype.unescapeFilePostParams=function(c){var e=/[$]([0-9a-f]{4})/i;var f={};var d;if(c!=undefined){for(var a in c.post){if(c.post.hasOwnProperty(a)){d=a;var b;while((b=e.exec(d))!==null){d=d.replace(b[0],String.fromCharCode(parseInt("0x"+b[1],16)))}f[d]=c.post[a]}}c.post=f}return c};SWFUpload.prototype.testExternalInterface=function(){try{return this.callFlash("TestExternalInterface")}catch(a){return false}};SWFUpload.prototype.flashReady=function(){var a=this.getMovieElement();if(!a){this.debug("Flash called back ready but the flash movie can't be found.");return}this.cleanUp(a);this.queueEvent("swfupload_loaded_handler")};SWFUpload.prototype.cleanUp=function(a){try{if(this.movieElement&&typeof(a.CallFunction)==="unknown"){this.debug("Removing Flash functions hooks (this should only run in IE and should prevent memory leaks)");for(var c in a){try{if(typeof(a[c])==="function"){a[c]=null}}catch(b){}}}}catch(d){}window.__flash__removeCallback=function(e,f){try{if(e){e[f]=null}}catch(g){}}};SWFUpload.prototype.fileDialogStart=function(){this.queueEvent("file_dialog_start_handler")};SWFUpload.prototype.fileQueued=function(a){a=this.unescapeFilePostParams(a);this.queueEvent("file_queued_handler",a)};SWFUpload.prototype.fileQueueError=function(a,c,b){a=this.unescapeFilePostParams(a);this.queueEvent("file_queue_error_handler",[a,c,b])};SWFUpload.prototype.fileDialogComplete=function(b,c,a){this.queueEvent("file_dialog_complete_handler",[b,c,a])};SWFUpload.prototype.uploadStart=function(a){a=this.unescapeFilePostParams(a);this.queueEvent("return_upload_start_handler",a)};SWFUpload.prototype.returnUploadStart=function(a){var b;if(typeof this.settings.upload_start_handler==="function"){a=this.unescapeFilePostParams(a);b=this.settings.upload_start_handler.call(this,a)}else{if(this.settings.upload_start_handler!=undefined){throw"upload_start_handler must be a function"}}if(b===undefined){b=true}b=!!b;this.callFlash("ReturnUploadStart",[b])};SWFUpload.prototype.uploadProgress=function(a,c,b){a=this.unescapeFilePostParams(a);this.queueEvent("upload_progress_handler",[a,c,b])};SWFUpload.prototype.uploadError=function(a,c,b){a=this.unescapeFilePostParams(a);this.queueEvent("upload_error_handler",[a,c,b])};SWFUpload.prototype.uploadSuccess=function(b,a,c){b=this.unescapeFilePostParams(b);this.queueEvent("upload_success_handler",[b,a,c])};SWFUpload.prototype.uploadComplete=function(a){a=this.unescapeFilePostParams(a);this.queueEvent("upload_complete_handler",a)};SWFUpload.prototype.debug=function(a){this.queueEvent("debug_handler",a)};SWFUpload.prototype.debugMessage=function(c){if(this.settings.debug){var a,d=[];if(typeof c==="object"&&typeof c.name==="string"&&typeof c.message==="string"){for(var b in c){if(c.hasOwnProperty(b)){d.push(b+": "+c[b])}}a=d.join("\n")||"";d=a.split("\n");a="EXCEPTION: "+d.join("\nEXCEPTION: ");SWFUpload.Console.writeLine(a)}else{SWFUpload.Console.writeLine(c)}}};SWFUpload.Console={};SWFUpload.Console.writeLine=function(d){var b,a;try{b=document.getElementById("SWFUpload_Console");if(!b){a=document.createElement("form");document.getElementsByTagName("body")[0].appendChild(a);b=document.createElement("textarea");b.id="SWFUpload_Console";b.style.fontFamily="monospace";b.setAttribute("wrap","off");b.wrap="off";b.style.overflow="auto";b.style.width="700px";b.style.height="350px";b.style.margin="5px";a.appendChild(b)}b.value+=d+"\n";b.scrollTop=b.scrollHeight-b.clientHeight}catch(c){alert("Exception: "+c.name+" Message: "+c.message)}};

/*
Uploadify v3.1.1
Copyright (c) 2012 Reactive Apps, Ronnie Garcia
Released under the MIT License <http://www.opensource.org/licenses/mit-license.php> 
*/

(function($) {

	// These methods can be called by adding them as the first argument in the uploadify plugin call
	var methods = {

		init : function(options, swfUploadOptions) {
			
			return this.each(function() {

				// Create a reference to the jQuery DOM object
				var $this = $(this);

				// Clone the original DOM object
				var $clone = $this.clone();

				// Setup the default options
				var settings = $.extend({
					// Required Settings
					id       : $this.attr('id'), // The ID of the DOM object
					swf      : 'uploadify.swf',  // The path to the uploadify SWF file
					uploader : 'uploadify.php',  // The path to the server-side upload script
					
					// Options
					auto            : true,               // Automatically upload files when added to the queue
					buttonClass     : '',                 // A class name to add to the browse button DOM object
					buttonCursor    : 'hand',             // The cursor to use with the browse button
					buttonImage     : null,               // (String or null) The path to an image to use for the Flash browse button if not using CSS to style the button
					buttonText      : 'SELECT FILES',     // The text to use for the browse button
					checkExisting   : false,              // The path to a server-side script that checks for existing files on the server
					debug           : false,              // Turn on swfUpload debugging mode
					fileObjName     : 'Filedata',         // The name of the file object to use in your server-side script
					fileSizeLimit   : 0,                  // The maximum size of an uploadable file in KB (Accepts units B KB MB GB if string, 0 for no limit)
					fileTypeDesc    : 'All Files',        // The description for file types in the browse dialog
					fileTypeExts    : '*.*',              // Allowed extensions in the browse dialog (server-side validation should also be used)
					height          : 30,                 // The height of the browse button
					method          : 'post',             // The method to use when sending files to the server-side upload script
					multi           : true,               // Allow multiple file selection in the browse dialog
					formData        : {},                 // An object with additional data to send to the server-side upload script with every file upload
					preventCaching  : true,               // Adds a random value to the Flash URL to prevent caching of it (conflicts with existing parameters)
					progressData    : 'percentage',       // ('percentage' or 'speed') Data to show in the queue item during a file upload
					queueID         : false,              // The ID of the DOM object to use as a file queue (without the #)
					queueSizeLimit  : 999,                // The maximum number of files that can be in the queue at one time
					removeCompleted : true,               // Remove queue items from the queue when they are done uploading
					removeTimeout   : 3,                  // The delay in seconds before removing a queue item if removeCompleted is set to true
					requeueErrors   : false,              // Keep errored files in the queue and keep trying to upload them
					successTimeout  : 30,                 // The number of seconds to wait for Flash to detect the server's response after the file has finished uploading
					uploadLimit     : 0,                  // The maximum number of files you can upload
					width           : 120,                // The width of the browse button
					
					// Events
					overrideEvents   : []             // (Array) A list of default event handlers to skip
					/*
					onCancel         // Triggered when a file is cancelled from the queue
					onClearQueue     // Triggered during the 'clear queue' method
					onDestroy        // Triggered when the uploadify object is destroyed
					onDialogClose    // Triggered when the browse dialog is closed
					onDialogOpen     // Triggered when the browse dialog is opened
					onDisable        // Triggered when the browse button gets disabled
					onEnable         // Triggered when the browse button gets enabled
					onFallback       // Triggered is Flash is not detected    
					onInit           // Triggered when Uploadify is initialized
					onQueueComplete  // Triggered when all files in the queue have been uploaded
					onSelectError    // Triggered when an error occurs while selecting a file (file size, queue size limit, etc.)
					onSelect         // Triggered for each file that is selected
					onSWFReady       // Triggered when the SWF button is loaded
					onUploadComplete // Triggered when a file upload completes (success or error)
					onUploadError    // Triggered when a file upload returns an error
					onUploadSuccess  // Triggered when a file is uploaded successfully
					onUploadProgress // Triggered every time a file progress is updated
					onUploadStart    // Triggered immediately before a file upload starts
					*/
				}, options);

				// Prepare settings for SWFUpload
				var swfUploadSettings = {
					assume_success_timeout   : settings.successTimeout,
					button_placeholder_id    : settings.id,
					button_width             : settings.width,
					button_height            : settings.height,
					button_text              : null,
					button_text_style        : null,
					button_text_top_padding  : 0,
					button_text_left_padding : 0,
					button_action            : (settings.multi ? SWFUpload.BUTTON_ACTION.SELECT_FILES : SWFUpload.BUTTON_ACTION.SELECT_FILE),
					button_disabled          : false,
					button_cursor            : (settings.buttonCursor == 'arrow' ? SWFUpload.CURSOR.ARROW : SWFUpload.CURSOR.HAND),
					button_window_mode       : SWFUpload.WINDOW_MODE.TRANSPARENT,
					debug                    : settings.debug,						
					requeue_on_error         : settings.requeueErrors,
					file_post_name           : settings.fileObjName,
					file_size_limit          : settings.fileSizeLimit,
					file_types               : settings.fileTypeExts,
					file_types_description   : settings.fileTypeDesc,
					file_queue_limit         : settings.queueSizeLimit,
					file_upload_limit        : settings.uploadLimit,
					flash_url                : settings.swf,					
					prevent_swf_caching      : settings.preventCaching,
					post_params              : settings.formData,
					upload_url               : settings.uploader,
					use_query_string         : (settings.method == 'get'),
					
					// Event Handlers 
					file_dialog_complete_handler : handlers.onDialogClose,
					file_dialog_start_handler    : handlers.onDialogOpen,
					file_queued_handler          : handlers.onSelect,
					file_queue_error_handler     : handlers.onSelectError,
					swfupload_loaded_handler     : settings.onSWFReady,
					upload_complete_handler      : handlers.onUploadComplete,
					upload_error_handler         : handlers.onUploadError,
					upload_progress_handler      : handlers.onUploadProgress,
					upload_start_handler         : handlers.onUploadStart,
					upload_success_handler       : handlers.onUploadSuccess
				}

				// Merge the user-defined options with the defaults
				if (swfUploadOptions) {
					swfUploadSettings = $.extend(swfUploadSettings, swfUploadOptions);
				}
				// Add the user-defined settings to the swfupload object
				swfUploadSettings = $.extend(swfUploadSettings, settings);
				
				// Detect if Flash is available
				var playerVersion  = swfobject.getFlashPlayerVersion();
				var flashInstalled = (playerVersion.major >= 9);

				if (flashInstalled) {
					// Create the swfUpload instance
					window['uploadify_' + settings.id] = new SWFUpload(swfUploadSettings);
					var swfuploadify = window['uploadify_' + settings.id];

					// Add the SWFUpload object to the elements data object
					$this.data('uploadify', swfuploadify);
					
					// Wrap the instance
					var $wrapper = $('<div />', {
						'id'    : settings.id,
						'class' : 'uploadify',
						'css'   : {
									'height'   : settings.height + 'px',
									'width'    : settings.width + 'px'
								  }
					});
					$('#' + swfuploadify.movieName).wrap($wrapper);
					// Recreate the reference to wrapper
					$wrapper = $('#' + settings.id);
					// Add the data object to the wrapper 
					$wrapper.data('uploadify', swfuploadify);

					// Create the button
					var $button = $('<div />', {
						'id'    : settings.id + '-button',
						'class' : 'uploadify-button ' + settings.buttonClass
					});
					if (settings.buttonImage) {
						$button.css({
							'background-image' : "url('" + settings.buttonImage + "')",
							'text-indent'      : '-9999px'
						});
					}
					$button.html('<span class="uploadify-button-text">' + settings.buttonText + '</span>')
					.css({
						'height'      : settings.height + 'px',
						'line-height' : settings.height + 'px',
						'width'       : settings.width + 'px'
					});
					// Append the button to the wrapper
					$wrapper.append($button);

					// Adjust the styles of the movie
					$('#' + swfuploadify.movieName).css({
						'position' : 'absolute',
						'z-index'  : 1
					});
					
					// Create the file queue
					if (!settings.queueID) {
						var $queue = $('<div />', {
							'id'    : settings.id + '-queue',
							'class' : 'uploadify-queue'
						});
						$wrapper.after($queue);
						swfuploadify.settings.queueID      = settings.id + '-queue';
						swfuploadify.settings.defaultQueue = true;
					}
					
					// Create some queue related objects and variables
					swfuploadify.queueData = {
						files              : {}, // The files in the queue
						filesSelected      : 0, // The number of files selected in the last select operation
						filesQueued        : 0, // The number of files added to the queue in the last select operation
						filesReplaced      : 0, // The number of files replaced in the last select operation
						filesCancelled     : 0, // The number of files that were cancelled instead of replaced
						filesErrored       : 0, // The number of files that caused error in the last select operation
						uploadsSuccessful  : 0, // The number of files that were successfully uploaded
						uploadsErrored     : 0, // The number of files that returned errors during upload
						averageSpeed       : 0, // The average speed of the uploads in KB
						queueLength        : 0, // The number of files in the queue
						queueSize          : 0, // The size in bytes of the entire queue
						uploadSize         : 0, // The size in bytes of the upload queue
						queueBytesUploaded : 0, // The size in bytes that have been uploaded for the current upload queue
						uploadQueue        : [], // The files currently to be uploaded
						errorMsg           : 'Some files were not added to the queue:'
					};

					// Save references to all the objects
					swfuploadify.original = $clone;
					swfuploadify.wrapper  = $wrapper;
					swfuploadify.button   = $button;
					swfuploadify.queue    = $queue;

					// Call the user-defined init event handler
					if (settings.onInit) settings.onInit.call($this, swfuploadify);

				} else {

					// Call the fallback function
					if (settings.onFallback) settings.onFallback.call($this);

				}
			});

		},

		// Stop a file upload and remove it from the queue 
		cancel : function(fileID, supressEvent) {

			var args = arguments;

			this.each(function() {
				// Create a reference to the jQuery DOM object
				var $this        = $(this),
					swfuploadify = $this.data('uploadify'),
					settings     = swfuploadify.settings,
					delay        = -1;

				if (args[0]) {
					// Clear the queue
					if (args[0] == '*') {
						var queueItemCount = swfuploadify.queueData.queueLength;
						$('#' + settings.queueID).find('.uploadify-queue-item').each(function() {
							delay++;
							if (args[1] === true) {
								swfuploadify.cancelUpload($(this).attr('id'), false);
							} else {
								swfuploadify.cancelUpload($(this).attr('id'));
							}
							$(this).find('.data').removeClass('data').html(' - Cancelled');
							$(this).find('.uploadify-progress-bar').remove();
							$(this).delay(1000 + 100 * delay).fadeOut(500, function() {
								$(this).remove();
							});
						});
						swfuploadify.queueData.queueSize   = 0;
						swfuploadify.queueData.queueLength = 0;
						// Trigger the onClearQueue event
						if (settings.onClearQueue) settings.onClearQueue.call($this, queueItemCount);
					} else {
						for (var n = 0; n < args.length; n++) {
							swfuploadify.cancelUpload(args[n]);
							$('#' + args[n]).find('.data').removeClass('data').html(' - Cancelled');
							$('#' + args[n]).find('.uploadify-progress-bar').remove();
							$('#' + args[n]).delay(1000 + 100 * n).fadeOut(500, function() {
								$(this).remove();
							});
						}
					}
				} else {
					var item = $('#' + settings.queueID).find('.uploadify-queue-item').get(0);
					$item = $(item);
					swfuploadify.cancelUpload($item.attr('id'));
					$item.find('.data').removeClass('data').html(' - Cancelled');
					$item.find('.uploadify-progress-bar').remove();
					$item.delay(1000).fadeOut(500, function() {
						$(this).remove();
					});
				}
			});

		},

		// Revert the DOM object back to its original state
		destroy : function() {

			this.each(function() {
				// Create a reference to the jQuery DOM object
				var $this        = $(this),
					swfuploadify = $this.data('uploadify'),
					settings     = swfuploadify.settings;

				// Destroy the SWF object and 
				swfuploadify.destroy();
				
				// Destroy the queue
				if (settings.defaultQueue) {
					$('#' + settings.queueID).remove();
				}
				
				// Reload the original DOM element
				$('#' + settings.id).replaceWith(swfuploadify.original);

				// Call the user-defined event handler
				if (settings.onDestroy) settings.onDestroy.call(this);

				delete swfuploadify;
			});

		},

		// Disable the select button
		disable : function(isDisabled) {
			
			this.each(function() {
				// Create a reference to the jQuery DOM object
				var $this        = $(this),
					swfuploadify = $this.data('uploadify'),
					settings     = swfuploadify.settings;

				// Call the user-defined event handlers
				if (isDisabled) {
					swfuploadify.button.addClass('disabled');
					if (settings.onDisable) settings.onDisable.call(this);
				} else {
					swfuploadify.button.removeClass('disabled');
					if (settings.onEnable) settings.onEnable.call(this);
				}

				// Enable/disable the browse button
				swfuploadify.setButtonDisabled(isDisabled);
			});

		},

		// Get or set the settings data
		settings : function(name, value, resetObjects) {

			var args        = arguments;
			var returnValue = value;

			this.each(function() {
				// Create a reference to the jQuery DOM object
				var $this        = $(this),
					swfuploadify = $this.data('uploadify'),
					settings     = swfuploadify.settings;

				if (typeof(args[0]) == 'object') {
					for (var n in value) {
						setData(n,value[n]);
					}
				}
				if (args.length === 1) {
					returnValue =  settings[name];
				} else {
					switch (name) {
						case 'uploader':
							swfuploadify.setUploadURL(value);
							break;
						case 'formData':
							if (!resetObjects) {
								value = $.extend(settings.formData, value);
							}
							swfuploadify.setPostParams(settings.formData);
							break;
						case 'method':
							if (value == 'get') {
								swfuploadify.setUseQueryString(true);
							} else {
								swfuploadify.setUseQueryString(false);
							}
							break;
						case 'fileObjName':
							swfuploadify.setFilePostName(value);
							break;
						case 'fileTypeExts':
							swfuploadify.setFileTypes(value, settings.fileTypeDesc);
							break;
						case 'fileTypeDesc':
							swfuploadify.setFileTypes(settings.fileTypeExts, value);
							break;
						case 'fileSizeLimit':
							swfuploadify.setFileSizeLimit(value);
							break;
						case 'uploadLimit':
							swfuploadify.setFileUploadLimit(value);
							break;
						case 'queueSizeLimit':
							swfuploadify.setFileQueueLimit(value);
							break;
						case 'buttonImage':
							swfuploadify.button.css('background-image', settingValue);
							break;
						case 'buttonCursor':
							if (value == 'arrow') {
								swfuploadify.setButtonCursor(SWFUpload.CURSOR.ARROW);
							} else {
								swfuploadify.setButtonCursor(SWFUpload.CURSOR.HAND);
							}
							break;
						case 'buttonText':
							$('#' + settings.id + '-button').find('.uploadify-button-text').html(value);
							break;
						case 'width':
							swfuploadify.setButtonDimensions(value, settings.height);
							break;
						case 'height':
							swfuploadify.setButtonDimensions(settings.width, value);
							break;
						case 'multi':
							if (value) {
								swfuploadify.setButtonAction(SWFUpload.BUTTON_ACTION.SELECT_FILES);
							} else {
								swfuploadify.setButtonAction(SWFUpload.BUTTON_ACTION.SELECT_FILE);
							}
							break;
					}
					settings[name] = value;
				}
			});
			
			if (args.length === 1) {
				return returnValue;
			}

		},

		// Stop the current uploads and requeue what is in progress
		stop : function() {

			this.each(function() {
				// Create a reference to the jQuery DOM object
				var $this        = $(this),
					swfuploadify = $this.data('uploadify');

				// Reset the queue information
				swfuploadify.queueData.averageSpeed  = 0;
				swfuploadify.queueData.uploadSize    = 0;
				swfuploadify.queueData.bytesUploaded = 0;
				swfuploadify.queueData.uploadQueue   = [];

				swfuploadify.stopUpload();
			});

		},

		// Start uploading files in the queue
		upload : function() {

			var args = arguments;

			this.each(function() {
				// Create a reference to the jQuery DOM object
				var $this        = $(this),
					swfuploadify = $this.data('uploadify');

				// Reset the queue information
				swfuploadify.queueData.averageSpeed  = 0;
				swfuploadify.queueData.uploadSize    = 0;
				swfuploadify.queueData.bytesUploaded = 0;
				swfuploadify.queueData.uploadQueue   = [];
				
				// Upload the files
				if (args[0]) {
					if (args[0] == '*') {
						swfuploadify.queueData.uploadSize = swfuploadify.queueData.queueSize;
						swfuploadify.queueData.uploadQueue.push('*');
						swfuploadify.startUpload();
					} else {
						for (var n = 0; n < args.length; n++) {
							swfuploadify.queueData.uploadSize += swfuploadify.queueData.files[args[n]].size;
							swfuploadify.queueData.uploadQueue.push(args[n]);
						}
						swfuploadify.startUpload(swfuploadify.queueData.uploadQueue.shift());
					}
				} else {
					swfuploadify.startUpload();
				}

			});

		}

	}

	// These functions handle all the events that occur with the file uploader
	var handlers = {

		// Triggered when the file dialog is opened
		onDialogOpen : function() {
			// Load the swfupload settings
			var settings = this.settings;

			// Reset some queue info
			this.queueData.errorMsg       = 'Some files were not added to the queue:';
			this.queueData.filesReplaced  = 0;
			this.queueData.filesCancelled = 0;

			// Call the user-defined event handler
			if (settings.onDialogOpen) settings.onDialogOpen.call(this);
		},

		// Triggered when the browse dialog is closed
		onDialogClose :  function(filesSelected, filesQueued, queueLength) {
			// Load the swfupload settings
			var settings = this.settings;

			// Update the queue information
			this.queueData.filesErrored  = filesSelected - filesQueued;
			this.queueData.filesSelected = filesSelected;
			this.queueData.filesQueued   = filesQueued - this.queueData.filesCancelled;
			this.queueData.queueLength   = queueLength;

			// Run the default event handler
			if ($.inArray('onDialogClose', settings.overrideEvents) < 0) {
				if (this.queueData.filesErrored > 0) {
					alert(this.queueData.errorMsg);
				}
			}

			// Call the user-defined event handler
			if (settings.onDialogClose) settings.onDialogClose.call(this, this.queueData);

			// Upload the files if auto is true
			if (settings.auto) $('#' + settings.id).uploadify('upload', '*');
		},

		// Triggered once for each file added to the queue
		onSelect : function(file) {
			// Load the swfupload settings
			var settings = this.settings;

			// Check if a file with the same name exists in the queue
			var queuedFile = {};
			for (var n in this.queueData.files) {
				queuedFile = this.queueData.files[n];
				if (queuedFile.uploaded != true && queuedFile.name == file.name) {
					var replaceQueueItem = confirm('The file named "' + file.name + '" is already in the queue.\nDo you want to replace the existing item in the queue?');
					if (!replaceQueueItem) {
						this.cancelUpload(file.id);
						this.queueData.filesCancelled++;
						return false;
					} else {
						$('#' + queuedFile.id).remove();
						this.cancelUpload(queuedFile.id);
						this.queueData.filesReplaced++;
					}
				}
			}

			// Get the size of the file
			var fileSize = Math.round(file.size / 1024);
			var suffix   = 'KB';
			if (fileSize > 1000) {
				fileSize = Math.round(fileSize / 1000);
				suffix   = 'MB';
			}
			var fileSizeParts = fileSize.toString().split('.');
			fileSize = fileSizeParts[0];
			if (fileSizeParts.length > 1) {
				fileSize += '.' + fileSizeParts[1].substr(0,2);
			}
			fileSize += suffix;
			
			// Truncate the filename if it's too long
			var fileName = file.name;
			if (fileName.length > 25) {
				fileName = fileName.substr(0,25) + '...';
			}

			// Run the default event handler
			if ($.inArray('onSelect', settings.overrideEvents) < 0) {
				
				// Add the file item to the queue
				$('#' + settings.queueID).append('<div id="' + file.id + '" class="uploadify-queue-item">\
					<div class="cancel">\
						<a href="javascript:jQuery(\'#' + settings.id + '\').uploadify(\'cancel\', \'' + file.id + '\')">X</a>\
					</div>\
					<span class="fileName">' + fileName + ' (' + fileSize + ')</span><span class="data"></span>\
					<div class="uploadify-progress">\
						<div class="uploadify-progress-bar"><!--Progress Bar--></div>\
					</div>\
				</div>');
				
			}

			this.queueData.queueSize += file.size;
			this.queueData.files[file.id] = file;

			// Call the user-defined event handler
			if (settings.onSelect) settings.onSelect.apply(this, arguments);
		},

		// Triggered when a file is not added to the queue
		onSelectError : function(file, errorCode, errorMsg) {
			// Load the swfupload settings
			var settings = this.settings;

			// Run the default event handler
			if ($.inArray('onSelectError', settings.overrideEvents) < 0) {
				switch(errorCode) {
					case SWFUpload.QUEUE_ERROR.QUEUE_LIMIT_EXCEEDED:
						if (settings.queueSizeLimit > errorMsg) {
							this.queueData.errorMsg += '\nThe number of files selected exceeds the remaining upload limit (' + errorMsg + ').';
						} else {
							this.queueData.errorMsg += '\nThe number of files selected exceeds the queue size limit (' + settings.queueSizeLimit + ').';
						}
						break;
					case SWFUpload.QUEUE_ERROR.FILE_EXCEEDS_SIZE_LIMIT:
						this.queueData.errorMsg += '\nThe file "' + file.name + '" exceeds the size limit (' + settings.fileSizeLimit + ').';
						break;
					case SWFUpload.QUEUE_ERROR.ZERO_BYTE_FILE:
						this.queueData.errorMsg += '\nThe file "' + file.name + '" is empty.';
						break;
					case SWFUpload.QUEUE_ERROR.FILE_EXCEEDS_SIZE_LIMIT:
						this.queueData.errorMsg += '\nThe file "' + file.name + '" is not an accepted file type (' + settings.fileTypeDesc + ').';
						break;
				}
			}
			if (errorCode != SWFUpload.QUEUE_ERROR.QUEUE_LIMIT_EXCEEDED) {
				delete this.queueData.files[file.id];
			}

			// Call the user-defined event handler
			if (settings.onSelectError) settings.onSelectError.apply(this, arguments);
		},

		// Triggered when all the files in the queue have been processed
		onQueueComplete : function() {
			if (this.settings.onQueueComplete) this.settings.onQueueComplete.call(this, this.settings.queueData);
		},

		// Triggered when a file upload successfully completes
		onUploadComplete : function(file) {
			// Load the swfupload settings
			var settings     = this.settings,
				swfuploadify = this;

			// Check if all the files have completed uploading
			var stats = this.getStats();
			this.queueData.queueLength = stats.files_queued;
			if (this.queueData.uploadQueue[0] == '*') {
				if (this.queueData.queueLength > 0) {
					this.startUpload();
				} else {
					this.queueData.uploadQueue = [];

					// Call the user-defined event handler for queue complete
					if (settings.onQueueComplete) settings.onQueueComplete.call(this, this.queueData);
				}
			} else {
				if (this.queueData.uploadQueue.length > 0) {
					this.startUpload(this.queueData.uploadQueue.shift());
				} else {
					this.queueData.uploadQueue = [];

					// Call the user-defined event handler for queue complete
					if (settings.onQueueComplete) settings.onQueueComplete.call(this, this.queueData);
				}
			}

			// Call the default event handler
			if ($.inArray('onUploadComplete', settings.overrideEvents) < 0) {
				if (settings.removeCompleted) {
					switch (file.filestatus) {
						case SWFUpload.FILE_STATUS.COMPLETE:
							setTimeout(function() { 
								if ($('#' + file.id)) {
									swfuploadify.queueData.queueSize   -= file.size;
									swfuploadify.queueData.queueLength -= 1;
									delete swfuploadify.queueData.files[file.id]
									$('#' + file.id).fadeOut(500, function() {
										$(this).remove();
									});
								}
							}, settings.removeTimeout * 1000);
							break;
						case SWFUpload.FILE_STATUS.ERROR:
							if (!settings.requeueErrors) {
								setTimeout(function() {
									if ($('#' + file.id)) {
										swfuploadify.queueData.queueSize   -= file.size;
										swfuploadify.queueData.queueLength -= 1;
										delete swfuploadify.queueData.files[file.id];
										$('#' + file.id).fadeOut(500, function() {
											$(this).remove();
										});
									}
								}, settings.removeTimeout * 1000);
							}
							break;
					}
				} else {
					file.uploaded = true;
				}
			}

			// Call the user-defined event handler
			if (settings.onUploadComplete) settings.onUploadComplete.call(this, file);
		},

		// Triggered when a file upload returns an error
		onUploadError : function(file, errorCode, errorMsg) {
			// Load the swfupload settings
			var settings = this.settings;

			// Set the error string
			var errorString = 'Error';
			switch(errorCode) {
				case SWFUpload.UPLOAD_ERROR.HTTP_ERROR:
					errorString = 'HTTP Error (' + errorMsg + ')';
					break;
				case SWFUpload.UPLOAD_ERROR.MISSING_UPLOAD_URL:
					errorString = 'Missing Upload URL';
					break;
				case SWFUpload.UPLOAD_ERROR.IO_ERROR:
					errorString = 'IO Error';
					break;
				case SWFUpload.UPLOAD_ERROR.SECURITY_ERROR:
					errorString = 'Security Error';
					break;
				case SWFUpload.UPLOAD_ERROR.UPLOAD_LIMIT_EXCEEDED:
					alert('The upload limit has been reached (' + errorMsg + ').');
					errorString = 'Exceeds Upload Limit';
					break;
				case SWFUpload.UPLOAD_ERROR.UPLOAD_FAILED:
					errorString = 'Failed';
					break;
				case SWFUpload.UPLOAD_ERROR.SPECIFIED_FILE_ID_NOT_FOUND:
					break;
				case SWFUpload.UPLOAD_ERROR.FILE_VALIDATION_FAILED:
					errorString = 'Validation Error';
					break;
				case SWFUpload.UPLOAD_ERROR.FILE_CANCELLED:
					errorString = 'Cancelled';
					this.queueData.queueSize   -= file.size;
					this.queueData.queueLength -= 1;
					if (file.status == SWFUpload.FILE_STATUS.IN_PROGRESS || $.inArray(file.id, this.queueData.uploadQueue) >= 0) {
						this.queueData.uploadSize -= file.size;
					}
					// Trigger the onCancel event
					if (settings.onCancel) settings.onCancel.call(this, file);
					delete this.queueData.files[file.id];
					break;
				case SWFUpload.UPLOAD_ERROR.UPLOAD_STOPPED:
					errorString = 'Stopped';
					break;
			}

			// Call the default event handler
			if ($.inArray('onUploadError', settings.overrideEvents) < 0) {

				if (errorCode != SWFUpload.UPLOAD_ERROR.FILE_CANCELLED && errorCode != SWFUpload.UPLOAD_ERROR.UPLOAD_STOPPED) {
					$('#' + file.id).addClass('uploadify-error');
				}

				// Reset the progress bar
				$('#' + file.id).find('.uploadify-progress-bar').css('width','1px');

				// Add the error message to the queue item
				if (errorCode != SWFUpload.UPLOAD_ERROR.SPECIFIED_FILE_ID_NOT_FOUND && file.status != SWFUpload.FILE_STATUS.COMPLETE) {
					$('#' + file.id).find('.data').html(' - ' + errorString);
				}
			}

			var stats = this.getStats();
			this.queueData.uploadsErrored = stats.upload_errors;

			// Call the user-defined event handler
			if (settings.onUploadError) settings.onUploadError.call(this, file, errorCode, errorMsg, errorString);
		},

		// Triggered periodically during a file upload
		onUploadProgress : function(file, fileBytesLoaded, fileTotalBytes) {
			// Load the swfupload settings
			var settings = this.settings;

			// Setup all the variables
			var timer            = new Date();
			var newTime          = timer.getTime();
			var lapsedTime       = newTime - this.timer;
			if (lapsedTime > 500) {
				this.timer = newTime;
			}
			var lapsedBytes      = fileBytesLoaded - this.bytesLoaded;
			this.bytesLoaded     = fileBytesLoaded;
			var queueBytesLoaded = this.queueData.queueBytesUploaded + fileBytesLoaded;
			var percentage       = Math.round(fileBytesLoaded / fileTotalBytes * 100);
			
			// Calculate the average speed
			var suffix = 'KB/s';
			var mbs = 0;
			var kbs = (lapsedBytes / 1024) / (lapsedTime / 1000);
			    kbs = Math.floor(kbs * 10) / 10;
			if (this.queueData.averageSpeed > 0) {
				this.queueData.averageSpeed = Math.floor((this.queueData.averageSpeed + kbs) / 2);
			} else {
				this.queueData.averageSpeed = Math.floor(kbs);
			}
			if (kbs > 1000) {
				mbs = (kbs * .001);
				this.queueData.averageSpeed = Math.floor(mbs);
				suffix = 'MB/s';
			}
			
			// Call the default event handler
			if ($.inArray('onUploadProgress', settings.overrideEvents) < 0) {
				if (settings.progressData == 'percentage') {
					$('#' + file.id).find('.data').html(' - ' + percentage + '%');
				} else if (settings.progressData == 'speed' && lapsedTime > 500) {
					$('#' + file.id).find('.data').html(' - ' + this.queueData.averageSpeed + suffix);
				}
				$('#' + file.id).find('.uploadify-progress-bar').css('width', percentage + '%');
			}

			// Call the user-defined event handler
			if (settings.onUploadProgress) settings.onUploadProgress.call(this, file, fileBytesLoaded, fileTotalBytes, queueBytesLoaded, this.queueData.uploadSize);
		},

		// Triggered right before a file is uploaded
		onUploadStart : function(file) {
			// Load the swfupload settings
			var settings = this.settings;

			var timer        = new Date();
			this.timer       = timer.getTime();
			this.bytesLoaded = 0;
			if (this.queueData.uploadQueue.length == 0) {
				this.queueData.uploadSize = file.size;
			}
			if (settings.checkExisting) {
				$.ajax({
					type    : 'POST',
					async   : false,
					url     : settings.checkExisting,
					data    : {filename: file.name},
					success : function(data) {
						if (data == 1) {
							var overwrite = confirm('A file with the name "' + file.name + '" already exists on the server.\nWould you like to replace the existing file?');
							if (!overwrite) {
								this.cancelUpload(file.id);
								$('#' + file.id).remove();
								if (this.queueData.uploadQueue.length > 0 && this.queueData.queueLength > 0) {
									if (this.queueData.uploadQueue[0] == '*') {
										this.startUpload();
									} else {
										this.startUpload(this.queueData.uploadQueue.shift());
									}
								}
							}
						}
					}
				});
			}

			// Call the user-defined event handler
			if (settings.onUploadStart) settings.onUploadStart.call(this, file); 
		},

		// Triggered when a file upload returns a successful code
		onUploadSuccess : function(file, data, response) {
			// Load the swfupload settings
			var settings = this.settings;
			var stats    = this.getStats();
			this.queueData.uploadsSuccessful = stats.successful_uploads;
			this.queueData.queueBytesUploaded += file.size;

			// Call the default event handler
			if ($.inArray('onUploadSuccess', settings.overrideEvents) < 0) {
				$('#' + file.id).find('.data').html(' - Complete');
			}

			// Call the user-defined event handler
			if (settings.onUploadSuccess) settings.onUploadSuccess.call(this, file, data, response); 
		}

	}

	$.fn.uploadify = function(method) {

		if (methods[method]) {
			return methods[method].apply(this, Array.prototype.slice.call(arguments, 1));
		} else if (typeof method === 'object' || !method) {
			return methods.init.apply(this, arguments);
		} else {
			$.error('The method ' + method + ' does not exist in $.uploadify');
		}

	}

})(jQuery);
} catch (err) {
    if (console && console.log && console.error) {
        console.log("Error running batched script.");
        console.error(err);
    }
}

;
