;try {
/* module-key = 'gov.eop.omb.confluence.resources.MAX-Resources:design-resources', location = 'gov/eop/omb/confluence/resources/jQuery/jquery-tablesorter/jquery.tablesorter.js' */
/**!
* TableSorter 2.14.3 - Client-side table sorting with ease!
* @requires jQuery v1.2.6+
*
* Copyright (c) 2007 Christian Bach
* Examples and docs at: http://tablesorter.com
* Dual licensed under the MIT and GPL licenses:
* http://www.opensource.org/licenses/mit-license.php
* http://www.gnu.org/licenses/gpl.html
*
* @type jQuery
* @name tablesorter
* @cat Plugins/Tablesorter
* @author Christian Bach/christian.bach@polyester.se
* @contributor Rob Garrison/https://github.com/Mottie/tablesorter
*/
/*jshint browser:true, jquery:true, unused:false, expr: true */
/*global console:false, alert:false */
!(function($) {
	"use strict";
	$.extend({
		/*jshint supernew:true */
		tablesorter: new function() {

			var ts = this;

			ts.version = "2.14.3";

			ts.parsers = [];
			ts.widgets = [];
			ts.defaults = {

				// *** appearance
				theme            : 'default',  // adds tablesorter-{theme} to the table for styling
				widthFixed       : false,      // adds colgroup to fix widths of columns
				showProcessing   : false,      // show an indeterminate timer icon in the header when the table is sorted or filtered.

				headerTemplate   : '{content}',// header layout template (HTML ok); {content} = innerHTML, {icon} = <i/> (class from cssIcon)
				onRenderTemplate : null,       // function(index, template){ return template; }, (template is a string)
				onRenderHeader   : null,       // function(index){}, (nothing to return)

				// *** functionality
				cancelSelection  : true,       // prevent text selection in the header
				tabIndex         : true,       // add tabindex to header for keyboard accessibility
				dateFormat       : 'mmddyyyy', // other options: "ddmmyyy" or "yyyymmdd"
				sortMultiSortKey : 'shiftKey', // key used to select additional columns
				sortResetKey     : 'ctrlKey',  // key used to remove sorting on a column
				usNumberFormat   : true,       // false for German "1.234.567,89" or French "1 234 567,89"
				delayInit        : false,      // if false, the parsed table contents will not update until the first sort
				serverSideSorting: false,      // if true, server-side sorting should be performed because client-side sorting will be disabled, but the ui and events will still be used.

				// *** sort options
				headers          : {},         // set sorter, string, empty, locked order, sortInitialOrder, filter, etc.
				ignoreCase       : true,       // ignore case while sorting
				sortForce        : null,       // column(s) first sorted; always applied
				sortList         : [],         // Initial sort order; applied initially; updated when manually sorted
				sortAppend       : null,       // column(s) sorted last; always applied
				sortStable       : false,      // when sorting two rows with exactly the same content, the original sort order is maintained

				sortInitialOrder : 'asc',      // sort direction on first click
				sortLocaleCompare: false,      // replace equivalent character (accented characters)
				sortReset        : false,      // third click on the header will reset column to default - unsorted
				sortRestart      : false,      // restart sort to "sortInitialOrder" when clicking on previously unsorted columns

				emptyTo          : 'bottom',   // sort empty cell to bottom, top, none, zero
				stringTo         : 'max',      // sort strings in numerical column as max, min, top, bottom, zero
				textExtraction   : 'simple',   // text extraction method/function - function(node, table, cellIndex){}
				textSorter       : null,       // choose overall or specific column sorter function(a, b, direction, table, columnIndex) [alt: ts.sortText]
				numberSorter     : null,       // choose overall numeric sorter function(a, b, direction, maxColumnValue)

				// *** widget options
				widgets: [],                   // method to add widgets, e.g. widgets: ['zebra']
				widgetOptions    : {
					zebra : [ 'even', 'odd' ]    // zebra widget alternating row class names
				},
				initWidgets      : true,       // apply widgets on tablesorter initialization

				// *** callbacks
				initialized      : null,       // function(table){},

				// *** extra css class names
				tableClass       : '',
				cssAsc           : '',
				cssDesc          : '',
				cssHeader        : '',
				cssHeaderRow     : '',
				cssProcessing    : '', // processing icon applied to header during sort/filter

				cssChildRow      : 'tablesorter-childRow', // class name indiciating that a row is to be attached to the its parent 
				cssIcon          : 'tablesorter-icon',     //  if this class exists, a <i> will be added to the header automatically
				cssInfoBlock     : 'tablesorter-infoOnly', // don't sort tbody with this class name (only one class name allowed here!)

				// *** selectors
				selectorHeaders  : '> thead th, > thead td',
				selectorSort     : 'th, td',   // jQuery selector of content within selectorHeaders that is clickable to trigger a sort
				selectorRemove   : '.remove-me',

				// *** advanced
				debug            : false,

				// *** Internal variables
				headerList: [],
				empties: {},
				strings: {},
				parsers: []

				// deprecated; but retained for backwards compatibility
				// widgetZebra: { css: ["even", "odd"] }

			};

			// internal css classes - these will ALWAYS be added to
			// the table and MUST only contain one class name - fixes #381
			ts.css = {
				table      : 'tablesorter',
				childRow   : 'tablesorter-childRow',
				header     : 'tablesorter-header',
				headerRow  : 'tablesorter-headerRow',
				icon       : 'tablesorter-icon',
				info       : 'tablesorter-infoOnly',
				processing : 'tablesorter-processing',
				sortAsc    : 'tablesorter-headerAsc',
				sortDesc   : 'tablesorter-headerDesc'
			};

			/* debuging utils */
			function log() {
				var s = arguments.length > 1 ? Array.prototype.slice.call(arguments) : arguments[0];
				if (typeof console !== "undefined" && typeof console.log !== "undefined") {
					console.log(s);
				} else {
					alert(s);
				}
			}

			function benchmark(s, d) {
				log(s + " (" + (new Date().getTime() - d.getTime()) + "ms)");
			}

			ts.log = log;
			ts.benchmark = benchmark;

			// $.isEmptyObject from jQuery v1.4
			function isEmptyObject(obj) {
				/*jshint forin: false */
				for (var name in obj) {
					return false;
				}
				return true;
			}

			function getElementText(table, node, cellIndex) {
				if (!node) { return ""; }
				var c = table.config,
					t = c.textExtraction, text = "";
				if (t === "simple") {
					if (c.supportsTextContent) {
						text = node.textContent; // newer browsers support this
					} else {
						text = $(node).text();
					}
				} else {
					if (typeof t === "function") {
						text = t(node, table, cellIndex);
					} else if (typeof t === "object" && t.hasOwnProperty(cellIndex)) {
						text = t[cellIndex](node, table, cellIndex);
					} else {
						text = c.supportsTextContent ? node.textContent : $(node).text();
					}
				}
				return $.trim(text);
			}

			function detectParserForColumn(table, rows, rowIndex, cellIndex) {
				var cur,
				i = ts.parsers.length,
				node = false,
				nodeValue = '',
				keepLooking = true;
				while (nodeValue === '' && keepLooking) {
					rowIndex++;
					if (rows[rowIndex]) {
						node = rows[rowIndex].cells[cellIndex];
						nodeValue = getElementText(table, node, cellIndex);
						if (table.config.debug) {
							log('Checking if value was empty on row ' + rowIndex + ', column: ' + cellIndex + ': "' + nodeValue + '"');
						}
					} else {
						keepLooking = false;
					}
				}
				while (--i >= 0) {
					cur = ts.parsers[i];
					// ignore the default text parser because it will always be true
					if (cur && cur.id !== 'text' && cur.is && cur.is(nodeValue, table, node)) {
						return cur;
					}
				}
				// nothing found, return the generic parser (text)
				return ts.getParserById('text');
			}

			function buildParserCache(table) {
				var c = table.config,
					// update table bodies in case we start with an empty table
					tb = c.$tbodies = c.$table.children('tbody:not(.' + c.cssInfoBlock + ')'),
					rows, list, l, i, h, ch, p, time, parsersDebug = "";
				if ( tb.length === 0) {
					return c.debug ? log('*Empty table!* Not building a parser cache') : '';
				} else if (c.debug) {
					time = new Date();
					log('Detecting parsers for each column');
				}
				rows = tb[0].rows;
				if (rows[0]) {
					list = [];
					l = rows[0].cells.length;
					for (i = 0; i < l; i++) {
						// tons of thanks to AnthonyM1229 for working out the following selector (issue #74) to make this work in IE8!
						// More fixes to this selector to work properly in iOS and jQuery 1.8+ (issue #132 & #174)
						h = c.$headers.filter(':not([colspan])');
						h = h.add( c.$headers.filter('[colspan="1"]') ) // ie8 fix
							.filter('[data-column="' + i + '"]:last');
						ch = c.headers[i];
						// get column parser
						p = ts.getParserById( ts.getData(h, ch, 'sorter') );
						// empty cells behaviour - keeping emptyToBottom for backwards compatibility
						c.empties[i] = ts.getData(h, ch, 'empty') || c.emptyTo || (c.emptyToBottom ? 'bottom' : 'top' );
						// text strings behaviour in numerical sorts
						c.strings[i] = ts.getData(h, ch, 'string') || c.stringTo || 'max';
						if (!p) {
							p = detectParserForColumn(table, rows, -1, i);
						}
						if (c.debug) {
							parsersDebug += "column:" + i + "; parser:" + p.id + "; string:" + c.strings[i] + '; empty: ' + c.empties[i] + "\n";
						}
						list.push(p);
					}
				}
				if (c.debug) {
					log(parsersDebug);
					benchmark("Completed detecting parsers", time);
				}
				c.parsers = list;
			}

			/* utils */
			function buildCache(table) {
				var b = table.tBodies,
				tc = table.config,
				totalRows,
				totalCells,
				parsers = tc.parsers,
				t, v, i, j, k, c, cols, cacheTime, colMax = [];
				tc.cache = {};
				// if no parsers found, return - it's an empty table.
				if (!parsers) {
					return tc.debug ? log('*Empty table!* Not building a cache') : '';
				}
				if (tc.debug) {
					cacheTime = new Date();
				}
				// processing icon
				if (tc.showProcessing) {
					ts.isProcessing(table, true);
				}
				for (k = 0; k < b.length; k++) {
					tc.cache[k] = { row: [], normalized: [] };
					// ignore tbodies with class name from c.cssInfoBlock
					if (!$(b[k]).hasClass(tc.cssInfoBlock)) {
						totalRows = (b[k] && b[k].rows.length) || 0;
						totalCells = (b[k].rows[0] && b[k].rows[0].cells.length) || 0;
						for (i = 0; i < totalRows; ++i) {
							/** Add the table data to main data array */
							c = $(b[k].rows[i]);
							cols = [];
							// if this is a child row, add it to the last row's children and continue to the next row
							if (c.hasClass(tc.cssChildRow)) {
								tc.cache[k].row[tc.cache[k].row.length - 1] = tc.cache[k].row[tc.cache[k].row.length - 1].add(c);
								// go to the next for loop
								continue;
							}
							tc.cache[k].row.push(c);
							for (j = 0; j < totalCells; ++j) {
								t = getElementText(table, c[0].cells[j], j);
								// allow parsing if the string is empty, previously parsing would change it to zero,
								// in case the parser needs to extract data from the table cell attributes
								v = parsers[j].format(t, table, c[0].cells[j], j);
								cols.push(v);
								if ((parsers[j].type || '').toLowerCase() === "numeric") {
									colMax[j] = Math.max(Math.abs(v) || 0, colMax[j] || 0); // determine column max value (ignore sign)
								}
							}
							cols.push(tc.cache[k].normalized.length); // add position for rowCache
							tc.cache[k].normalized.push(cols);
						}
						tc.cache[k].colMax = colMax;
					}
				}
				if (tc.showProcessing) {
					ts.isProcessing(table); // remove processing icon
				}
				if (tc.debug) {
					benchmark("Building cache for " + totalRows + " rows", cacheTime);
				}
			}

			// init flag (true) used by pager plugin to prevent widget application
			function appendToTable(table, init) {
				var c = table.config,
					wo = c.widgetOptions,
					b = table.tBodies,
					rows = [],
					c2 = c.cache,
					r, n, totalRows, checkCell, $bk, $tb,
					i, j, k, l, pos, appendTime;
				if (isEmptyObject(c2)) { return; } // empty table - fixes #206/#346
				if (c.debug) {
					appendTime = new Date();
				}
				for (k = 0; k < b.length; k++) {
					$bk = $(b[k]);
					if ($bk.length && !$bk.hasClass(c.cssInfoBlock)) {
						// get tbody
						$tb = ts.processTbody(table, $bk, true);
						r = c2[k].row;
						n = c2[k].normalized;
						totalRows = n.length;
						checkCell = totalRows ? (n[0].length - 1) : 0;
						for (i = 0; i < totalRows; i++) {
							pos = n[i][checkCell];
							rows.push(r[pos]);
							// removeRows used by the pager plugin; don't render if using ajax - fixes #411
							if (!c.appender || (c.pager && (!c.pager.removeRows || !wo.pager_removeRows) && !c.pager.ajax)) {
								l = r[pos].length;
								for (j = 0; j < l; j++) {
									$tb.append(r[pos][j]);
								}
							}
						}
						// restore tbody
						ts.processTbody(table, $tb, false);
					}
				}
				if (c.appender) {
					c.appender(table, rows);
				}
				if (c.debug) {
					benchmark("Rebuilt table", appendTime);
				}
				// apply table widgets; but not before ajax completes
				if (!init && !c.appender) { ts.applyWidget(table); }
				// trigger sortend
				$(table).trigger("sortEnd", table);
				$(table).trigger("updateComplete", table);
			}

			// computeTableHeaderCellIndexes from:
			// http://www.javascripttoolbox.com/lib/table/examples.php
			// http://www.javascripttoolbox.com/temp/table_cellindex.html
			function computeThIndexes(t) {
				var matrix = [],
				lookup = {},
				cols = 0, // determine the number of columns
				trs = $(t).find('thead:eq(0), tfoot').children('tr'), // children tr in tfoot - see issue #196
				i, j, k, l, c, cells, rowIndex, cellId, rowSpan, colSpan, firstAvailCol, matrixrow;
				for (i = 0; i < trs.length; i++) {
					cells = trs[i].cells;
					for (j = 0; j < cells.length; j++) {
						c = cells[j];
						rowIndex = c.parentNode.rowIndex;
						cellId = rowIndex + "-" + c.cellIndex;
						rowSpan = c.rowSpan || 1;
						colSpan = c.colSpan || 1;
						if (typeof(matrix[rowIndex]) === "undefined") {
							matrix[rowIndex] = [];
						}
						// Find first available column in the first row
						for (k = 0; k < matrix[rowIndex].length + 1; k++) {
							if (typeof(matrix[rowIndex][k]) === "undefined") {
								firstAvailCol = k;
								break;
							}
						}
						lookup[cellId] = firstAvailCol;
						cols = Math.max(firstAvailCol, cols);
						// add data-column
						$(c).attr({ 'data-column' : firstAvailCol }); // 'data-row' : rowIndex
						for (k = rowIndex; k < rowIndex + rowSpan; k++) {
							if (typeof(matrix[k]) === "undefined") {
								matrix[k] = [];
							}
							matrixrow = matrix[k];
							for (l = firstAvailCol; l < firstAvailCol + colSpan; l++) {
								matrixrow[l] = "x";
							}
						}
					}
				}
				// may not be accurate if # header columns !== # tbody columns
				t.config.columns = cols + 1; // add one because it's a zero-based index
				return lookup;
			}

			function formatSortingOrder(v) {
				// look for "d" in "desc" order; return true
				return (/^d/i.test(v) || v === 1);
			}

			function buildHeaders(table) {
				var header_index = computeThIndexes(table), ch, $t,
					h, i, t, lock, time, c = table.config;
				c.headerList = [];
				c.headerContent = [];
				if (c.debug) {
					time = new Date();
				}
				// add icon if cssIcon option exists
				i = c.cssIcon ? '<i class="' + ( c.cssIcon === ts.css.icon ? ts.css.icon : c.cssIcon + ' ' + ts.css.icon ) + '"></i>' : '';
				c.$headers = $(table).find(c.selectorHeaders).each(function(index) {
					$t = $(this);
					ch = c.headers[index];
					c.headerContent[index] = $(this).html(); // save original header content
					// set up header template
					t = c.headerTemplate.replace(/\{content\}/g, $(this).html()).replace(/\{icon\}/g, i);
					if (c.onRenderTemplate) {
						h = c.onRenderTemplate.apply($t, [index, t]);
						if (h && typeof h === 'string') { t = h; } // only change t if something is returned
					}
					$(this).html('<div class="tablesorter-header-inner">' + t + '</div>'); // faster than wrapInner

					if (c.onRenderHeader) { c.onRenderHeader.apply($t, [index]); }

					this.column = header_index[this.parentNode.rowIndex + "-" + this.cellIndex];
					this.order = formatSortingOrder( ts.getData($t, ch, 'sortInitialOrder') || c.sortInitialOrder ) ? [1,0,2] : [0,1,2];
					this.count = -1; // set to -1 because clicking on the header automatically adds one
					this.lockedOrder = false;
					lock = ts.getData($t, ch, 'lockedOrder') || false;
					if (typeof lock !== 'undefined' && lock !== false) {
						this.order = this.lockedOrder = formatSortingOrder(lock) ? [1,1,1] : [0,0,0];
					}
					$t.addClass(ts.css.header + ' ' + c.cssHeader);
					// add cell to headerList
					c.headerList[index] = this;
					// add to parent in case there are multiple rows
					$t.parent().addClass(ts.css.headerRow + ' ' + c.cssHeaderRow);
					// allow keyboard cursor to focus on element
					if (c.tabIndex) { $t.attr("tabindex", 0); }
				});
				// enable/disable sorting
				updateHeader(table);
				if (c.debug) {
					benchmark("Built headers:", time);
					log(c.$headers);
				}
			}

			function commonUpdate(table, resort, callback) {
				var c = table.config;
				// remove rows/elements before update
				c.$table.find(c.selectorRemove).remove();
				// rebuild parsers
				buildParserCache(table);
				// rebuild the cache map
				buildCache(table);
				checkResort(c.$table, resort, callback);
			}

			function updateHeader(table) {
				var s, c = table.config;
				c.$headers.each(function(index, th){
					s = ts.getData( th, c.headers[index], 'sorter' ) === 'false';
					th.sortDisabled = s;
					$(th)[ s ? 'addClass' : 'removeClass' ]('sorter-false');
				});
			}

			function setHeadersCss(table) {
				var f, i, j, l,
					c = table.config,
					list = c.sortList,
					css = [ts.css.sortAsc + ' ' + c.cssAsc, ts.css.sortDesc + ' ' + c.cssDesc],
					// find the footer
					$t = $(table).find('tfoot tr').children().removeClass(css.join(' '));
				// remove all header information
				c.$headers.removeClass(css.join(' '));
				l = list.length;
				for (i = 0; i < l; i++) {
					// direction = 2 means reset!
					if (list[i][1] !== 2) {
						// multicolumn sorting updating - choose the :last in case there are nested columns
						f = c.$headers.not('.sorter-false').filter('[data-column="' + list[i][0] + '"]' + (l === 1 ? ':last' : '') );
						if (f.length) {
							for (j = 0; j < f.length; j++) {
								if (!f[j].sortDisabled) {
									f.eq(j).addClass(css[list[i][1]]);
									// add sorted class to footer, if it exists
									if ($t.length) {
										$t.filter('[data-column="' + list[i][0] + '"]').eq(j).addClass(css[list[i][1]]);
									}
								}
							}
						}
					}
				}
			}

			// automatically add col group, and column sizes if set
			function fixColumnWidth(table) {
				if (table.config.widthFixed && $(table).find('colgroup').length === 0) {
					var colgroup = $('<colgroup>'),
						overallWidth = $(table).width();
					// only add col for visible columns - fixes #371
					$(table.tBodies[0]).find("tr:first").children("td:visible").each(function() {
						colgroup.append($('<col>').css('width', parseInt(($(this).width()/overallWidth)*1000, 10)/10 + '%'));
					});
					$(table).prepend(colgroup);
				}
			}

			function updateHeaderSortCount(table, list) {
				var s, t, o, c = table.config,
					sl = list || c.sortList;
				c.sortList = [];
				$.each(sl, function(i,v){
					// ensure all sortList values are numeric - fixes #127
					s = [ parseInt(v[0], 10), parseInt(v[1], 10) ];
					// make sure header exists
					o = c.$headers[s[0]];
					if (o) { // prevents error if sorton array is wrong
						c.sortList.push(s);
						t = $.inArray(s[1], o.order); // fixes issue #167
						o.count = t >= 0 ? t : s[1] % (c.sortReset ? 3 : 2);
					}
				});
			}

			function getCachedSortType(parsers, i) {
				return (parsers && parsers[i]) ? parsers[i].type || '' : '';
			}

			function initSort(table, cell, e){
				var a, i, j, o, s,
					c = table.config,
					k = !e[c.sortMultiSortKey],
					$this = $(table);
				// Only call sortStart if sorting is enabled
				$this.trigger("sortStart", table);
				// get current column sort order
				cell.count = e[c.sortResetKey] ? 2 : (cell.count + 1) % (c.sortReset ? 3 : 2);
				// reset all sorts on non-current column - issue #30
				if (c.sortRestart) {
					i = cell;
					c.$headers.each(function() {
						// only reset counts on columns that weren't just clicked on and if not included in a multisort
						if (this !== i && (k || !$(this).is('.' + ts.css.sortDesc + ',.' + ts.css.sortAsc))) {
							this.count = -1;
						}
					});
				}
				// get current column index
				i = cell.column;
				// user only wants to sort on one column
				if (k) {
					// flush the sort list
					c.sortList = [];
					if (c.sortForce !== null) {
						a = c.sortForce;
						for (j = 0; j < a.length; j++) {
							if (a[j][0] !== i) {
								c.sortList.push(a[j]);
							}
						}
					}
					// add column to sort list
					o = cell.order[cell.count];
					if (o < 2) {
						c.sortList.push([i, o]);
						// add other columns if header spans across multiple
						if (cell.colSpan > 1) {
							for (j = 1; j < cell.colSpan; j++) {
								c.sortList.push([i + j, o]);
							}
						}
					}
					// multi column sorting
				} else {
					// get rid of the sortAppend before adding more - fixes issue #115
					if (c.sortAppend && c.sortList.length > 1) {
						if (ts.isValueInArray(c.sortAppend[0][0], c.sortList)) {
							c.sortList.pop();
						}
					}
					// the user has clicked on an already sorted column
					if (ts.isValueInArray(i, c.sortList)) {
						// reverse the sorting direction
						for (j = 0; j < c.sortList.length; j++) {
							s = c.sortList[j];
							o = c.$headers[s[0]];
							if (s[0] === i) {
								// o.count seems to be incorrect when compared to cell.count
								s[1] = o.order[cell.count];
								if (s[1] === 2) {
									c.sortList.splice(j,1);
									o.count = -1;
								}
							}
						}
					} else {
						// add column to sort list array
						o = cell.order[cell.count];
						if (o < 2) {
							c.sortList.push([i, o]);
							// add other columns if header spans across multiple
							if (cell.colSpan > 1) {
								for (j = 1; j < cell.colSpan; j++) {
									c.sortList.push([i + j, o]);
								}
							}
						}
					}
				}
				if (c.sortAppend !== null) {
					a = c.sortAppend;
					for (j = 0; j < a.length; j++) {
						if (a[j][0] !== i) {
							c.sortList.push(a[j]);
						}
					}
				}
				// sortBegin event triggered immediately before the sort
				$this.trigger("sortBegin", table);
				// setTimeout needed so the processing icon shows up
				setTimeout(function(){
					// set css for headers
					setHeadersCss(table);
					multisort(table);
					appendToTable(table);
				}, 1);
			}

			// sort multiple columns
			function multisort(table) { /*jshint loopfunc:true */
				var i, k, num, col, colMax, cache, lc,
					order, orgOrderCol, sortTime, sort, x, y,
					dir = 0,
					c = table.config,
					cts = c.textSorter || '',
					sortList = c.sortList,
					l = sortList.length,
					bl = table.tBodies.length;
				if (c.serverSideSorting || isEmptyObject(c.cache)) { // empty table - fixes #206/#346
					return;
				}
				if (c.debug) { sortTime = new Date(); }
				for (k = 0; k < bl; k++) {
					colMax = c.cache[k].colMax;
					cache = c.cache[k].normalized;
					lc = cache.length;
					orgOrderCol = (cache && cache[0]) ? cache[0].length - 1 : 0;
					cache.sort(function(a, b) {
						// cache is undefined here in IE, so don't use it!
						for (i = 0; i < l; i++) {
							col = sortList[i][0];
							order = sortList[i][1];
							// sort direction, true = asc, false = desc
							dir = order === 0;

							if (c.sortStable && a[col] === b[col] && l === 1) {
								return a[orgOrderCol] - b[orgOrderCol];
							}

							// fallback to natural sort since it is more robust
							num = /n/i.test(getCachedSortType(c.parsers, col));
							if (num && c.strings[col]) {
								// sort strings in numerical columns
								if (typeof (c.string[c.strings[col]]) === 'boolean') {
									num = (dir ? 1 : -1) * (c.string[c.strings[col]] ? -1 : 1);
								} else {
									num = (c.strings[col]) ? c.string[c.strings[col]] || 0 : 0;
								}
								// fall back to built-in numeric sort
								// var sort = $.tablesorter["sort" + s](table, a[c], b[c], c, colMax[c], dir);
								sort = c.numberSorter ? c.numberSorter(x[col], y[col], dir, colMax[col], table) :
									ts[ 'sortNumeric' + (dir ? 'Asc' : 'Desc') ](a[col], b[col], num, colMax[col], col, table);
							} else {
								// set a & b depending on sort direction
								x = dir ? a : b;
								y = dir ? b : a;
								// text sort function
								if (typeof(cts) === 'function') {
									// custom OVERALL text sorter
									sort = cts(x[col], y[col], dir, col, table);
								} else if (typeof(cts) === 'object' && cts.hasOwnProperty(col)) {
									// custom text sorter for a SPECIFIC COLUMN
									sort = cts[col](x[col], y[col], dir, col, table);
								} else {
									// fall back to natural sort
									sort = ts[ 'sortNatural' + (dir ? 'Asc' : 'Desc') ](a[col], b[col], col, table, c);
								}
							}
							if (sort) { return sort; }
						}
						return a[orgOrderCol] - b[orgOrderCol];
					});
				}
				if (c.debug) { benchmark("Sorting on " + sortList.toString() + " and dir " + order + " time", sortTime); }
			}

			function resortComplete($table, callback){
				var c = $table[0].config;
				if (c.pager && !c.pager.ajax) {
					$table.trigger('updateComplete');
				}
				if (typeof callback === "function") {
					callback($table[0]);
				}
			}

			function checkResort($table, flag, callback) {
				// don't try to resort if the table is still processing
				// this will catch spamming of the updateCell method
				if (flag !== false && !$table[0].isProcessing) {
					$table.trigger("sorton", [$table[0].config.sortList, function(){
						resortComplete($table, callback);
					}]);
				} else {
					resortComplete($table, callback);
				}
			}

			function bindEvents(table){
				var c = table.config,
					$this = c.$table,
					j, downTime;
				// apply event handling to headers
				c.$headers
				// http://stackoverflow.com/questions/5312849/jquery-find-self;
				.find(c.selectorSort).add( c.$headers.filter(c.selectorSort) )
				.unbind('mousedown.tablesorter mouseup.tablesorter sort.tablesorter keypress.tablesorter')
				.bind('mousedown.tablesorter mouseup.tablesorter sort.tablesorter keypress.tablesorter', function(e, external) {
					// only recognize left clicks or enter
					if ( ((e.which || e.button) !== 1 && !/sort|keypress/.test(e.type)) || (e.type === 'keypress' && e.which !== 13) ) {
						return;
					}
					// ignore long clicks (prevents resizable widget from initializing a sort)
					if (e.type === 'mouseup' && external !== true && (new Date().getTime() - downTime > 250)) { return; }
					// set timer on mousedown
					if (e.type === 'mousedown') {
						downTime = new Date().getTime();
						return e.target.tagName === "INPUT" ? '' : !c.cancelSelection;
					}
					if (c.delayInit && isEmptyObject(c.cache)) { buildCache(table); }
					// jQuery v1.2.6 doesn't have closest()
					var $cell = /TH|TD/.test(this.tagName) ? $(this) : $(this).parents('th, td').filter(':first'), cell = $cell[0];
					if (!cell.sortDisabled) {
						initSort(table, cell, e);
					}
				});
				if (c.cancelSelection) {
					// cancel selection
					c.$headers
						.attr('unselectable', 'on')
						.bind('selectstart', false)
						.css({
							'user-select': 'none',
							'MozUserSelect': 'none' // not needed for jQuery 1.8+
						});
				}
				// apply easy methods that trigger bound events
				$this
				.unbind('sortReset update updateRows updateCell updateAll addRows sorton appendCache applyWidgetId applyWidgets refreshWidgets destroy mouseup mouseleave '.split(' ').join('.tablesorter '))
				.bind("sortReset.tablesorter", function(e){
					e.stopPropagation();
					c.sortList = [];
					setHeadersCss(table);
					multisort(table);
					appendToTable(table);
				})
				.bind("updateAll.tablesorter", function(e, resort, callback){
					e.stopPropagation();
					ts.refreshWidgets(table, true, true);
					ts.restoreHeaders(table);
					buildHeaders(table);
					bindEvents(table);
					commonUpdate(table, resort, callback);
				})
				.bind("update.tablesorter updateRows.tablesorter", function(e, resort, callback) {
					e.stopPropagation();
					// update sorting (if enabled/disabled)
					updateHeader(table);
					commonUpdate(table, resort, callback);
				})
				.bind("updateCell.tablesorter", function(e, cell, resort, callback) {
					e.stopPropagation();
					$this.find(c.selectorRemove).remove();
					// get position from the dom
					var l, row, icell,
					$tb = $this.find('tbody'),
					// update cache - format: function(s, table, cell, cellIndex)
					// no closest in jQuery v1.2.6 - tbdy = $tb.index( $(cell).closest('tbody') ),$row = $(cell).closest('tr');
					tbdy = $tb.index( $(cell).parents('tbody').filter(':first') ),
					$row = $(cell).parents('tr').filter(':first');
					cell = $(cell)[0]; // in case cell is a jQuery object
					// tbody may not exist if update is initialized while tbody is removed for processing
					if ($tb.length && tbdy >= 0) {
						row = $tb.eq(tbdy).find('tr').index( $row );
						icell = cell.cellIndex;
						l = c.cache[tbdy].normalized[row].length - 1;
						c.cache[tbdy].row[table.config.cache[tbdy].normalized[row][l]] = $row;
						c.cache[tbdy].normalized[row][icell] = c.parsers[icell].format( getElementText(table, cell, icell), table, cell, icell );
						checkResort($this, resort, callback);
					}
				})
				.bind("addRows.tablesorter", function(e, $row, resort, callback) {
					e.stopPropagation();
					var i, rows = $row.filter('tr').length,
					dat = [], l = $row[0].cells.length,
					tbdy = $this.find('tbody').index( $row.parents('tbody').filter(':first') );
					// fixes adding rows to an empty table - see issue #179
					if (!c.parsers) {
						buildParserCache(table);
					}
					// add each row
					for (i = 0; i < rows; i++) {
						// add each cell
						for (j = 0; j < l; j++) {
							dat[j] = c.parsers[j].format( getElementText(table, $row[i].cells[j], j), table, $row[i].cells[j], j );
						}
						// add the row index to the end
						dat.push(c.cache[tbdy].row.length);
						// update cache
						c.cache[tbdy].row.push([$row[i]]);
						c.cache[tbdy].normalized.push(dat);
						dat = [];
					}
					// resort using current settings
					checkResort($this, resort, callback);
				})
				.bind("sorton.tablesorter", function(e, list, callback, init) {
					var c = table.config;
					e.stopPropagation();
					$this.trigger("sortStart", this);
					// update header count index
					updateHeaderSortCount(table, list);
					// set css for headers
					setHeadersCss(table);
					// fixes #346
					if (c.delayInit && isEmptyObject(c.cache)) { buildCache(table); }
					$this.trigger("sortBegin", this);
					// sort the table and append it to the dom
					multisort(table);
					appendToTable(table, init);
					if (typeof callback === "function") {
						callback(table);
					}
				})
				.bind("appendCache.tablesorter", function(e, callback, init) {
					e.stopPropagation();
					appendToTable(table, init);
					if (typeof callback === "function") {
						callback(table);
					}
				})
				.bind("applyWidgetId.tablesorter", function(e, id) {
					e.stopPropagation();
					ts.getWidgetById(id).format(table, c, c.widgetOptions);
				})
				.bind("applyWidgets.tablesorter", function(e, init) {
					e.stopPropagation();
					// apply widgets
					ts.applyWidget(table, init);
				})
				.bind("refreshWidgets.tablesorter", function(e, all, dontapply){
					e.stopPropagation();
					ts.refreshWidgets(table, all, dontapply);
				})
				.bind("destroy.tablesorter", function(e, c, cb){
					e.stopPropagation();
					ts.destroy(table, c, cb);
				});
			}

			/* public methods */
			ts.construct = function(settings) {
				return this.each(function() {
					var table = this,
						// merge & extend config options
						c = $.extend(true, {}, ts.defaults, settings);
					// create a table from data (build table widget)
					if (!table.hasInitialized && ts.buildTable && this.tagName !== 'TABLE') {
						// return the table (in case the original target is the table's container)
						ts.buildTable(table, c);
					}
					ts.setup(table, c);
				});
			};

			ts.setup = function(table, c) {
				// if no thead or tbody, or tablesorter is already present, quit
				if (!table || !table.tHead || table.tBodies.length === 0 || table.hasInitialized === true) {
					return c.debug ? log('stopping initialization! No table, thead, tbody or tablesorter has already been initialized') : '';
				}

				var k = '',
					$this = $(table),
					m = $.metadata;
				// initialization flag
				table.hasInitialized = false;
				// table is being processed flag
				table.isProcessing = true;
				// make sure to store the config object
				table.config = c;
				// save the settings where they read
				$.data(table, "tablesorter", c);
				if (c.debug) { $.data( table, 'startoveralltimer', new Date()); }

				// constants
				c.supportsTextContent = $('<span>x</span>')[0].textContent === 'x';
				// removing this in version 3 (only supports jQuery 1.7+)
				c.supportsDataObject = (function(version) {
					version[0] = parseInt(version[0], 10);
					return (version[0] > 1) || (version[0] === 1 && parseInt(version[1], 10) >= 4);
				})($.fn.jquery.split("."));
				// digit sort text location; keeping max+/- for backwards compatibility
				c.string = { 'max': 1, 'min': -1, 'max+': 1, 'max-': -1, 'zero': 0, 'none': 0, 'null': 0, 'top': true, 'bottom': false };
				// add table theme class only if there isn't already one there
				if (!/tablesorter\-/.test($this.attr('class'))) {
					k = (c.theme !== '' ? ' tablesorter-' + c.theme : '');
				}
				c.$table = $this.addClass(ts.css.table + ' ' + c.tableClass + k);
				c.$tbodies = $this.children('tbody:not(.' + c.cssInfoBlock + ')');
				c.widgetInit = {}; // keep a list of initialized widgets
				// build headers
				buildHeaders(table);
				// fixate columns if the users supplies the fixedWidth option
				// do this after theme has been applied
				fixColumnWidth(table);
				// try to auto detect column type, and store in tables config
				buildParserCache(table);
				// build the cache for the tbody cells
				// delayInit will delay building the cache until the user starts a sort
				if (!c.delayInit) { buildCache(table); }
				// bind all header events and methods
				bindEvents(table);
				// get sort list from jQuery data or metadata
				// in jQuery < 1.4, an error occurs when calling $this.data()
				if (c.supportsDataObject && typeof $this.data().sortlist !== 'undefined') {
					c.sortList = $this.data().sortlist;
				} else if (m && ($this.metadata() && $this.metadata().sortlist)) {
					c.sortList = $this.metadata().sortlist;
				}
				// apply widget init code
				ts.applyWidget(table, true);
				// if user has supplied a sort list to constructor
				if (c.sortList.length > 0) {
					$this.trigger("sorton", [c.sortList, {}, !c.initWidgets]);
				} else if (c.initWidgets) {
					// apply widget format
					ts.applyWidget(table);
				}

				// show processesing icon
				if (c.showProcessing) {
					$this
					.unbind('sortBegin.tablesorter sortEnd.tablesorter')
					.bind('sortBegin.tablesorter sortEnd.tablesorter', function(e) {
						ts.isProcessing(table, e.type === 'sortBegin');
					});
				}

				// initialized
				table.hasInitialized = true;
				table.isProcessing = false;
				if (c.debug) {
					ts.benchmark("Overall initialization time", $.data( table, 'startoveralltimer'));
				}
				$this.trigger('tablesorter-initialized', table);
				if (typeof c.initialized === 'function') { c.initialized(table); }
			};

			// *** Process table ***
			// add processing indicator
			ts.isProcessing = function(table, toggle, $ths) {
				table = $(table);
				var c = table[0].config,
					// default to all headers
					$h = $ths || table.find('.' + ts.css.header);
				if (toggle) {
					if (c.sortList.length > 0) {
						// get headers from the sortList
						$h = $h.filter(function(){
							// get data-column from attr to keep  compatibility with jQuery 1.2.6
							return this.sortDisabled ? false : ts.isValueInArray( parseFloat($(this).attr('data-column')), c.sortList);
						});
					}
					$h.addClass(ts.css.processing + ' ' + c.cssProcessing);
				} else {
					$h.removeClass(ts.css.processing + ' ' + c.cssProcessing);
				}
			};

			// detach tbody but save the position
			// don't use tbody because there are portions that look for a tbody index (updateCell)
			ts.processTbody = function(table, $tb, getIt){
				var holdr;
				if (getIt) {
					table.isProcessing = true;
					$tb.before('<span class="tablesorter-savemyplace"/>');
					holdr = ($.fn.detach) ? $tb.detach() : $tb.remove();
					return holdr;
				}
				holdr = $(table).find('span.tablesorter-savemyplace');
				$tb.insertAfter( holdr );
				holdr.remove();
				table.isProcessing = false;
			};

			ts.clearTableBody = function(table) {
				$(table)[0].config.$tbodies.empty();
			};

			// restore headers
			ts.restoreHeaders = function(table){
				var c = table.config;
				// don't use c.$headers here in case header cells were swapped
				c.$table.find(c.selectorHeaders).each(function(i){
					// only restore header cells if it is wrapped
					// because this is also used by the updateAll method
					if ($(this).find('.tablesorter-header-inner').length){
						$(this).html( c.headerContent[i] );
					}
				});
			};

			ts.destroy = function(table, removeClasses, callback){
				table = $(table)[0];
				if (!table.hasInitialized) { return; }
				// remove all widgets
				ts.refreshWidgets(table, true, true);
				var $t = $(table), c = table.config,
				$h = $t.find('thead:first'),
				$r = $h.find('tr.' + ts.css.headerRow).removeClass(ts.css.headerRow + ' ' + c.cssHeaderRow),
				$f = $t.find('tfoot:first > tr').children('th, td');
				// remove widget added rows, just in case
				$h.find('tr').not($r).remove();
				// disable tablesorter
				$t
					.removeData('tablesorter')
					.unbind('sortReset update updateAll updateRows updateCell addRows sorton appendCache applyWidgetId applyWidgets refreshWidgets destroy mouseup mouseleave keypress sortBegin sortEnd '.split(' ').join('.tablesorter '));
				c.$headers.add($f)
					.removeClass( [ts.css.header, c.cssHeader, c.cssAsc, c.cssDesc, ts.css.sortAsc, ts.css.sortDesc].join(' ') )
					.removeAttr('data-column');
				$r.find(c.selectorSort).unbind('mousedown.tablesorter mouseup.tablesorter keypress.tablesorter');
				ts.restoreHeaders(table);
				if (removeClasses !== false) {
					$t.removeClass(ts.css.table + ' ' + c.tableClass + ' tablesorter-' + c.theme);
				}
				// clear flag in case the plugin is initialized again
				table.hasInitialized = false;
				if (typeof callback === 'function') {
					callback(table);
				}
			};

			// *** sort functions ***
			// regex used in natural sort
			ts.regex = {
				chunk : /(^([+\-]?(?:0|[1-9]\d*)(?:\.\d*)?(?:[eE][+\-]?\d+)?)?$|^0x[0-9a-f]+$|\d+)/gi, // chunk/tokenize numbers & letters
				hex: /^0x[0-9a-f]+$/i // hex
			};

			// Natural sort - https://github.com/overset/javascript-natural-sort (date sorting removed)
			ts.sortNatural = function(a, b) {
				if (a === b) { return 0; }
				var xN, xD, yN, yD, xF, yF, i, mx,
					r = ts.regex;
				// first try and sort Hex codes
				if (r.hex.test(b)) {
					xD = parseInt(a.match(r.hex), 16);
					yD = parseInt(b.match(r.hex), 16);
					if ( xD < yD ) { return -1; }
					if ( xD > yD ) { return 1; }
				}

				// chunk/tokenize
				xN = a.replace(r.chunk, '\\0$1\\0').replace(/\\0$/, '').replace(/^\\0/, '').split('\\0');
				yN = b.replace(r.chunk, '\\0$1\\0').replace(/\\0$/, '').replace(/^\\0/, '').split('\\0');
				mx = Math.max(xN.length, yN.length);
				// natural sorting through split numeric strings and default strings
				for (i = 0; i < mx; i++) {
					// find floats not starting with '0', string or 0 if not defined
					xF = isNaN(xN[i]) ? xN[i] || 0 : parseFloat(xN[i]) || 0;
					yF = isNaN(yN[i]) ? yN[i] || 0 : parseFloat(yN[i]) || 0;
					// handle numeric vs string comparison - number < string - (Kyle Adams)
					if (isNaN(xF) !== isNaN(yF)) { return (isNaN(xF)) ? 1 : -1; }
					// rely on string comparison if different types - i.e. '02' < 2 != '02' < '2'
					if (typeof xF !== typeof yF) {
						xF += '';
						yF += '';
					}
					if (xF < yF) { return -1; }
					if (xF > yF) { return 1; }
				}
				return 0;
			};

			ts.sortNaturalAsc = function(a, b, col, table, c) {
				if (a === b) { return 0; }
				var e = c.string[ (c.empties[col] || c.emptyTo ) ];
				if (a === '' && e !== 0) { return typeof e === 'boolean' ? (e ? -1 : 1) : -e || -1; }
				if (b === '' && e !== 0) { return typeof e === 'boolean' ? (e ? 1 : -1) : e || 1; }
				return ts.sortNatural(a, b);
			};

			ts.sortNaturalDesc = function(a, b, col, table, c) {
				if (a === b) { return 0; }
				var e = c.string[ (c.empties[col] || c.emptyTo ) ];
				if (a === '' && e !== 0) { return typeof e === 'boolean' ? (e ? -1 : 1) : e || 1; }
				if (b === '' && e !== 0) { return typeof e === 'boolean' ? (e ? 1 : -1) : -e || -1; }
				return ts.sortNatural(b, a);
			};

			// basic alphabetical sort
			ts.sortText = function(a, b) {
				return a > b ? 1 : (a < b ? -1 : 0);
			};

			// return text string value by adding up ascii value
			// so the text is somewhat sorted when using a digital sort
			// this is NOT an alphanumeric sort
			ts.getTextValue = function(a, num, mx) {
				if (mx) {
					// make sure the text value is greater than the max numerical value (mx)
					var i, l = a ? a.length : 0, n = mx + num;
					for (i = 0; i < l; i++) {
						n += a.charCodeAt(i);
					}
					return num * n;
				}
				return 0;
			};

			ts.sortNumericAsc = function(a, b, num, mx, col, table) {
				if (a === b) { return 0; }
				var c = table.config,
					e = c.string[ (c.empties[col] || c.emptyTo ) ];
				if (a === '' && e !== 0) { return typeof e === 'boolean' ? (e ? -1 : 1) : -e || -1; }
				if (b === '' && e !== 0) { return typeof e === 'boolean' ? (e ? 1 : -1) : e || 1; }
				if (isNaN(a)) { a = ts.getTextValue(a, num, mx); }
				if (isNaN(b)) { b = ts.getTextValue(b, num, mx); }
				return a - b;
			};

			ts.sortNumericDesc = function(a, b, num, mx, col, table) {
				if (a === b) { return 0; }
				var c = table.config,
					e = c.string[ (c.empties[col] || c.emptyTo ) ];
				if (a === '' && e !== 0) { return typeof e === 'boolean' ? (e ? -1 : 1) : e || 1; }
				if (b === '' && e !== 0) { return typeof e === 'boolean' ? (e ? 1 : -1) : -e || -1; }
				if (isNaN(a)) { a = ts.getTextValue(a, num, mx); }
				if (isNaN(b)) { b = ts.getTextValue(b, num, mx); }
				return b - a;
			};

			ts.sortNumeric = function(a, b) {
				return a - b;
			};

			// used when replacing accented characters during sorting
			ts.characterEquivalents = {
				"a" : "\u00e1\u00e0\u00e2\u00e3\u00e4\u0105\u00e5", // ?????a?
				"A" : "\u00c1\u00c0\u00c2\u00c3\u00c4\u0104\u00c5", // ?????A?
				"c" : "\u00e7\u0107\u010d", // ?cc
				"C" : "\u00c7\u0106\u010c", // ?CC
				"e" : "\u00e9\u00e8\u00ea\u00eb\u011b\u0119", // ????ee
				"E" : "\u00c9\u00c8\u00ca\u00cb\u011a\u0118", // ????EE
				"i" : "\u00ed\u00ec\u0130\u00ee\u00ef\u0131", // ??I??i
				"I" : "\u00cd\u00cc\u0130\u00ce\u00cf", // ??I??
				"o" : "\u00f3\u00f2\u00f4\u00f5\u00f6", // ?????
				"O" : "\u00d3\u00d2\u00d4\u00d5\u00d6", // ?????
				"ss": "\u00df", // ? (s sharp)
				"SS": "\u1e9e", // ? (Capital sharp s)
				"u" : "\u00fa\u00f9\u00fb\u00fc\u016f", // ????u
				"U" : "\u00da\u00d9\u00db\u00dc\u016e" // ????U
			};
			ts.replaceAccents = function(s) {
				var a, acc = '[', eq = ts.characterEquivalents;
				if (!ts.characterRegex) {
					ts.characterRegexArray = {};
					for (a in eq) {
						if (typeof a === 'string') {
							acc += eq[a];
							ts.characterRegexArray[a] = new RegExp('[' + eq[a] + ']', 'g');
						}
					}
					ts.characterRegex = new RegExp(acc + ']');
				}
				if (ts.characterRegex.test(s)) {
					for (a in eq) {
						if (typeof a === 'string') {
							s = s.replace( ts.characterRegexArray[a], a );
						}
					}
				}
				return s;
			};

			// *** utilities ***
			ts.isValueInArray = function(v, a) {
				var i, l = a.length;
				for (i = 0; i < l; i++) {
					if (a[i][0] === v) {
						return true;
					}
				}
				return false;
			};

			ts.addParser = function(parser) {
				var i, l = ts.parsers.length, a = true;
				for (i = 0; i < l; i++) {
					if (ts.parsers[i].id.toLowerCase() === parser.id.toLowerCase()) {
						a = false;
					}
				}
				if (a) {
					ts.parsers.push(parser);
				}
			};

			ts.getParserById = function(name) {
				var i, l = ts.parsers.length;
				for (i = 0; i < l; i++) {
					if (ts.parsers[i].id.toLowerCase() === (name.toString()).toLowerCase()) {
						return ts.parsers[i];
					}
				}
				return false;
			};

			ts.addWidget = function(widget) {
				ts.widgets.push(widget);
			};

			ts.getWidgetById = function(name) {
				var i, w, l = ts.widgets.length;
				for (i = 0; i < l; i++) {
					w = ts.widgets[i];
					if (w && w.hasOwnProperty('id') && w.id.toLowerCase() === name.toLowerCase()) {
						return w;
					}
				}
			};

			ts.applyWidget = function(table, init) {
				table = $(table)[0]; // in case this is called externally
				var c = table.config,
					wo = c.widgetOptions,
					widgets = [],
					time, w, wd;
				if (c.debug) { time = new Date(); }
				if (c.widgets.length) {
					// ensure unique widget ids
					c.widgets = $.grep(c.widgets, function(v, k){
						return $.inArray(v, c.widgets) === k;
					});
					// build widget array & add priority as needed
					$.each(c.widgets || [], function(i,n){
						wd = ts.getWidgetById(n);
						if (wd && wd.id) {
							// set priority to 10 if not defined
							if (!wd.priority) { wd.priority = 10; }
							widgets[i] = wd;
						}
					});
					// sort widgets by priority
					widgets.sort(function(a, b){
						return a.priority < b.priority ? -1 : a.priority === b.priority ? 0 : 1;
					});
					// add/update selected widgets
					$.each(widgets, function(i,w){
						if (w) {
							if (init || !(c.widgetInit[w.id])) {
								if (w.hasOwnProperty('options')) {
									wo = table.config.widgetOptions = $.extend( true, {}, w.options, wo );
								}
								if (w.hasOwnProperty('init')) {
									w.init(table, w, c, wo);
								}
								c.widgetInit[w.id] = true;
							}
							if (!init && w.hasOwnProperty('format')) {
								w.format(table, c, wo, false);
							}
						}
					});
				}
				if (c.debug) {
					w = c.widgets.length;
					benchmark("Completed " + (init === true ? "initializing " : "applying ") + w + " widget" + (w !== 1 ? "s" : ""), time);
				}
			};

			ts.refreshWidgets = function(table, doAll, dontapply) {
				table = $(table)[0]; // see issue #243
				var i, c = table.config,
					cw = c.widgets,
					w = ts.widgets, l = w.length;
				// remove previous widgets
				for (i = 0; i < l; i++){
					if ( w[i] && w[i].id && (doAll || $.inArray( w[i].id, cw ) < 0) ) {
						if (c.debug) { log( 'Refeshing widgets: Removing ' + w[i].id  ); }
						// only remove widgets that have been initialized - fixes #442
						if (w[i].hasOwnProperty('remove') && c.widgetInit[w[i].id]) {
							w[i].remove(table, c, c.widgetOptions);
							c.widgetInit[w[i].id] = false;
						}
					}
				}
				if (dontapply !== true) {
					ts.applyWidget(table, doAll);
				}
			};

			// get sorter, string, empty, etc options for each column from
			// jQuery data, metadata, header option or header class name ("sorter-false")
			// priority = jQuery data > meta > headers option > header class name
			ts.getData = function(h, ch, key) {
				var val = '', $h = $(h), m, cl;
				if (!$h.length) { return ''; }
				m = $.metadata ? $h.metadata() : false;
				cl = ' ' + ($h.attr('class') || '');
				if (typeof $h.data(key) !== 'undefined' || typeof $h.data(key.toLowerCase()) !== 'undefined'){
					// "data-lockedOrder" is assigned to "lockedorder"; but "data-locked-order" is assigned to "lockedOrder"
					// "data-sort-initial-order" is assigned to "sortInitialOrder"
					val += $h.data(key) || $h.data(key.toLowerCase());
				} else if (m && typeof m[key] !== 'undefined') {
					val += m[key];
				} else if (ch && typeof ch[key] !== 'undefined') {
					val += ch[key];
				} else if (cl !== ' ' && cl.match(' ' + key + '-')) {
					// include sorter class name "sorter-text", etc; now works with "sorter-my-custom-parser"
					val = cl.match( new RegExp('\\s' + key + '-([\\w-]+)') )[1] || '';
				}
				return $.trim(val);
			};

			ts.formatFloat = function(s, table) {
				if (typeof s !== 'string' || s === '') { return s; }
				// allow using formatFloat without a table; defaults to US number format
				var i,
					t = table && table.config ? table.config.usNumberFormat !== false :
						typeof table !== "undefined" ? table : true;
				if (t) {
					// US Format - 1,234,567.89 -> 1234567.89
					s = s.replace(/,/g,'');
				} else {
					// German Format = 1.234.567,89 -> 1234567.89
					// French Format = 1 234 567,89 -> 1234567.89
					s = s.replace(/[\s|\.]/g,'').replace(/,/g,'.');
				}
				if(/^\s*\([.\d]+\)/.test(s)) {
					// make (#) into a negative number -> (10) = -10
					s = s.replace(/^\s*\(([.\d]+)\)/, '-$1');
				}
				i = parseFloat(s);
				// return the text instead of zero
				return isNaN(i) ? $.trim(s) : i;
			};

			ts.isDigit = function(s) {
				// replace all unwanted chars and match
				return isNaN(s) ? (/^[\-+(]?\d+[)]?$/).test(s.toString().replace(/[,.'"\s]/g, '')) : true;
			};

		}()
	});

	// make shortcut
	var ts = $.tablesorter;

	// extend plugin scope
	$.fn.extend({
		tablesorter: ts.construct
	});

	// add default parsers
	ts.addParser({
		id: "text",
		is: function() {
			return true;
		},
		format: function(s, table) {
			var c = table.config;
			if (s) {
				s = $.trim( c.ignoreCase ? s.toLocaleLowerCase() : s );
				s = c.sortLocaleCompare ? ts.replaceAccents(s) : s;
			}
			return s;
		},
		type: "text"
	});

	ts.addParser({
		id: "digit",
		is: function(s) {
			return ts.isDigit(s);
		},
		format: function(s, table) {
			var n = ts.formatFloat((s || '').replace(/[^\w,. \-()]/g, ""), table);
			return s && typeof n === 'number' ? n : s ? $.trim( s && table.config.ignoreCase ? s.toLocaleLowerCase() : s ) : s;
		},
		type: "numeric"
	});

	ts.addParser({
		id: "currency",
		is: function(s) {
			return (/^\(?\d+[\u00a3$\u20ac\u00a4\u00a5\u00a2?.]|[\u00a3$\u20ac\u00a4\u00a5\u00a2?.]\d+\)?$/).test((s || '').replace(/[,. ]/g,'')); // ?$????
		},
		format: function(s, table) {
			var n = ts.formatFloat((s || '').replace(/[^\w,. \-()]/g, ""), table);
			return s && typeof n === 'number' ? n : s ? $.trim( s && table.config.ignoreCase ? s.toLocaleLowerCase() : s ) : s;
		},
		type: "numeric"
	});

	ts.addParser({
		id: "ipAddress",
		is: function(s) {
			return (/^\d{1,3}[\.]\d{1,3}[\.]\d{1,3}[\.]\d{1,3}$/).test(s);
		},
		format: function(s, table) {
			var i, a = s ? s.split(".") : '',
			r = "",
			l = a.length;
			for (i = 0; i < l; i++) {
				r += ("00" + a[i]).slice(-3);
			}
			return s ? ts.formatFloat(r, table) : s;
		},
		type: "numeric"
	});

	ts.addParser({
		id: "url",
		is: function(s) {
			return (/^(https?|ftp|file):\/\//).test(s);
		},
		format: function(s) {
			return s ? $.trim(s.replace(/(https?|ftp|file):\/\//, '')) : s;
		},
		type: "text"
	});

	ts.addParser({
		id: "isoDate",
		is: function(s) {
			return (/^\d{4}[\/\-]\d{1,2}[\/\-]\d{1,2}/).test(s);
		},
		format: function(s, table) {
			return s ? ts.formatFloat((s !== "") ? (new Date(s.replace(/-/g, "/")).getTime() || "") : "", table) : s;
		},
		type: "numeric"
	});

	ts.addParser({
		id: "percent",
		is: function(s) {
			return (/(\d\s*?%|%\s*?\d)/).test(s) && s.length < 15;
		},
		format: function(s, table) {
			return s ? ts.formatFloat(s.replace(/%/g, ""), table) : s;
		},
		type: "numeric"
	});

	ts.addParser({
		id: "usLongDate",
		is: function(s) {
			// two digit years are not allowed cross-browser
			// Jan 01, 2013 12:34:56 PM or 01 Jan 2013
			return (/^[A-Z]{3,10}\.?\s+\d{1,2},?\s+(\d{4})(\s+\d{1,2}:\d{2}(:\d{2})?(\s+[AP]M)?)?$/i).test(s) || (/^\d{1,2}\s+[A-Z]{3,10}\s+\d{4}/i).test(s);
		},
		format: function(s, table) {
			return s ? ts.formatFloat( (new Date(s.replace(/(\S)([AP]M)$/i, "$1 $2")).getTime() || ''), table) : s;
		},
		type: "numeric"
	});

	ts.addParser({
		id: "shortDate", // "mmddyyyy", "ddmmyyyy" or "yyyymmdd"
		is: function(s) {
			// testing for ##-##-#### or ####-##-##, so it's not perfect; time can be included
			return (/(^\d{1,2}[\/\s]\d{1,2}[\/\s]\d{4})|(^\d{4}[\/\s]\d{1,2}[\/\s]\d{1,2})/).test((s || '').replace(/\s+/g," ").replace(/[\-.,]/g, "/"));
		},
		format: function(s, table, cell, cellIndex) {
			if (s) {
				var c = table.config, ci = c.headerList[cellIndex],
				format = ci.dateFormat || ts.getData( ci, c.headers[cellIndex], 'dateFormat') || c.dateFormat;
				s = s.replace(/\s+/g," ").replace(/[\-.,]/g, "/"); // escaped - because JSHint in Firefox was showing it as an error
				if (format === "mmddyyyy") {
					s = s.replace(/(\d{1,2})[\/\s](\d{1,2})[\/\s](\d{4})/, "$3/$1/$2");
				} else if (format === "ddmmyyyy") {
					s = s.replace(/(\d{1,2})[\/\s](\d{1,2})[\/\s](\d{4})/, "$3/$2/$1");
				} else if (format === "yyyymmdd") {
					s = s.replace(/(\d{4})[\/\s](\d{1,2})[\/\s](\d{1,2})/, "$1/$2/$3");
				}
			}
			return s ? ts.formatFloat( (new Date(s).getTime() || ''), table) : s;
		},
		type: "numeric"
	});

	ts.addParser({
		id: "time",
		is: function(s) {
			return (/^(([0-2]?\d:[0-5]\d)|([0-1]?\d:[0-5]\d\s?([AP]M)))$/i).test(s);
		},
		format: function(s, table) {
			return s ? ts.formatFloat( (new Date("2000/01/01 " + s.replace(/(\S)([AP]M)$/i, "$1 $2")).getTime() || ""), table) : s;
		},
		type: "numeric"
	});

	ts.addParser({
		id: "metadata",
		is: function() {
			return false;
		},
		format: function(s, table, cell) {
			var c = table.config,
			p = (!c.parserMetadataName) ? 'sortValue' : c.parserMetadataName;
			return $(cell).metadata()[p];
		},
		type: "numeric"
	});

	// add default widgets
	ts.addWidget({
		id: "zebra",
		priority: 90,
		format: function(table, c, wo) {
			var $tb, $tv, $tr, row, even, time, k, l,
			child = new RegExp(c.cssChildRow, 'i'),
			b = c.$tbodies;
			if (c.debug) {
				time = new Date();
			}
			for (k = 0; k < b.length; k++ ) {
				// loop through the visible rows
				$tb = b.eq(k);
				l = $tb.children('tr').length;
				if (l > 1) {
					row = 0;
					$tv = $tb.children('tr:visible').not(c.selectorRemove);
					// revered back to using jQuery each - strangely it's the fastest method
					/*jshint loopfunc:true */
					$tv.each(function(){
						$tr = $(this);
						// style children rows the same way the parent row was styled
						if (!child.test(this.className)) { row++; }
						even = (row % 2 === 0);
						$tr.removeClass(wo.zebra[even ? 1 : 0]).addClass(wo.zebra[even ? 0 : 1]);
					});
				}
			}
			if (c.debug) {
				ts.benchmark("Applying Zebra widget", time);
			}
		},
		remove: function(table, c, wo){
			var k, $tb,
				b = c.$tbodies,
				rmv = (wo.zebra || [ "even", "odd" ]).join(' ');
			for (k = 0; k < b.length; k++ ){
				$tb = $.tablesorter.processTbody(table, b.eq(k), true); // remove tbody
				$tb.children().removeClass(rmv);
				$.tablesorter.processTbody(table, $tb, false); // restore tbody
			}
		}
	});

})(jQuery);
} catch (err) {
    if (console && console.log && console.error) {
        console.log("Error running batched script.");
        console.error(err);
    }
}

;
;try {
/* module-key = 'gov.eop.omb.confluence.resources.MAX-Resources:design-resources', location = 'gov/eop/omb/confluence/resources/design/scripts/macros/table-options.js' */
function getDateFormat(){
    var dateFormat = AJS.Meta.get('date.format'),
        firstCharacter, retVal;

    if (dateFormat && dateFormat.length !== 0) {
        //we can assume enough from the first character
        firstCharacter = dateFormat.toLowerCase()[0];
        if (firstCharacter === 'm') {
            retVal = 'mmddyyyy';
        } else if (firstCharacter === 'd') {
            retVal = 'ddmmyyyy';
        } else if (firstCharacter === 'y') {
            retVal = 'yyyymmdd';
        }
    }
    return retVal;
}
var tableOptions = {};
tableOptions.tables = {};
tableOptions = {
        init: function(){
            tableOptions.tables = $('table');

            tableOptions.tables = tableOptions.tables.filter(function(){
                var cells = $(this).find('td, th'),
                    firstRowCells = this.rows.length && $(this.rows[0].cells),
                    cell, eventData;

                eventData = jQuery.Event("makeSortable.SortableTables");
                $(this).trigger(eventData);
                if (eventData.isDefaultPrevented()) {
                    return false;
                }

                if (!firstRowCells || firstRowCells.length === 0) { //there are no rows or no cells
                    return false;
                }
                //no colspan or rowspans > 1
                for (var i = 0, len = cells.length; i < len; i++) {
                    cell = cells[i];
                    if(cell.rowSpan != 1 || cell.colSpan != 1) {
                        return false;
                    }
                }

                //Header contains an inner table, not sortable
                if($(this.rows[0]).find('table').length){
                    return false;
                }

                // at least one cell in first row is not a th or have a class of nohighlight, not sortable
                if (firstRowCells.filter('th').length != firstRowCells.length || firstRowCells.hasClass('nohighlight'))
                    return false;

                // single row tables are not sortable
                return this.rows[1];
            });
        },
        enable: function(){
            tableOptions.tables.each(function(){
                // Changing this to use live dom nodes or something other than a document fragment has a
                // significant performance penalty. Modify with care.
                var body = this.removeChild(this.children[0]),
                    rows = $(body.children),
                    firstRow = Array.prototype.shift.call(rows),
                    fragment = document.createDocumentFragment(),
                    head = document.createElement("thead");

                fragment.appendChild(head);
                head.appendChild(firstRow);
                fragment.appendChild(body);

                this.appendChild(fragment);
            });

            confluenceDefaultOptions = {
                    "cssHeader" : 'sortableHeader',
                    "delayInit" : true,
                    "textExtraction" : function(node){
                        //Do the text trim manually since our version of jQuery fails at this.
                        return AJS.trim($(node).text());
                    },
                    "dateFormat": getDateFormat(),
                    widgets: ['zebra'] //added by Community team
                };
            
            jQuery(tableOptions.tables).not(".table-sorter table").tablesorter(confluenceDefaultOptions);
            
            var tableOptionsMacroTables = jQuery(".table-sorter table");
            console.log("trying to tablesort");
            console.log(tableOptionsMacroTables);
            jQuery.each(tableOptionsMacroTables, function() {
            	var evalMe = jQuery(this).parents("div.table-sorter").find("pre.table-options-config").text();
            	console.log("tablesorter evalMe: "+evalMe);
            	var options = eval(evalMe);
            	console.log("tablesorter options: "+options);
            	jQuery(this).tablesorter(jQuery.extend(confluenceDefaultOptions,options));
            });
        }
    };


jQuery(document).ready(function() {
	tableOptions.init();
	setTimeout(tableOptions.enable, 100);
});
} catch (err) {
    if (console && console.log && console.error) {
        console.log("Error running batched script.");
        console.error(err);
    }
}

;
;try {
/* module-key = 'gov.eop.omb.confluence.resources.MAX-Resources:design-resources', location = 'gov/eop/omb/confluence/resources/jQuery/jquery-hoverIntent/jquery.hoverIntent.js' */
/**
* hoverIntent is similar to jQuery's built-in "hover" function except that
* instead of firing the onMouseOver event immediately, hoverIntent checks
* to see if the user's mouse has slowed down (beneath the sensitivity
* threshold) before firing the onMouseOver event.
* 
* hoverIntent r5 // 2007.03.27 // jQuery 1.1.2+
* <http://cherne.net/brian/resources/jquery.hoverIntent.html>
* 
* hoverIntent is currently available for use in all personal or commercial 
* projects under both MIT and GPL licenses. This means that you can choose 
* the license that best suits your project, and use it accordingly.
* 
* // basic usage (just like .hover) receives onMouseOver and onMouseOut functions
* $("ul li").hoverIntent( showNav , hideNav );
* 
* // advanced usage receives configuration object only
* $("ul li").hoverIntent({
*	sensitivity: 7, // number = sensitivity threshold (must be 1 or higher)
*	interval: 100,   // number = milliseconds of polling interval
*	over: showNav,  // function = onMouseOver callback (required)
*	timeout: 0,   // number = milliseconds delay before onMouseOut function call
*	out: hideNav    // function = onMouseOut callback (required)
* });
* 
* @param  f  onMouseOver function || An object with configuration options
* @param  g  onMouseOut function  || Nothing (use configuration options object)
* @author    Brian Cherne <brian@cherne.net>
*/
(function($) {
	$.fn.hoverIntent = function(f,g) {
		// default configuration options
		var cfg = {
			sensitivity: 7,
			interval: 100,
			timeout: 0
		};
		// override configuration options with user supplied object
		cfg = $.extend(cfg, g ? { over: f, out: g } : f );

		// instantiate variables
		// cX, cY = current X and Y position of mouse, updated by mousemove event
		// pX, pY = previous X and Y position of mouse, set by mouseover and polling interval
		var cX, cY, pX, pY;

		// A private function for getting mouse position
		var track = function(ev) {
			cX = ev.pageX;
			cY = ev.pageY;
		};

		// A private function for comparing current and previous mouse position
		var compare = function(ev,ob) {
			ob.hoverIntent_t = clearTimeout(ob.hoverIntent_t);
			// compare mouse positions to see if they've crossed the threshold
			if ( ( Math.abs(pX-cX) + Math.abs(pY-cY) ) < cfg.sensitivity ) {
				$(ob).unbind("mousemove",track);
				// set hoverIntent state to true (so mouseOut can be called)
				ob.hoverIntent_s = 1;
				return cfg.over.apply(ob,[ev]);
			} else {
				// set previous coordinates for next time
				pX = cX; pY = cY;
				// use self-calling timeout, guarantees intervals are spaced out properly (avoids JavaScript timer bugs)
				ob.hoverIntent_t = setTimeout( function(){compare(ev, ob);} , cfg.interval );
			}
		};

		// A private function for delaying the mouseOut function
		var delay = function(ev,ob) {
			ob.hoverIntent_t = clearTimeout(ob.hoverIntent_t);
			ob.hoverIntent_s = 0;
			return cfg.out.apply(ob,[ev]);
		};

		// A private function for handling mouse 'hovering'
		var handleHover = function(e) {
			// next three lines copied from jQuery.hover, ignore children onMouseOver/onMouseOut
			var p = (e.type == "mouseover" ? e.fromElement : e.toElement) || e.relatedTarget;
			while ( p && p != this ) { try { p = p.parentNode; } catch(e) { p = this; } }
			if ( p == this ) { return false; }

			// copy objects to be passed into t (required for event object to be passed in IE)
			var ev = jQuery.extend({},e);
			var ob = this;

			// cancel hoverIntent timer if it exists
			if (ob.hoverIntent_t) { ob.hoverIntent_t = clearTimeout(ob.hoverIntent_t); }

			// else e.type == "onmouseover"
			if (e.type == "mouseover") {
				// set "previous" X and Y position based on initial entry point
				pX = ev.pageX; pY = ev.pageY;
				// update "current" X and Y position based on mousemove
				$(ob).bind("mousemove",track);
				// start polling interval (self-calling timeout) to compare mouse coordinates over time
				if (ob.hoverIntent_s != 1) { ob.hoverIntent_t = setTimeout( function(){compare(ev,ob);} , cfg.interval );}

			// else e.type == "onmouseout"
			} else {
				// unbind expensive mousemove event
				$(ob).unbind("mousemove",track);
				// if hoverIntent state is true, then call the mouseOut function after the specified delay
				if (ob.hoverIntent_s == 1) { ob.hoverIntent_t = setTimeout( function(){delay(ev,ob);} , cfg.timeout );}
			}
		};

		// bind the function to the two event listeners
		return this.mouseover(handleHover).mouseout(handleHover);
	};
})(jQuery);
} catch (err) {
    if (console && console.log && console.error) {
        console.log("Error running batched script.");
        console.error(err);
    }
}

;
;try {
/* module-key = 'gov.eop.omb.confluence.resources.MAX-Resources:design-resources', location = 'gov/eop/omb/confluence/resources/jQuery/jquery-uiTableFilter/jquery_142.uitablefilter.js' */
/*
 * Copyright (c) 2008 Greg Weber greg at gregweber.info
 * Dual licensed under the MIT and GPL licenses:
 * http://www.opensource.org/licenses/mit-license.php
 * http://www.gnu.org/licenses/gpl.html
 *
 * documentation at http://gregweber.info/projects/uitablefilter
 *
 * allows table rows to be filtered (made invisible)
 * <code>
 * t = $('table')
 * $.uiTableFilter( t, phrase )
 * </code>
 * arguments:
 *   jQuery object containing table rows
 *   phrase to search for
 *   optional arguments:
 *     column to limit search too (the column title in the table header)
 *     ifHidden - callback to execute if one or more elements was hidden
 */
jQuery.uiTableFilter = function(jq, phrase, column, ifHidden){
  var new_hidden = false;
  if( this.last_phrase === phrase ) return false;

  var phrase_length = phrase.length;
  var words = phrase.toLowerCase().split(" ");

  // these function pointers may change
  var matches = function(elem) { elem.removeClass("hidden"); elem.addClass("visible") }
  var noMatch = function(elem) { elem.addClass("hidden"); elem.removeClass("visible"); new_hidden = true }
  var getText = function(elem) { return elem.text() }

  if( column ) {
    var index = null;
    jq.find("thead > tr:last > th").each( function(i){
      if( $.trim($(this).text()) == column ){
        index = i; return false;
      }
    });
    if( index == null ) throw("given column: " + column + " not found")

    getText = function(elem){ return jQuery(elem.find(
      ("td:eq(" + index + ")")  )).text()
    }
  }

  // if added one letter to last time,
  // just check newest word and only need to hide
  if( (words.size > 1) && (phrase.substr(0, phrase_length - 1) ===
        this.last_phrase) ) {

    if( phrase[-1] === " " )
    { this.last_phrase = phrase; return false; }

    var words = words[-1]; // just search for the newest word

    // only hide visible rows
    matches = function(elem) {;}
    var elems = jq.find("tbody > tr:visible")
  }
  else {
    new_hidden = true;
    var elems = jq.find("tbody > tr")
  }

  elems.each(function(){
    var elem = jQuery(this);
    jQuery.uiTableFilter.has_words( getText(elem), words, false ) ?
      matches(elem) : noMatch(elem);
  });

  last_phrase = phrase;
  if( ifHidden && new_hidden ) ifHidden();
  return jq;
};

// caching for speedup
jQuery.uiTableFilter.last_phrase = ""

// not jQuery dependent
// "" [""] -> Boolean
// "" [""] Boolean -> Boolean
jQuery.uiTableFilter.has_words = function( str, words, caseSensitive )
{
  var text = caseSensitive ? str : str.toLowerCase();
  for (var i=0; i < words.length; i++) {
    if (text.indexOf(words[i]) === -1) return false;
  }
  return true;
}
} catch (err) {
    if (console && console.log && console.error) {
        console.log("Error running batched script.");
        console.error(err);
    }
}

;
;try {
/* module-key = 'gov.eop.omb.confluence.resources.MAX-Resources:design-resources', location = 'gov/eop/omb/confluence/resources/design/scripts/global-variables.js' */
// Global Variables
var clickEvents = [{}];
var clickEventsStartTime = new Date();

// Community Namespace
if(typeof community == 'undefined')
	community = {};

community.atlassianToken = jQuery("#atlassian-token").attr("content");

// Community Plugins Namespace
if(community.plugins == undefined)
	community.plugins = {};

//Community Page Namespace
if(community.page == undefined)
	community.page = {};

community.page.id = jQuery("#confluence-page-id").attr("content");

} catch (err) {
    if (console && console.log && console.error) {
        console.log("Error running batched script.");
        console.error(err);
    }
}

;
;try {
/* module-key = 'gov.eop.omb.confluence.resources.MAX-Resources:design-resources', location = 'gov/eop/omb/confluence/resources/design/scripts/initialize.js' */
// General functions to execute when page is ready.
jQuery(document).ready(function() {
	community.bindLinksForClickStatisitics();

	// Page Tree
	jQuery(".page-tree-toggle-button").click(community.page.pageTree.toggle);
	jQuery(".page-tree-close-button").click(community.page.pageTree.close);

	// ajax toggle add/remove page watch link
	jQuery_142("#start-watching-page-link").click(community.page.startPageWatch);
	jQuery_142("#stop-watching-page-link").click(community.page.stopPageWatch);
});

// Navigation Bar
jQuery("#navigation-bar-list").ready(function() {
	// Home Menu
	jQuery("#nav-home").hoverIntent({
		over: function() {
			jQuery("#jquery-nav-home-menu").removeClass("hidden");
			jQuery("#nav-home-link").addClass("active");
		},
		out: function() {
			jQuery("#jquery-nav-home-menu").addClass("hidden");
			jQuery("#nav-home-link").removeClass("active");
		}
	});

	// Find Stuff Menu
	jQuery("#nav-find-content").hoverIntent({
		over: function() {
			jQuery("#jquery-findstuff-menu").removeClass("hidden");
			jQuery("#nav-find-content-link").addClass("active");
		},
		out: function() {
			jQuery("#jquery-findstuff-menu").addClass("hidden");
			jQuery("#nav-find-content-link").removeClass("active");
		}
	});

	// Help Menu
	jQuery("#nav-help").hoverIntent({
		over: function() {
			jQuery("#jquery-help-menu").removeClass("hidden");
			jQuery("#nav-menu-help-link").addClass("active");
		},
		out: function() {
			jQuery("#jquery-help-menu").addClass("hidden");
			jQuery("#nav-menu-help-link").removeClass("active");
		}
	});

	// Advanced Menu
	jQuery("#nav-advanced").hoverIntent({
		over: function() {
			jQuery("#jquery-advanced-menu").removeClass("hidden");
			jQuery("#nav-advanced-link").addClass("active");
		},
		out: function() {
			jQuery("#jquery-advanced-menu").addClass("hidden");
			jQuery("#nav-advanced-link").removeClass("active");
		}
	});

	// Page Link Dialog
	jQuery("#jquery-link-to-page, #jquery-link-to-page2").click(community.page.generatePageLinkDialog);

});

// #################################
// New Compressed Header Menus
// #################################
jQuery(document).ready(function() {
	// New standard drop down JS
	jQuery("li.max-standard-dropdown-li").hover(function () {
		jQuery(this).find("div.dropdown").removeClass("hidden");
		jQuery(this).addClass("active");
	}, function () {
		jQuery(this).find("div.dropdown").addClass("hidden");
		jQuery(this).removeClass("active");
	});

	jQuery("#nav-contact-us-menu").mouseenter(function () {
		jQuery(this).prev("a").css("background", "white").css("color", "#3a81c4");
	}).mouseleave(function () {
		jQuery(this).prev("a").css("background", "").css("color", "");
	});
});


	/* ########## New Styles for Topnav Keyboard Accessibility ########## */
jQuery(document).ready(function() {

	/*
	$(".max-standard-dropdown-li").focusin(function() {
		$(this).addClass("active");
		$(this).find(".dropdown").removeClass("hidden");
	});

	$(".max-standard-dropdown-li").focusout(function() {
		$(this).removeClass("active");
		$(this).find(".dropdown").addClass("hidden");
	});
	*/

	var focused = '';
		$('li.max-standard-dropdown-li, #header-search-options-wrapper').focusin(function() {
			if (!focused || focused != this) {
				$(focused).find("div.dropdown, #jquery-search-options-menu").addClass("hidden");
				$(focused).removeClass("active");
				focused = this;
			}
			$(this).find("div.dropdown, #jquery-search-options-menu").removeClass("hidden");
			$(this).addClass("active");
		});

		$(':focusable:not("li.max-standard-dropdown-li,#header-search-options-wrapper")').focusin(function() {
			if(focused) {
				$(focused).find("div.dropdown, #jquery-search-options-menu").addClass("hidden");
				$(focused).removeClass("active");
				focused= '';
			}
		});

	/* ########## END New Styles for Topnav Keyboard Accessibility ########## */
	
});

/*
jQuery(document).ready(function() {
	$("#header-search-options-wrapper").focusin(function() {
		$(this).addClass("active");
		$(this).find("#jquery-search-options-menu").removeClass("hidden");
	});

	$("#header-search-options-wrapper").focusout(function() {
		$(this).removeClass("active");
		$(this).find("#jquery-search-options-menu").addClass("hidden");
	});
});
*/

// Search
jQuery("#nav-bar-search").ready(function() {
	// Search Overlay
	jQuery("#quick-search-query").focus(function() {
		jQuery("#quick-search-overlay").addClass("hidden");
	});

	jQuery("#quick-search-overlay").click(function() {
		jQuery("#quick-search-overlay").addClass("hidden");
		jQuery("#quick-search-query").focus();
	});

	jQuery("#quick-search-query").blur(function() {
		var text = jQuery("#quick-search-query").val();

		if (text == "")
			jQuery("#quick-search-overlay").removeClass("hidden");
	});

	jQuery("a#button-last-editedby-link.button-header.button-header-last-edited").focus(function() {
		jQuery("div.aui-dropdown.recently-viewed-dropdown.aui-dropdown-left").addClass("hidden");
	});
});


// User
jQuery("#headerBottomRight").ready(function() {
	// User Menu
	jQuery("#jquery-user-menu").hoverIntent(function() {
		jQuery("#user-menu-dropdown").removeClass("hidden");
		jQuery(this).addClass("active");
	}, function() {
		jQuery("#user-menu-dropdown").addClass("hidden");
		jQuery(this).removeClass("active");
	});
});

// Page Toolbar Menu
jQuery("#toolbar-buttons").ready(function() {
	// Last Edited By Menu
	jQuery("#button-last-edited-by").hoverIntent(function() {
		jQuery("#button-last-edited-by-div").removeClass("hidden");
		jQuery(this).addClass("active");
	}, function() {
		jQuery("#button-last-edited-by-div").addClass("hidden");
		jQuery(this).removeClass("active");
	});

	// no edit page perm button message
	jQuery("#button-edit-page").hoverIntent(function() {
		jQuery("#button-no-perm-edit-page").removeClass("hidden");
		jQuery("#button-edit-page").addClass("active");
	}, function() {
		jQuery("#button-no-perm-edit-page").addClass("hidden");
		jQuery("#button-edit-page").removeClass("active");
	});

	jQuery("#btn-add-attachment, #btn-add-attachment-disabled").hoverIntent(function() {
		jQuery("#attach-no-perm-edit").removeClass("hidden");
		jQuery("#btn-add-attachment, #btn-add-attachment-disabled").addClass("active");
	}, function() {
		jQuery("#attach-no-perm-edit").addClass("hidden");
		jQuery("#btn-add-attachment, #btn-add-attachment-disabled").removeClass("active");
	});

	// Add Content Menu
	jQuery("#button-add-new-content").hoverIntent(function() {
		jQuery("#button-add-new-content-div").removeClass("hidden");
		jQuery("#button-add-new-content").addClass("active");
	}, function() {
		jQuery("#button-add-new-content-div").addClass("hidden");
		jQuery("#button-add-new-content").removeClass("active");
	});

	// bind add content attachments link
	jQuery("#add-attachment-menu-link").click(function() {
		jQuery.scrollTo("#page-controls-attachments-padding");
		jQuery_142("#btn-add-attachment").click();

		return false;
	});

	// Page Options Menu
	jQuery("#button-page-options").hoverIntent(function() {
		jQuery("#button-page-options-div").removeClass("hidden");
		jQuery("#button-page-options").addClass("active");
	}, function() {
		jQuery("#button-page-options-div").addClass("hidden");
		jQuery("#button-page-options").removeClass("active");
	});

	// Favorite Menu
	jQuery("#button-favorites").hoverIntent({
		over: function() {
			// load favs
			loadReadOnlyFavoritesTree();
			jQuery("#jquery-favorite-menu").removeClass("hidden");
			jQuery(this).addClass("active");

		},
		out: function() {

			jQuery("#jquery-favorite-menu").addClass("hidden");
			jQuery(this).removeClass("active");
		}
	});

	// bind manage favorites button
	jQuery("#jquery-favorites-manage-button").click(function() {
		generateManageFavoriteDialog();
		return false;
	});

	// E-Mail Alerts Menu
	jQuery("#button-email-alerts").hoverIntent(function() {
		jQuery("#button-email-alerts-div").removeClass("hidden");
		jQuery("#button-email-alerts").addClass("active");
	}, function() {
		jQuery("#button-email-alerts-div").addClass("hidden");
		jQuery("#button-email-alerts").removeClass("active");
	});
});

// Breadcrumbs
jQuery("#toolbar-breadcrumbs").ready(function() {
	// Child Pages Menu
	jQuery("#jquery-child-pages-menu").hoverIntent(function() {
		jQuery("#child-pages").removeClass("hidden");
		jQuery("#jquery-child-pages-menu").addClass("active");
		jQuery("#jquery-child-pages-menu").children("span").addClass("active");
	}, function() {
		jQuery("#child-pages").addClass("hidden");
		jQuery("#jquery-child-pages-menu").removeClass("active");
		jQuery("#jquery-child-pages-menu").children("span").removeClass("active");
	});
});

// Attachments Section
jQuery("#page-controls-attachments-padding").ready(function() {
	// attachments header options drop down
	jQuery("#attachments-header-options-menu").hoverIntent(function() {
		jQuery("#attachments-header-options-div").removeClass("hidden");
		jQuery("#attachments-header-options-menu").addClass("active");
	}, function() {
		jQuery("#attachments-header-options-div").addClass("hidden");
		jQuery("#attachments-header-options-menu").removeClass("active");
	});

	// bind toggle attachments sort
	jQuery("#btn-sort-attachment").click(function() {
		var isAttachmentsSectionCollapse = userPreferences.getAttachmentsSectionCollapse();

		if (isAttachmentsSectionCollapse == true)
			jQuery_142("#jquery-attach-expand").click();

		if (jQuery("#page-controls-attachments-sorting").hasClass("hidden")) {
			jQuery("#page-controls-attachments-sorting").removeClass("hidden");
			jQuery("#page-controls-attachments-sorting").css("display", "block");
		} else {
			jQuery("#page-controls-attachments-sorting").addClass("hidden");
			jQuery("#page-controls-attachments-sorting").css("display", "none");
		}

		return false;
	});
});

// Labels Section
jQuery("#page-controls-labels").ready(function() {
	jQuery("#labels-edit").click(function() {
		jQuery("#labels-wrapper .remove-label").removeClass("hidden");
		jQuery("#labels-wrapper .default-state-label").addClass("hidden");
	});

	jQuery("#close-labels-editor-button").click(function() {
		jQuery("#labels-wrapper .remove-label").addClass("hidden");
		jQuery("#labels-wrapper .default-state-label").removeClass("hidden");
	});
});

// jBreadCrumb
jQuery(document).ready(function() {
	jQuery("#breadcrumbs-list-collapsing").jBreadCrumb({
		easing: 'swing'
	});

    jQuery("#expand-all-breadcrumbs").click(function() {
        if( !jQuery(this).hasClass("all-breadcrumbs-expanded") ) {
            jQuery(this).addClass("all-breadcrumbs-expanded");
            jQuery("li.breadcrumb-item").trigger("mouseover");
            jQuery(this).addClass("active");
        } else {
            jQuery(this).removeClass("all-breadcrumbs-expanded");
            jQuery("li.breadcrumb-item").trigger("mouseout");
            jQuery(this).removeClass("active");
        }
    });
});



// Max Dropdown Show/hide global
jQuery(document).ready(function() {
	jQuery("div.wiki-dropdown-menu").hoverIntent({
		over: function() {
			jQuery(this).find("div.dropdown-container").removeClass("hidden");
			jQuery(this).addClass("active");
		},
		out: function() {
			jQuery(this).find("div.dropdown-container").addClass("hidden");
			jQuery(this).removeClass("active");
		}
	});

});

} catch (err) {
    if (console && console.log && console.error) {
        console.log("Error running batched script.");
        console.error(err);
    }
}

;
;try {
/* module-key = 'gov.eop.omb.confluence.resources.MAX-Resources:design-resources', location = 'gov/eop/omb/confluence/resources/design/scripts/legacy.js' */
/*
 * I think these functions have to do with fedspace functionality where we were trying to apply a style to a particular space.
 * 
 * - fj2096
 * 
 */

//function to read url parameter values
//function getURLParameter(name)
//{
//	var pattern = "[\\?&]"+name+"=([^&#]*)";
//	var regex = new RegExp( pattern );
//	var res = regex.exec( window.location.href );
//	if (res == null) {
//		return "";
//
//	} else {
//		return res[1];
//	}
//}

//process URL param for theme and add in stylesheet
//var shouldApplyFedspaceMinimalTheme = readCookie('should-fedspace-theme-minimal'); 
//var spaceKeyForThemimg = jQuery("#confluence-space-key").attr("content");
//if ( (getURLParameter("theme") == "fedspace" && spaceKeyForThemimg == "FedSpace" ) 
//		|| (shouldApplyFedspaceMinimalTheme == "true") && (spaceKeyForThemimg == "FedSpace" || spaceKeyForThemimg == "undefined" )   ) {
//	// undefined space key mean glaobal interfaces such as user profile, continue themeing there
//	AJS.log("--------> Fedspace theme param found and spacekey or cookie value: " + shouldApplyFedspaceMinimalTheme);
//	//jQuery("head").prepend("<link type='text/css' rel='stylesheet' href='/community/s/1814/86/1.2.6.28/_/download/batch/gov.eop.omb.confluence.resources.MAX-Resources:design-resources-fedspace-minimal/gov.eop.omb.confluence.resources.MAX-Resources:design-resources-fedspace-minimal.css' media='all'>");
//	jQuery("head").prepend("<link id='fedspace-minimal-css-link' type='text/css' rel='stylesheet' href='https://test.max.gov/community/s/1814/23/1.7.5.70/_/download/batch/gov.eop.omb.confluence.resources.MAX-Resources:design-resources-fedspace-minimal/gov.eop.omb.confluence.resources.MAX-Resources:design-resources-fedspace-minimal.css' media='all'>");
//	setCookie("should-fedspace-theme-minimal", "true", 0);
//}

jQuery(document).ready(function()
{
	// bind show file sizes
	jQuery("#show-file-size-attachments-link").click(function()
	{
		jQuery(".attach-icons span.file-size").removeClass("hidden");
		return false;
	});
	
	// Attachments Button ScrollTo
	jQuery("#jquery-attachments-link").click(function(){ 
		var isAttachmentsSectionCollapse = userPreferences.getAttachmentsSectionCollapse();
		if (isAttachmentsSectionCollapse == true) { jQuery_142("#jquery-attach-expand").click(); }
		jQuery.scrollTo("#page-controls-attachments", { offset: -40 });			
		return false;
	});
});

//stop watching page for My Page Watches Lightbox
function stopWatchingPageAJAX(pageId, element) {
	jQuery.ajax({
		type: 'POST',
		async: false,
		url: contextPath + '/pages/stopwatching.action',
		data: "entityId=" + pageId+ "&atl_token=" + jQuery_142("#atlassian-token").attr("content"),
		success: function() {
		// remove li
		jQuery(element).parent().slideUp(200);
		},
		dataType: 'json'
	});
}

//spaces macro add favorites spaces 
/*

This js file allows to mark a space as a favourite (global or personal) by clicking the star icon.
Since this function is used in a couple places, the code was moved into a seperate include file.

NOTE: When using this javascript include, you will have to make sure that the context fullfills the following requirements:

- contextPath variable has to be set (otherwise the action can not be found).

*/

var operationInProgressArray = new Array(); // use this array to prevent the user from triggering off another labelling operation when one is in progress

function toggleStar(imgElement)
{
   var imagePath = jQuery(imgElement).attr('src');
   if (jQuery(imgElement).attr('src').indexOf("star_grey.gif") != -1)
	   jQuery(imgElement).attr('src', contextPath + '/images/icons/star_yellow.gif');
   else
	   jQuery(imgElement).attr('src', contextPath + '/images/icons/star_grey.gif');
}

function addOrRemoveFromFavourites(spaceKey, imgElement)
{
   var link = imgElement;
   imgElement = jQuery(imgElement).find("img");
   if (operationInProgressArray[jQuery(imgElement).attr('id')] == null) {

       operationInProgressArray[jQuery(imgElement).attr('id')] = true;

       var url;
       var jquerySetFavText;

       
       if (jQuery(imgElement).attr('src').indexOf("star_yellow.gif") != -1) { // if on
           url = contextPath + "/labels/removespacefromfavourites.action";
           jquerySetFavText = jQuery(link).find("span").text("Add");
       }
       else {
           url = contextPath + "/labels/addspacetofavourites.action";
           jquerySetFavText = jQuery(link).find("span").text("Remove");
       }

       AJS.safe.ajax({
           url: url,
           type: "POST",
           data: { "key" : spaceKey },
           success: function() {
               toggleStar(imgElement);
               jquerySetFavText;
               operationInProgressArray[jQuery(imgElement).attr('id')] = null;
           },
           error: function(xhr, text, error) {
               alert("Error : " + text);
               operationInProgressArray[jQuery(imgElement).attr('id')] = null;
            }
       });
   }
}

// if the user switches tabs while spaces are still being labelled, this function will prevent this from happening.
// allowing a location change in the middle of xmlhttp requests causes exceptions to be thrown in firefox (although, they seem to be ignored by ie).
// this is important in high latency environments where users may get impatient.
function gotoUrl(url)
{
   for (var elementId in operationInProgressArray)
   {
       if (operationInProgressArray[elementId] == true)
           return;
   }
   window.location = url;
}



// Support for raw AJAX
function getXmlHttp() {
    var XMLHttpFactories = [
        function() {return new XMLHttpRequest();},
        function() {return new ActiveXObject("Msxml2.XMLHTTP");},
        function() {return new ActiveXObject("Msxml3.XMLHTTP");},
        function() {return new ActiveXObject("Microsoft.XMLHTTP");},
        function() {return new ActiveXObject("Msxml2.XMLHTTP.3.0");},
        function() {return new ActiveXObject("Msxml2.XMLHTTP.4.0");}
    ];
    var xmlhttp = false, xhr = null;
    for (var i = 0, ii = XMLHttpFactories.length; i < ii; i++) {
        try {
            xhr = XMLHttpFactories[i];
            xmlhttp = xhr();
        }
        catch(e) {
            continue;
        }
        break;
    }
    arguments.callee = function() {
        return xhr();
    };
    return xmlhttp;
}


/*

This js file allows to mark a space as a homepage by clicking the house icon.

NOTE: When using this javascript include, you will have to make sure that the context fullfills the following requirements:

- contextPath variable has to be set (otherwise the action can not be found).

 */

var operationInProgressArray2 = new Array(); // use this array to prevent the user from triggering off another labelling operation when one is in progress

function toggleHomeIcon(imgElement)
{
	//first set all to grey, then turn on the new homepage icon
	var x = document.getElementsByName("spaceHomeImg");
	for (i = 0; i < x.length; i++) {
		x[i].src = contextPath + '/images/icons/home_16_grey.gif'; 
	}
	
	var imagePath = imgElement.src;
	if (imgElement.src.indexOf("/images/icons/home_16.gif") != -1)
		imgElement.src = contextPath + '/images/icons/home_16_grey.gif';
	else
		imgElement.src = contextPath + '/images/icons/home_16.gif';
		
	//set all rows class to non-highlight then set new homepage row to highlight class	
	var y = document.getElementsByTagName("tr");
	for (j = 0; j < y.length; j++) {
        if (y[j].getAttribute('name') == "spaceRow") {
			//set class for all to normal
			y[j].setAttribute('class','spaceList');
			y[j].setAttribute('className','spaceList'); //for IE....			
			//set target row to highlight if it has the target img in it
			if (y[j].getElementsByTagName("img")[0] == imgElement ) {
			   //set class for highlight
			   y[j].setAttribute('class','spaceList highlightRow');
			   y[j].setAttribute('className','spaceList highlightRow'); //for IE....		
			}
		}
	}
}

function addHomePage(spaceKey, imgElement)
{
	if (operationInProgressArray2[imgElement.id] == null)
	{
		operationInProgressArray2[imgElement.id] = true;

		var xmlhttp = getXmlHttp();

		imgElement["title"] = "Set this space as your home space.";
		var url = contextPath + "/users/sethomepage.action?spaceKeyParam=" + spaceKey

		xmlhttp.open("GET", url);
		xmlhttp.onreadystatechange = function()
		{
			if (xmlhttp.readyState == 4)
			{
				try
				{
					if (xmlhttp.status == 200)
					{
						toggleHomeIcon(imgElement); //change icon to light on house   
						jQuery("span.spaces-list-your-home").html(""); // clear all
						jQuery("#jquery-space-list-your-home-" + spaceKey ).html("(This is your home space)"); // add text
						// reset the reset to default link to work (in case they did select a space again
						jQuery("#spaceHome-reset-default").html("Reset Home Space to default (the Dashboard)"); // rest html
						jQuery("#spaceHome-reset-default").removeClass("homespace-reset-link-success").addClass("homespace-reset-link");
						jQuery("#spaceHome-reset-default").attr("onClick", "resetHomePage(this);");
						operationInProgressArray2[imgElement.id] = null;
					}
					else
					{
						alert("An error occured when trying to set your home space." + xmlhttp.responseText);
					}
				}
				catch(e)
				{
					alert("Exception thrown: " + e);
				}
			}
		}
		xmlhttp.send(null);
	}
}


function resetHomePage(imgElement)
{
    if (operationInProgressArray2[imgElement.id] == null)
    {
        operationInProgressArray2[imgElement.id] = true;

        var xmlhttp = getXmlHttp();

        imgElement["title"] = "Set this space as your home space.";
        var url = contextPath + "/users/sethomepage.action?spaceKeyParam=siteHomepage" 

        xmlhttp.open("GET", url);
        xmlhttp.onreadystatechange = function()
        {
            if (xmlhttp.readyState == 4)
            {
                try
                {
                    if (xmlhttp.status == 200)
                    {
                        //toggleHomeIcon(imgElement); //change icon to light on house   
                        jQuery("span.spaces-list-your-home").html(""); // clear all
                        jQuery("#spaceHome-reset-default").text("Your home space has been sucessfully reset."); // add text
                        jQuery("#spaceHome-reset-default").addClass("homespace-reset-link-success").removeClass("homespace-reset-link");
						jQuery("#spaceHome-reset-default").attr("onClick", "");
                        operationInProgressArray2[imgElement.id] = null;
                    }
                    else
                    {
                        alert("An error occured when trying to set your home space." + xmlhttp.responseText);
                    }
                }
                catch(e)
                {
                    alert("Exception thrown: " + e);
                }
            }
        }
        xmlhttp.send(null);
    }
}


//if the user switches tabs while spaces are still being labelled, this function will prevent this from happening.
//allowing a location change in the middle of xmlhttp requests causes exceptions to be thrown in firefox (although, they seem to be ignored by ie).
//this is important in high latency environments where users may get impatient.
function gotoUrl(url)
{
	for (var elementId in operationInProgressArray2)
	{
		if (operationInProgressArray2[elementId] == true)
			return;
	}
	window.location = url;
}
} catch (err) {
    if (console && console.log && console.error) {
        console.log("Error running batched script.");
        console.error(err);
    }
}

;
;try {
/* module-key = 'gov.eop.omb.confluence.resources.MAX-Resources:design-resources', location = 'gov/eop/omb/confluence/resources/design/scripts/header-search.js' */
// new search feature (All, This Space, Below This page)
jQuery(document).ready(function()
{
	
	jQuery("#nav-bar-search form").submit(function()
	{
		 var selectedOption = jQuery(this).find('#jquery-header-search-options-select option:selected').attr('id');
		 
		 if (selectedOption == "header-search-option-page") 
		 {
			  var queryTerm = jQuery(this.queryString).val();
			  jQuery(this.queryString).val(queryTerm + " AND ancestorIds:" + jQuery("#header-search-option-page").val());
		 } 
		 else if (selectedOption == "header-search-option-space") 
		 {
			 jQuery(this).prepend("<input type='hidden' value=" + jQuery("input[name='spaceKey']").val() + " name='where' />");
		 } 
	}) 
	
	/*jQuery("#jquery-search-selected-option").click( function () {
		
		if (jQuery(this).hasClass("active")) 
		{
			jQuery(this).removeClass("active");
			jQuery("#jquery-search-options-menu").addClass("hidden");
		} 
		else 
		{
			jQuery(this).addClass("active");
			jQuery("#jquery-search-options-menu").removeClass("hidden");
		}
		
		return false;
	});	*/
	
	jQuery("#header-search-options-wrapper").hoverIntent({
		over: function()
		{ 
			jQuery("#jquery-search-options-menu").removeClass("hidden");
			jQuery(this).addClass("active");
		}, 
		out: function()
		{ 
			jQuery("#jquery-search-options-menu").addClass("hidden");
			jQuery(this).removeClass("active");
		}
	});
	
	
	jQuery("#header-search-option-menu-all").click( function (){ 
		
		var hideAutocompleteStyleTag = jQuery("#hide-nav-bar-search-autocomplete");
		jQuery("#jquery-header-search-options-select option").removeAttr('selected'); 
		jQuery("#header-search-option-all").attr('selected', 'selected');	
		
		if (hideAutocompleteStyleTag.size() > 0) 
		{
			jQuery(hideAutocompleteStyleTag).remove();
		}
		
		jQuery("#jquery-search-selected-option span").html("All");
		jQuery("#jquery-search-options-menu ul li").removeClass("selected-search-option");
		jQuery(this).parent().addClass("selected-search-option");
		

		jQuery("#jquery-search-selected-option").click();
		
		return false;
	});
	
	jQuery("#header-search-option-menu-space").click( function (){ 
		
		var hideAutocompleteStyleTag = jQuery("#hide-nav-bar-search-autocomplete");
		jQuery("#jquery-header-search-options-select option").removeAttr('selected'); 
		jQuery("#header-search-option-space").attr('selected', 'selected');		
		
		if (hideAutocompleteStyleTag.size() == 0) 
		{
			jQuery("#nav-bar-search").prepend("<style id='hide-nav-bar-search-autocomplete'>#nav-bar-search-wrapper div.aui-dd-parent.quick-nav-drop-down {display: none ! important;} </style>");
		}
		
		jQuery("#jquery-search-selected-option span").html("Space");
		jQuery("#jquery-search-options-menu ul li").removeClass("selected-search-option");
		jQuery(this).parent().addClass("selected-search-option");
		
		jQuery("#jquery-search-selected-option").click();
		
		return false;
	});

	jQuery("#header-search-option-menu-page").click( function (){ 
	
		var hideAutocompleteStyleTag = jQuery("#hide-nav-bar-search-autocomplete");
		jQuery("#jquery-header-search-options-select option").removeAttr('selected'); 
		jQuery("#header-search-option-page").attr('selected', 'selected');	
		
		if (hideAutocompleteStyleTag.size() == 0) 
		{
			jQuery("#nav-bar-search").prepend("<style id='hide-nav-bar-search-autocomplete'>#nav-bar-search-wrapper div.aui-dd-parent.quick-nav-drop-down {display: none ! important;} </style>");
		}
		
		jQuery("#jquery-search-selected-option span").html("Page");
		jQuery("#jquery-search-options-menu ul li").removeClass("selected-search-option");
		jQuery(this).parent().addClass("selected-search-option");
		
		jQuery("#jquery-search-selected-option").click();
	
		return false;
	});
	
	// for 508 we leave this in
	jQuery("#jquery-header-search-options-select").change(function() {

		// when anything but all is selected hide the autocomplete
		var selectedOption = jQuery(this).find('option:selected').attr('id');
		var hideAutocompleteStyleTag = jQuery("#hide-nav-bar-search-autocomplete");
		
		if (selectedOption == "header-search-option-page") // PAGE
		{
			if (hideAutocompleteStyleTag.size() == 0) 
			{
				jQuery("#nav-bar-search").prepend("<style id='hide-nav-bar-search-autocomplete'>#nav-bar-search-wrapper div.aui-dd-parent.quick-nav-drop-down {display: none ! important;} </style>");
			}
			// hide selected option in list, show others
			jQuery("#header-search-option-page").addClass("hidden").html("Page");
			jQuery("#header-search-option-all").removeClass("hidden");
			jQuery("#header-search-option-space").removeClass("hidden").html("This Space");
		} 
		else if (selectedOption == "header-search-option-space") // SPACE
		{
			if (hideAutocompleteStyleTag.size() == 0) 
			{
				jQuery("#nav-bar-search").prepend("<style id='hide-nav-bar-search-autocomplete'>#nav-bar-search-wrapper div.aui-dd-parent.quick-nav-drop-down {display: none ! important;} </style>");
			}
			// hide selected option in list, show others
			jQuery("#header-search-option-page").removeClass("hidden").html("This Page and Below");
			jQuery("#header-search-option-all").removeClass("hidden");
			jQuery("#header-search-option-space").addClass("hidden").html("Space");
		} 
		else if (selectedOption == "header-search-option-all")  // ALL
		{
			if (hideAutocompleteStyleTag.size() > 0) 
			{
				jQuery(hideAutocompleteStyleTag).remove();
			}
			// hide selected option in list, show others
			jQuery("#header-search-option-page").removeClass("hidden").html("This Page and Below");
			jQuery("#header-search-option-all").addClass("hidden");
			jQuery("#header-search-option-space").removeClass("hidden").html("This Space");
		}
				
	});
	
	
	jQuery("#jquery-header-advanced-search").click(function () 
	{ 
		jQuery("#search_Button").click(); 
	});
	
	
	
	
});	
} catch (err) {
    if (console && console.log && console.error) {
        console.log("Error running batched script.");
        console.error(err);
    }
}

;
;try {
/* module-key = 'gov.eop.omb.confluence.resources.MAX-Resources:design-resources', location = 'gov/eop/omb/confluence/resources/design/scripts/labels-section.js' */
// Default Label Functionality
AJS.toInit(function ($) {
    if (!$("#add-labels-form").length) {
        return;
    }

    $("#labels-edit").click(function () {
        SuggestedLabelsForEntity.viewLabels(AJS.params.pageId, AJS.Labels.suggestedLabelsCallback);
        // reset the value of this field, just in case the browser wants to become helpful and insert the old value
        $("#labelsString").val("");
        $("#labels-section").addClass("open");
        $("#add-labels-form").show();

        // update the links
        AJS.setVisible(".show-labels-editor", false);

        $("#labelsString").get(0).focus();
        return false;
    });
    $("#close-labels-editor-button").click(function () {
        // clear out any error messages
        AJS.Labels.labelOperationError("");
        $("#errorSpan").html("");
        $("#labels-section").removeClass("open");
        $("#add-labels-form").hide();

        // update the links
        AJS.setVisible("a.hide-labels-editor", false);
        AJS.setVisible(".show-labels-editor", true);
        if ($("#labelsList").children().length == 0 && $("#labelsString").val() == "") { // no labels
            $(".show-labels-editor").addClass("add").text(AJS.params.addLabel);
            AJS.setVisible("#labels-section-title", false);
        }
        else {
            $(".show-labels-editor").removeClass("add").text(AJS.params.editLabel);
            AJS.setVisible("#labels-section-title", true);
        }

        // add label if any user input
        AJS.Labels.addLabelFromInput();
        return false;
    });

    $("#add-labels-form").submit(AJS.Labels.addLabelFromInput);
    $(".labels-editor .add-labels").click(AJS.Labels.addLabelFromInput);
    $(".labels-editor .remove-label").click(AJS.Labels.removeLabel);

    // add return key handling to the label field
    $("#labelsString").keydown(function (event) {
        if (event.which == 13 && !AJS.dropDown.current) {
            AJS.Labels.addLabelFromInput();
            return AJS.stopEvent(event);
        }
    });
});
} catch (err) {
    if (console && console.log && console.error) {
        console.log("Error running batched script.");
        console.error(err);
    }
}

;
;try {
/* module-key = 'gov.eop.omb.confluence.resources.MAX-Resources:design-resources', location = 'gov/eop/omb/confluence/resources/design/scripts/page.js' */
//Community Namespace
if ( typeof community == 'undefined' )
	community = {};

//Community Page Namespace
if ( community.page == undefined )
	community.page = {};

//COP-3273: Updated functions below to support displaying full and current watcher counts

community.page._onStartPageWatch = function() { 
	var start = $( '#start-watching-page-link' ).parent(),
		stop = $( '#stop-watching-page-link' ).parent(); 

	// update the start/stop links
	start.addClass( 'hidden' );
	stop.removeClass( 'hidden' );

	// increment counter
	community.page.setWatcherCount( community.page.getWatcherCount() + 1, community.page.getFullWatcherCount() + 1 );

	// change icon
	$( '#watch-toolbar-icon' ).addClass( 'watched' ).removeClass( 'not-watched' );
}

/**
 * Start watching the page for the current user.
 */
community.page.startPageWatch = function () {
	$.ajax( {
		type: 'POST',
		async: false,
		url: contextPath +'/pages/startwatching.action',
		data: 'entityId='+ community.page.id +'&atl_token='+ community.atlassianToken,
		success: community.page._onStartPageWatch,
		dataType: 'json'
	} );

	return false;
};

/**
 * @return Returns the current watch lits count (integer).
 */
community.page.getWatcherCount = function() {
	var count = parseInt( $( '#menu-title-watcher-count' ).html().match( /\d+/ )[ 0 ], 10 ); 
	
	return isNaN( count ) ? 0 : count;
}

community.page.getFullWatcherCount = function() {
	var count = parseInt( $( '#menu-title-watcher-count' ).html().match( /\d+/g )[ 1 ], 10 ); 
	
	return isNaN( count ) ? 0 : count;
}

/**
 * Update the number of watchers for the page.
 * 
 * @param counter Number to change the watch list text to.
 */
community.page.setWatcherCount = function( counter, fullCounter ) {
	var message = $( '#menu-item-watcher-count' );
	
	$( '#menu-title-watcher-count' ).html( '('+ counter + ' of ' + fullCounter + ')' );
	
	switch ( fullCounter ) {
		case 0:
			message.html( 'Nobody is Watching this Page' );
			break;
		
		case 1:
			message.html( '1 Person is Watching this Page' );
			break;
			
		default:
			message.html( counter +' People are Watching this Page' );
	}
}

/**
 * Handle the stop listening backend response.
 */
community.page._onStopPageWatch = function() {
	var start = $( '#start-watching-page-link' ).parent(),
		stop = $( '#stop-watching-page-link' ).parent(); 

	// update links
	start.removeClass( 'hidden' );
	stop.addClass("hidden");
	
	// decrement counter
	community.page.setWatcherCount( community.page.getWatcherCount() - 1, community.page.getFullWatcherCount() - 1 );

	// change icon
	$( '#watch-toolbar-icon' ).removeClass( 'watched' ).addClass( 'not-watched' );
}

/**
 * Stop watching the page for the current user.
 */
community.page.stopPageWatch = function() {
	$.ajax( {
		type: 'POST',
		async: false,
		url: contextPath +'/pages/stopwatching.action',
		data: 'entityId='+ community.page.id +'&atl_token='+ community.atlassianToken,
		success: community.page._onStopPageWatch,
		dataType: 'json'
	} );

	return false;
};

community.page.toggleChildrenSection = function ()
{
	var childrenSection = jQuery("#page-controls-children ul");
	var noChildPagesSection = jQuery("#jquery-no-child-pages");
	var collapseButton = jQuery("#jquery-children-collapse");
	var animating = false;

	if(animating == false)
	{
		if(childrenSection.size() > 0)
		{
			animating = true;

			if(childrenSection.hasClass("hidden"))
			{
				childrenSection.removeClass("hidden");
				childrenSection.slideDown('slow', function (){
					animating = false;
				});

				collapseButton.removeClass("expand");
				collapseButton.addClass("collapse");

				userPreferences.setChildPagesSectionCollapse(false);
			}
			else
			{
				childrenSection.slideUp('slow', function (){
					childrenSection.addClass("hidden");
					animating = false;
				});

				collapseButton.removeClass("collapse");
				collapseButton.addClass("expand");

				userPreferences.setChildPagesSectionCollapse(true);
			}
		}

		if(noChildPagesSection.size() > 0)
		{
			animating = true;

			if(noChildPagesSection.hasClass("hidden")) 
			{
				noChildPagesSection.removeClass("hidden");
				noChildPagesSection.slideDown('slow', function (){
					animating = false;
				});

				collapseButton.removeClass("expand");
				collapseButton.addClass("collapse");

				userPreferences.setChildPagesSectionCollapse(false);
			}
			else
			{
				noChildPagesSection.slideUp('slow', function (){
					noChildPagesSection.addClass("hidden");
					animating = false;
				});

				collapseButton.removeClass("collapse");
				collapseButton.addClass("expand");

				userPreferences.setChildPagesSectionCollapse(true);
			}
		}
	}
};

community.page.generatePageLinkDialog = function ()
{
	if(jQuery("#page-link-dialog").length > 0)
	{
		if(!jQuery("#page-link-dialog").dialog('isOpen'))
			jQuery("#page-link-dialog").dialog('open');
	}
	else
	{
		var dialog = jQuery("<div></div>");
		var wrapper = jQuery("<div class='share-link-wrapper'></div>");
		var dialogConfig = new JQUERYUI_DIALOG_INFO_HASH;

		var tinyLink = jQuery("link[rel=shortlink]").attr("href");

		dialog.attr("id", "page-link-dialog");

		dialogConfig.height = 365;
		dialogConfig.width = 500;
		dialogConfig.resizable = false;
		dialogConfig.title = "Share";
		dialogConfig.buttons = { 
				"Done":	function() {
					jQuery(this).dialog("close"); 
				}
		};
		
		var ul = jQuery("<ul></ul>");

		
		var permLinkLi = jQuery("<li></li>");
		permLinkLi.append("<h6>Permanent Link:</h6>")		
		permLinkLi.append("<input id='jquery-perm-link-input' type='text' readonly='readonly' value='" + tinyLink + "' />");		
		permLinkLi.append("<div class='share-description'>To reliably link to this page outside of the MAX Federal Community use this link.</div>");		
		
		ul.append(permLinkLi);	
		
		var shareLinkLi = jQuery("<li></li>");
		shareLinkLi.append("<h6>Share Via E-Mail:</h6>")		
		shareLinkLi.append("<a onclick='community.page.sharePermalinkCreateEmail(\"" + tinyLink +"\"); return false;' id='share-create-email-button' href='#'>Create E-Mail</a>");	
		shareLinkLi.append("<div class='share-description'>Automatically generate an email with the permanent link included to share with colleages.</div>");		
		
		ul.append(shareLinkLi);	
		
		var sharedDesktopLi = jQuery("<li></li>");
		sharedDesktopLi.addClass("share-live");
		sharedDesktopLi.append("<h6>Collaborate Live:</h6>")
		
		// Fixed Link
		var a = jQuery("<a></a>");
		var href = "https://sd.max.gov/" + encodeURIComponent(AJS.params.pageTitle)
											  + encodeURIComponent(" (" + jQuery("meta[name='space-full-title']").attr("content") + ")")
											  +	"?pageId=" + AJS.params.pageId + "&pageName=" + encodeURIComponent(AJS.params.pageTitle + " (" + jQuery("meta[name='space-full-title']").attr("content") + ")") 
											  + "&pageUrl=" + jQuery("#jquery-link-to-page").attr("href")
											  + "&pageType=community";
		
		a.attr("id", "max-sd-collaborate-button");
		a.attr("href", href);
		a.attr("target", "_blank");
		a.text("Open this page in MAX Shared Desktop");
		
		sharedDesktopLi.append(a);
		
		
				
		//sharedDesktopLi.append("<a id='max-sd-collaborate-button' href='https://sd.test.max.gov/" +  encodeURIComponent(AJS.params.pageTitle) + encodeURIComponent(" (" + jQuery("meta[name='space-full-title']").attr("content") + ")") 
		//		+ "?pageId=" + AJS.params.pageId + "&pageName=" + encodeURIComponent(utils.encode(AJS.params.pageTitle) + " (" + jQuery("meta[name='space-full-title']").attr("content") + ")") +  "&pageUrl=" + jQuery("#jquery-link-to-page").attr("href")  + "&pageType=community' "
		//		+ "target='_blank'>Open this page in MAX Shared Desktop</a>");
		
		
		sharedDesktopLi.append("<div class='share-description'>Open this page in a MAX Shared Desktop room for concurrent sharing with others. " +
				"<span class='sd-feature-feedback'>Help us improve Shared Desktop by <a href='https://max.omb.gov/community/x/6RCxJ' alt='Provide feedback on MAX shared desktop'>providing feedback on your experience!</a></span></div>");		
		
		ul.append(sharedDesktopLi);	

		wrapper.append(ul);
		
		dialog.append(wrapper);
		dialog.dialog(dialogConfig);
		
		/*jQuery("#max-sd-collaborate-button").click ( function () {
			alert('This feature is coming soon.  When available it will open this page in a shared desktop room.'); 
			return false;
		});*/
		
		jQuery("#page-link-dialog").parent().find("button").attr("id", "share-dialog-done-button");

		jQuery("#jquery-perm-link-input").select();
	}

	return false;
};


community.page.sharePermalinkCreateEmail = function (link)
{
	
	var pageTitle = jQuery("meta[name='ajs-page-title']").attr("content")
	var spaceTitle = jQuery("meta[name='space-full-title']").attr("content");
	var userFullName = jQuery("meta[name='ajs-remote-user-fullname']").attr("content");
	var email = "";
	var subject = encodeURIComponent(pageTitle) + " in MAX";
	var body_message = "Here is a link to the '" + encodeURIComponent(pageTitle) + "' page in the MAX Federal Community '" + encodeURIComponent(spaceTitle) + "' space: " + encodeURIComponent(link);			
	var mailto_link = "mailto:" + email + "?subject=" + subject + "&body=" + body_message;
	document.location = mailto_link;	

	return false;


};

} catch (err) {
    if (console && console.log && console.error) {
        console.log("Error running batched script.");
        console.error(err);
    }
}

;
;try {
/* module-key = 'gov.eop.omb.confluence.resources.MAX-Resources:design-resources', location = 'gov/eop/omb/confluence/resources/design/scripts/page-tree.js' */
if(typeof community == 'undefined')
	community = {};

if(community.page == undefined)
	community.page = {};

community.page.pageTree = {};


//if (!jQuery("#page-tree-close-link").hasClass("hidden")) {
	// adjust positioning of #toolbar-items-top ID when Page Tree is opened
	//jQuery("#toolbar-items-top").css({"bottom": "14px"});
//} else {
	// adjust positioning of #toolbar-items-top ID when Page Tree is opened
	//jQuery("#toolbar-items-top").css({"bottom": "32px"});
//};

community.page.pageTree.toggle = function ()
{
	jQuery(this).addClass("hidden");
	jQuery(".page-tree-close-button").removeClass("hidden");
	jQuery("#page-tree-content-div").removeClass("hidden");
	
	jQuery("#page-wrapper-content").addClass("page-tree-displayed");
	jQuery("#page-wrapper-content").removeClass("page-tree-closed");
	
	jQuery("div.page-tree-wrapper").removeClass("hidden");
	jQuery("#padding-wrapper").removeClass("padding-wrapper");

	// adjust positioning of #page-history-warning ID when Page Tree is opened
	if(document.getElementById("page-history-warning")){
		jQuery(".aui-message").css({"margin-top": "9px"});
	};

	if ($.browser.msie && $.browser.version == '8.0') {
		jQuery("#toolbar-items-top").css({"bottom": "14px"});
		if(document.getElementById("page-history-warning")){
			jQuery(".aui-message").css({"margin-top": "9px"});
		};
	} else {
		jQuery("#toolbar-items-top").css({"bottom": "14px"});
		if(document.getElementById("page-history-warning")){
			jQuery(".aui-message").css({"margin-top": "9px"});
		};
	};


	// set user pref show page tree
	userPreferences.setPageTreeCollapse(false);
	
	return false;
};

community.page.pageTree.close = function ()
{
	jQuery(this).addClass("hidden");
	jQuery(".page-tree-toggle-button").removeClass("hidden");
	jQuery("#page-tree-content-div").addClass("hidden");
	
	jQuery("#page-wrapper-content").removeClass("page-tree-displayed");
	jQuery("#page-wrapper-content").addClass("page-tree-closed");
	
	jQuery("div.page-tree-wrapper").addClass("hidden");
	jQuery("#padding-wrapper").addClass("padding-wrapper");

	// adjust positioning of #page-history-warning ID when Page Tree is closed
	if(document.getElementById("page-history-warning")){
		jQuery(".aui-message").css({"margin-top": "40px"});
	};

	if ($.browser.msie && $.browser.version == '8.0') {
		jQuery("#toolbar-items-top").css({"bottom": "63px"});
		if(document.getElementById("page-history-warning")){
			jQuery(".aui-message").css({"margin-top": "9px"});
		};
	} else {
		jQuery("#toolbar-items-top").css({"bottom": "32px"});
		if(document.getElementById("page-history-warning")){
			jQuery(".aui-message").css({"margin-top": "40px"});
		};
	};

	// set user pref dont page tree
	userPreferences.setPageTreeCollapse(true);
	
	return false;
};

//window.onload = function() {
//	var overlay = document.getElementById("page-tree-open-link");
//	if (overlay.className.match(/\bhidden\b/)) {
//		document.getElementById("toolbar-items-top").style.bottom= "14px";
//	} else {
//		document.getElementById("toolbar-items-top").style.bottom= "32px";
//	}
//};



jQuery(window).load(function() {
	if (jQuery( "#page-tree-open-link" ).length) {
		if (jQuery("#page-tree-open-link").hasClass("hidden")) {
			//adjust positioning of #toolbar-items-top ID when Page Tree is opened
			if ($.browser.msie && $.browser.version == '8.0') {
				jQuery("#toolbar-items-top").css({"bottom": "14px"});
				if(document.getElementById("page-history-warning")){
					jQuery(".aui-message").css({"margin-top": "9px"});
				};

			} else {
				jQuery("#toolbar-items-top").css({"bottom": "14px"});
				if(document.getElementById("page-history-warning")){
					jQuery(".aui-message").css({"margin-top": "9px"});
				};
			}
			;

		} else {
			//adjust positioning of #toolbar-items-top ID when Page Tree is closed
			if ($.browser.msie && $.browser.version == '8.0') {
				jQuery("#toolbar-items-top").css({"bottom": "63px"});
				if(document.getElementById("page-history-warning")){
					jQuery(".aui-message").css({"margin-top": "9px"});
				};
			} else {
				jQuery("#toolbar-items-top").css({"bottom": "32px"});
				if(document.getElementById("page-history-warning")){
					jQuery(".aui-message").css({"margin-top": "40px"});
				};
			};
		};
	} else {
		if ($.browser.msie && $.browser.version == '8.0') {
			jQuery("#toolbar-items-top").css({"bottom": "63px"});
			if(document.getElementById("page-history-warning")){
				jQuery(".aui-message").css({"margin-top": "40px"});
			};
		};
	};
});

} catch (err) {
    if (console && console.log && console.error) {
        console.log("Error running batched script.");
        console.error(err);
    }
}

;
;try {
/* module-key = 'gov.eop.omb.confluence.resources.MAX-Resources:design-resources', location = 'gov/eop/omb/confluence/resources/design/scripts/FindContent/find-content.js' */
community.findContent = {};
community.findContent.selectedTabId = "";
community.findContent.isExecutiveBranchMember;;
community.findContent.collectFavoritePagesLoaded = false;
community.findContent.favoritesLoaded = false;
community.findContent.favoriteSpacesLoaded = false;
community.findContent.collectRecentlyViewedPagesLoaded = false;
community.findContent.collectRecentlyEditedPagesLoaded = false;
community.findContent.collabGroupsLoaded = false;
community.findContent.findContentFavoritesFilterAdded = false;
community.findContent.findContentFavoriteSpacesFilterAdded = false;
community.findContent.findStuffLinkId = "nav-find-content-link";
community.findContent.myStuffLinkId = "nav-find-content-mystuff";
community.findContent.MyFavoritesTabId = "find-content-my-favorites-link";
community.findContent.MyFavoritePagesTabId = "find-content-my-favorite-pages-link";
community.findContent.MyFavoriteSpacesTabId = "find-content-my-favorite-spaces-link";

community.findContent.AgencyCommunitiesTabId = "find-content-agency-communities-link";
community.findContent.CrossCommunitiesTabId = "find-content-cross-community-link";
community.findContent.GovWideCommunitiesTabId = "find-content-gov-wide-link";
community.findContent.OtherSpacesTabId = "find-content-other-spaces-link";
community.findContent.PageWatchesTabId = "find-content-my-page-watches-link";
community.findContent.RecentlyUpdatedTabId = "find-content-my-recently-updated-link";
community.findContent.RecentlyViewedTabId = "find-content-my-recently-viewed-link";
community.findContent.SearchTabId = "find-content-my-search-link";
community.findContent.MyCollaborationGroupsTabId = "find-content-my-collaboration-groups-link";

community.findContent.RecentlyViewedSectionTabId = "find-content-my-recently-viewed-section-link";
community.findContent.RecentlyUpdatedSectionTabId = "find-content-my-recently-updated-section-link";

community.findContent.MyCollectFavoritePagesTabId = "find-content-my-collect-favorite-pages-link";
community.findContent.CollectRecentlyViewedTabId = "find-content-my-collect-recently-viewed-link";
community.findContent.CollectRecentlyUpdatedTabId = "find-content-my-collect-updated-link";

//Agency Communities Constants
community.findContent.AgencyCommunities = {};
community.findContent.AgencyCommunities.loaded = false;

//Cross-Community Topics Constants
community.findContent.CrossCommunities = {};
community.findContent.CrossCommunities.loaded = false;

//Government Wide Communities Constants
community.findContent.GovWideCommunities = {};
community.findContent.GovWideCommunities.loaded = false;


//Other Spaces Constants
community.findContent.OtherSpaces = {};
community.findContent.OtherSpaces.loaded = false;

// collect "session" "non-session" uber stateless spectacular id
community.findContent.appUserSessionId;

//Bind click to show find content dialog
jQuery(document).ready(function()
		{	
	var self = community.findContent;

	self.isExecutiveBranchMember = jQuery("#membership-executive-branch").attr("content");

	jQuery("#" + community.findContent.findStuffLinkId + 
			", #make-me-open-findstuff" +
			", #make-me-open-mystuff" + 
			", #find-content-find-stuff-link" + 
			", #profile-mystuff" + 
			", #" + community.findContent.myStuffLinkId).click(function(e){
				generateFindContentDialog(this.id);

				//return false;
				e.preventDefault();
			});

	// Bind links that short cut to dialog from drop down
//	jQuery("#findstuff-my-agency-link").click( function() {
//	// My Agency
//	//self.selectedTabId = "";
//	//generateFindContentDialog(self.findStuffLinkId);	
//	alert("No idea what this is supposed to do....");
//	return false;
//	});

	jQuery("#findstuff-my-collaborations-link").click( function(e) {
		// My Collaborations
		community.findContent.selectedTabId = community.findContent.MyCollaborationGroupsTabId;
		generateFindContentDialog(community.findContent.myStuffLinkId);	
		//return false;
		e.preventDefault();
	});

	jQuery("#findstuff-my-favorites-link").click( function(e) {
		// My favorites
		community.findContent.selectedTabId = community.findContent.MyFavoritesTabId;
		generateFindContentDialog(self.myStuffLinkId);	
		//return false;
		e.preventDefault();
	});
	
	jQuery("#findstuff-my-favorites-header-link-dropdown").click( function(e) {
		// My favorites
		community.findContent.selectedTabId = community.findContent.MyFavoritesTabId;
		generateFindContentDialog(self.myStuffLinkId);	
		//return false;
		e.preventDefault();
	});

	jQuery("#findstuff-my-collect-favorites-link").click( function(e) {
		// My favorites
		community.findContent.selectedTabId = community.findContent.MyCollectFavoritePagesTabId;
		generateFindContentDialog(self.myStuffLinkId);	
		//return false;
		e.preventDefault();
	});

//	jQuery("#findstuff-my-home-link").click( function() {
//	// My Home
//	//self.selectedTabId = "";
//	//generateFindContentDialog(self.findStuffLinkId);	
//	alert("No idea what this is supposed to do....");
//	return false;
//	});

	/*jQuery("#findstuff-my-profile-link").click( function() {
		// My Profile
		//self.selectedTabId = "";
		//generateFindContentDialog(self.findStuffLinkId);	
		alert("No idea what this is supposed to do....");
		return false;
	});*/

	jQuery("#findstuff-my-recently-updated-link, #user-recently-updated-link").click( function(e) {
		// My Community Recently Updated
		community.findContent.selectedTabId = community.findContent.RecentlyUpdatedTabId;
		generateFindContentDialog(community.findContent.myStuffLinkId);	
		//return false;
		e.preventDefault();
	});

	jQuery("#findstuff-my-collect-recently-updated-link, #user-collect-recently-updated-link").click( function(e) {
		// My Collect Recently Updated
		community.findContent.selectedTabId = community.findContent.CollectRecentlyUpdatedTabId;
		generateFindContentDialog(community.findContent.myStuffLinkId);	
		//return false;
		e.preventDefault();
	});

	jQuery("#findstuff-my-watching-link, #user-watches-link").click( function(e) {
		// My Page Watches
		community.findContent.selectedTabId = community.findContent.PageWatchesTabId;
		generateFindContentDialog(community.findContent.myStuffLinkId);	
		//return false;
		e.preventDefault();
	});

	jQuery("#findstuff-my-recently-viewed-link, .user-recently-viewed a").click( function(e) {
		// My Recently Viewed
		community.findContent.selectedTabId = community.findContent.RecentlyViewedTabId;
		generateFindContentDialog(community.findContent.myStuffLinkId);	
		//return false;
		e.preventDefault();
	});
	
	//COP-3230: Add binding to "More recently updated" in search bar"
	jQuery("#nav-bar-search-wrapper .quick-nav-drop-down").on("click", ".recently-viewed-dropdown .recently-viewed span", function(e) {
		// console.log("AWP: more recently viewed clicked!");
		// My Recently Viewed
		community.findContent.selectedTabId = community.findContent.RecentlyViewedTabId;
		generateFindContentDialog(community.findContent.myStuffLinkId);	
		//return false;
		e.preventDefault();
	});
	
	/*	jQuery("#findstuff-my-subscriptions-govtcomms-link").click( function() {
		// My Subscriptions to Government-wide Communities
		//self.selectedTabId = "";
		//generateFindContentDialog(self.findStuffLinkId);	
		alert("No idea what this is supposed to do....");
		return false;
	});*/

	// Agency Communities
	jQuery("#findstuff-agency-communities-link").click( function(e) {
		community.findContent.selectedTabId = community.findContent.AgencyCommunitiesTabId;
		generateFindContentDialog(community.findContent.findStuffLinkId);	
		//return false;
		e.preventDefault();
	});

	// Cross-Community Topics
	jQuery("#findstuff-cross-community-topics-link").click( function(e) {
		community.findContent.selectedTabId = community.findContent.CrossCommunitiesTabId;
		generateFindContentDialog(community.findContent.findStuffLinkId);	
		//return false;
		e.preventDefault();
	});

	// Government Wide Communities
	jQuery("#findstuff-government-wide-communities-link").click( function(e) {
		community.findContent.selectedTabId = community.findContent.GovWideCommunitiesTabId;
		generateFindContentDialog(community.findContent.findStuffLinkId);	
		//return false;
		e.preventDefault();
	});

//	jQuery("#findstuff-max-home-link").click( function() {
//	// MAX Home
//	//community.findContent.selectedTabId = "";
//	//generateFindContentDialog(community.findContent.findStuffLinkId);
//	alert("No idea what this is supposed to do....");
//	return false;
//	});

	// Other Spaces
	jQuery("#findstuff-other-spaces-link, #home-space-link-set").click( function(e) {
		community.findContent.selectedTabId = community.findContent.OtherSpacesTabId;
		generateFindContentDialog(community.findContent.findStuffLinkId);	
		//return false;
		e.preventDefault();
	});

	// Full Search
	jQuery("#findstuff-full-search-link").click( function(e) {
		//community.findContent.selectedTabId = community.findContent.SearchTabId;
		//generateFindContentDialog(community.findContent.findStuffLinkId);	
		//return false;
		//e.preventDefault();
		document.location = "/searchsite.action";
	});

	/*// My Stuff in dropdown
	jQuery("#" + community.findContent.myStuffLinkId).click( function() {
		community.findContent.selectedTabId = community.findContent.SearchTabId;
		generateFindContentDialog(community.findContent.myStuffLinkId);	
		return false;
	});*/
		});

function generateFindContentDialog(id)
{
	var self = community.findContent;

	if (self.dialog) 
	{
		self.dialog.dialog('open');
		// select favorites as the default
		if (self.selectedTabId == "") {
			jQuery("#find-content-my-favorites-link").click();
		} else {
			jQuery("#" + self.selectedTabId).click();
		}

		if (id == self.findStuffLinkId || id == "find-content-find-stuff-link" || id == "make-me-open-findstuff") {
			//self.dialog.dialog('option', 'title', 'Find Stuff');			
			jQuery("#find-content-my-stuff-link").removeClass("active");
			jQuery("#find-content-find-stuff-link").addClass("active");
			jQuery(".other-stuff-item").show();
			jQuery(".my-stuff-item").hide();
		} else if (id == "profile-mystuff" || id ==  self.myStuffLinkId || id == "find-content-my-stuff-link" || id == "make-me-open-mystuff" || id == self.CollectRecentlyViewedTabId || id == self.CollectRecentlyUpdatedTabId) {
			//self.dialog.dialog('option', 'title', 'My Stuff');
			jQuery("#find-content-find-stuff-link").removeClass("active");
			jQuery("#find-content-my-stuff-link").addClass("active");
			jQuery(".other-stuff-item").hide();
			jQuery(".my-stuff-item").show();
		}
		return false;
	}

	var dialog = jQuery("<div class='find-content-dialog'></div>");
	var dialogConfig = new JQUERYUI_DIALOG_MODAL_HASH;

	// Initialize Sections
	initializeFindContentSearch();
	initializeFindContentRecentlyUpdated();
	initializeFindContentRecentlyViewed();
	initializeFindContentPageWatches();

	/* Scrollbars  */
	dialogConfig.open = function(event, ui){
		jQuery('body').css('overflow','hidden'); 
		jQuery('.ui-widget-overlay').css('width','100%');
		document.getElementsByTagName("body")[0].scroll = "no"; // for IE 7
	};

	dialogConfig.close = function(event, ui){
		jQuery('body').css('overflow','auto');
		document.getElementsByTagName("body")[0].scroll = "yes"; // for IE 7
	};

	dialogConfig.buttons = { "Close" : function() { jQuery(this).dialog("close"); } };

	dialog.bind( "dialogbeforeclose", function(event, ui) {
		// put favorites tree back if we moved it in the lightbox
		if(self.favoritesLoaded) {
			jQuery("#jquery-favorites-content").append(self.favTree);
			AJS.log("---> Put fav tree back on dialog close :)");
		}
		// reset loaded vars
		self.favoritesLoaded = false;
		self.RecentlyViewed.loaded = false;
		self.search.loaded = false;
	});

	// set height for proper styling/scroll bars
	dialogConfig.open = function(event, ui){
		var h = jQuery(".find-content-dialog").height();
		jQuery("#find-content-dialog-content-wrapper").css("height", h);	

		// scroll bars
		jQuery('body').css('overflow','hidden'); 
		jQuery('.ui-widget-overlay').css('width','100%');		
		jQuery("#manage-favorites-dialog").css('overflow','hidden');
		document.getElementsByTagName("body")[0].scroll = "no"; // for IE 7	
		document.getElementsByTagName("html")[0].style.overflow = "hidden";		

	};

	dialogConfig.close = function(event, ui){
		jQuery('body').css('overflow','auto');		
		//jQuery("#manage-favorites-dialog").css('overflow','auto');
		document.getElementsByTagName("body")[0].scroll = "yes"; // for IE 7
		document.getElementsByTagName("html")[0].style.overflow = "scroll";
	};

	dialogConfig.resize = function(event, ui){
		var h = jQuery(".find-content-dialog").height();
		jQuery("#find-content-dialog-content-wrapper").css("height", h);
	};

	dialogConfig.resizeStop = function(event, ui){
		var h = jQuery(".find-content-dialog").height();
		jQuery("#find-content-dialog-content-wrapper").css("height", h);
	};

	// defaults were 520 height and 740 width
	var windowHeight = jQuery(window).height();
	var windowWidth = jQuery(window).width();
	dialogConfig.height = windowHeight * 0.8; // take 80% 
	dialogConfig.width = windowWidth * 0.8; // take 80% 
	if (id == self.findStuffLinkId || id == "find-content-find-stuff-link"  || id == "make-me-open-findstuff") {
		//dialogConfig.title = "Find Stuff";		
		jQuery("#find-content-my-stuff-link").removeClass("active");
		jQuery("#find-content-find-stuff-link").addClass("active");
		dialogConfig.title = "";
	} else if (id == "profile-mystuff" || id ==  self.myStuffLinkId || id == "find-content-my-stuff-link" || id == "make-me-open-mystuff" || id == self.CollectRecentlyViewedTabId || id == self.CollectRecentlyUpdatedTabId) {
		//dialogConfig.title = "My Stuff";
		jQuery("#find-content-find-stuff-link").removeClass("active");
		jQuery("#find-content-my-stuff-link").addClass("active");
		dialogConfig.title = "";
	}


	dialogConfig.minWidth = 650;
	
	dialogConfig.title = "";

	var findContentDialogWrapperDiv = jQuery("<div id='find-content-dialog-wrapper'></div>");

	dialog.append(findContentDialogWrapperDiv);

	var findContentDialogNavWrapper = jQuery("<div id='find-content-dialog-nav-wrapper'></div>");

	findContentDialogWrapperDiv.append(findContentDialogNavWrapper);

	var findContentDialogContentWrappers = jQuery("<div id='find-content-dialog-content-wrapper'>" +
			"<div id='find-content-dialog-favorites-wrapper' class='hidden'></div>" +
			"<div id='find-content-dialog-collect-favorites-wrapper' class='hidden'></div>" +
			"<div id='find-content-dialog-favorite-spaces-wrapper' class='hidden'></div>" +
			"<div id='find-content-dialog-recently-viewed-wrapper' class='hidden'></div>" +
			"<div id='find-content-dialog-collect-viewed-wrapper' class='hidden'></div>" +
			"<div id='find-content-dialog-recently-updated-wrapper' class='hidden'></div>" +
			"<div id='find-content-dialog-collect-updated-wrapper' class='hidden'></div>" +
			"<div id='find-content-dialog-page-watches-wrapper' class='hidden'></div>" +
			"<div id='find-content-dialog-collaboration-groups-wrapper' class='hidden'></div>" +
			"<div id='find-content-dialog-search-wrapper' class='hidden'></div>" +												  
			"<div id='find-content-dialog-agency-communities-wrapper' class='hidden'></div>" +
			"<div id='find-content-dialog-gov-wide-link-wrapper' class='hidden'></div>" +
			"<div id='find-content-dialog-cross-community-wrapper' class='hidden'></div>" +
			"<div id='find-content-dialog-help-wrapper' class='hidden'></div>" +
			"<div id='find-content-dialog-other-spaces-wrapper' class='hidden'></div>" +
	"</div>");										    

	findContentDialogWrapperDiv.append(findContentDialogContentWrappers);



	var findContentDialogNavHTMLExecutiveOnly = "<li class='other-stuff-item'><a href='#' id='" + self.AgencyCommunitiesTabId + "' class='other-stuff-item'>Agency Communities</a></li>" +
	"<li class='other-stuff-item'><a href='#' id='" + self.GovWideCommunitiesTabId + "' class='other-stuff-item'>Government-Wide Communities</a></li>" +
	"<li class='other-stuff-item'><a href='#' id='" + self.CrossCommunitiesTabId + "' class='other-stuff-item'>Cross-Community Topics</a></li>" ;

	if (self.isExecutiveBranchMember == "false") { findContentDialogNavHTMLExecutiveOnly = "";  }

	var myAgencyLink = "";

	if( jQuery("#user-agency-space-link").size() > 0 ) {myAgencyLink = "<li class='my-stuff-item'><a href='" + jQuery("#user-agency-space-link").attr("href") + "' id='find-content-my-agency-space' >Go to My Agency<span></span></a></li>" ; }	

	var findContentDialogNavHTML = "<div class='findstuff-tabs'>" +
	"<a id='find-content-find-stuff-link' href='#'><span>Find Stuff</span></a>" +
	"<a id='find-content-my-stuff-link' href='#'><span>My Stuff</span></a></div>" +
	"<ul>" +		
	"<li class='my-stuff-item'><a href='#' id='" + self.MyFavoritesTabId + "' class='my-stuff-item'>My Favorites</a></li>" +
	"<li class='my-stuff-item'><a href='#' id='" + self.MyFavoritePagesTabId + "' class='my-stuff-item'>Community Pages</a></li>" +
	"<li class='my-stuff-item'><a href='#' id='" + self.MyFavoriteSpacesTabId + "' class='my-stuff-item'>Community Spaces</a></li>" +
	"<li class='my-stuff-item'><a href='#' id='" + self.MyCollectFavoritePagesTabId + "'class='my-stuff-item' style='padding-left: 20px !important;'>Collect Items (beta)</a></li>" +
	"<li class='my-stuff-item'><a href='#' id='" + self.RecentlyViewedSectionTabId + "' class='my-stuff-item'>My Recently Viewed</a></li>" +	
	"<li class='my-stuff-item'><a href='#' id='" + self.RecentlyViewedTabId + "' class='my-stuff-item'>Community Pages</a></li>" +
	"<li class='my-stuff-item'><a href='#' id='" + self.CollectRecentlyViewedTabId + "' class='my-stuff-item'>Collect Items (beta)</a></li>" +
	"<li class='my-stuff-item'><a href='#' id='" + self.RecentlyUpdatedSectionTabId + "' class='my-stuff-item'>My Recently Updated</a></li>" +	
	"<li class='my-stuff-item'><a href='#' id='" + self.RecentlyUpdatedTabId + "' class='my-stuff-item'>Community Pages</a></li>" +	
	"<li class='my-stuff-item'><a href='#' id='" + self.CollectRecentlyUpdatedTabId + "' class='my-stuff-item'>Collect Items (beta)</a></li>" + 
	"<li class='my-stuff-item'><a href='#' id='" + self.PageWatchesTabId + "' class='my-stuff-item'>My Page Watches</a></li>" +
	"<li class='my-stuff-item'><a href='#' id='find-content-my-collaboration-groups-link' class='my-stuff-item'>My Collaborations</a></li>" +
	findContentDialogNavHTMLExecutiveOnly +
	"<li class='other-stuff-item'><a href='#' id='" + self.OtherSpacesTabId + "' class='other-stuff-item'>Browse All Community Spaces</a></li>" +
	"<li class='my-stuff-item'><a href='" + contextPath + "/homepage.action' id='find-content-my-home-space' >Go to My Home Space<span></span></a></li>" +
	myAgencyLink +
	//"<li><a href='#' id='" + self.SearchTabId + "'>Site Search</a></li>" +
	//"<li><a href='#' id='find-content-my-stuff-link' class='other-stuff-item'>My Stuff</a></li>" +
	//"<li><a href='#' id='find-content-find-stuff-link' class='my-stuff-item'>Find Stuff</a></li>" +
	"</ul>&nbsp;";

	findContentDialogNavWrapper.append(findContentDialogNavHTML);

	dialog.dialog(dialogConfig);

	self.dialog = dialog;

	bindFindContentNavEvents();

	// select favorites as the default
	if (self.selectedTabId == "" && id != self.myStuffLinkId && id != "make-me-open-mystuff") {
		jQuery("#" + self.SearchTabId).click(); // defualt to search
	} else if ((id == self.myStuffLinkId || id == "make-me-open-mystuff") && self.selectedTabId == "") { 
		// select favorites as defualt for My Stuff
		jQuery("#" + self.MyFavoritesTabId).click();
	} else {
		jQuery("#" + self.selectedTabId).click();
	}

	//
//	if (id == self.findStuffLinkId ||  id == "find-content-find-stuff-link" || id ==  self.myStuffLinkId) {
//	jQuery(".other-stuff-item").show();
//	jQuery(".my-stuff-item").hide();
//	} else if (id == "profile-mystuff") {
//	jQuery(".other-stuff-item").hide();
//	jQuery(".my-stuff-item").show();
//	}

	if (id == self.findStuffLinkId || id == "find-content-find-stuff-link"  || id == "make-me-open-findstuff") {
		//self.dialog.dialog('option', 'title', 'Find Stuff');
		jQuery("#find-content-my-stuff-link").removeClass("active");
		jQuery("#find-content-find-stuff-link").addClass("active");		
		jQuery(".other-stuff-item").show();
		jQuery(".my-stuff-item").hide();
	} else if (id == "profile-mystuff" || id ==  self.myStuffLinkId || id == "find-content-my-stuff-link"  || id == "make-me-open-mystuff" || id == self.CollectRecentlyViewedTabId || id == self.CollectRecentlyUpdatedTabId) {
		//self.dialog.dialog('option', 'title', 'My Stuff');
		jQuery("#find-content-my-stuff-link").removeClass("active");
		jQuery("#find-content-my-stuff-link").addClass("active");
		jQuery(".other-stuff-item").hide();
		jQuery(".my-stuff-item").show();
	}
}

function bindFindContentNavEvents()
{
	var self = community.findContent;

	// My Stuff
	jQuery("#find-content-my-stuff-link").click( function(e) {		
		jQuery(".other-stuff-item").hide();
		jQuery(".my-stuff-item").show();
		//self.dialog.dialog('option', 'title', 'My Stuff');		
		jQuery("#find-content-find-stuff-link").removeClass("active");
		jQuery("#find-content-my-stuff-link").addClass("active");
		// select favorites
		jQuery("#" + self.MyFavoritesTabId).click();
		//return false;
		e.preventDefault();
	});

	// Find Stuff 
	jQuery("#find-content-find-stuff-link").click( function(e) {		
		jQuery(".other-stuff-item").show();
		jQuery(".my-stuff-item").hide();
		//self.dialog.dialog('option', 'title', 'Find Stuff');
		jQuery("#find-content-my-stuff-link").removeClass("active");
		jQuery("#find-content-find-stuff-link").addClass("active");		
		// select search
		jQuery("#" + self.SearchTabId).click();
		//return false;
		e.preventDefault();
	});	

	// My Favorites
	jQuery("#" + self.MyFavoritesTabId + ", #" + self.MyFavoritePagesTabId).click( function (e) {

		self.selectedTabId = "find-content-my-favorites-link";

		jQuery("#find-content-dialog-nav-wrapper ul a").removeClass("active");
		//jQuery(this).addClass("active");
		jQuery("#find-content-my-favorite-pages-link").addClass("active"); // confuse the user..

		jQuery("#find-content-dialog-content-wrapper > div").addClass("hidden");
		jQuery("#find-content-dialog-favorites-wrapper").removeClass("hidden");

		// Make sure the fav tree is loaded in
		loadReadOnlyFavoritesTree();

		if (self.favoritesLoaded) {
			return false;
		}

		if (!self.findContentFavoritesFilterAdded) {
			var favoritesFilter = jQuery("<div class='find-content-toolbar'>Filter: <input id='my-stuff-favorites-tree-filter-input' type='text'></input><a href='#' onclick='generateManageFavoriteDialog(); return false;' class='toolbar-manage-my-page-watches'>Manage Favorite Pages</a></div>");
			jQuery("#find-content-dialog-favorites-wrapper").append(favoritesFilter);
			self.findContentFavoritesFilterAdded = true;
		}

		self.favTree = jQuery("#favorites-tree");
		jQuery("#find-content-dialog-favorites-wrapper").append(self.favTree);

		// Reset Filter
		filterReadOnlyfavTree("");

		// My Favorites Filtering
		jQuery("#my-stuff-favorites-tree-filter-input").keyup(function() {
			filterReadOnlyfavTree(jQuery(this).val());
		});

		self.favoritesLoaded = true;

		//return false;
		e.preventDefault();
	});

	// My Collect favorite pages
	jQuery("#" + self.MyCollectFavoritePagesTabId).click( function (e) {

		var wrapper = jQuery("#find-content-dialog-collect-favorites-wrapper");

		self.selectedTabId = self.MyCollectFavoritePagesTabId;

		jQuery("#find-content-dialog-nav-wrapper ul a").removeClass("active");
		jQuery(this).addClass("active");

		jQuery("#find-content-dialog-content-wrapper > div").addClass("hidden");
		jQuery("#find-content-dialog-collect-favorites-wrapper").removeClass("hidden");

		if(self.collectFavoritePagesLoaded){
			return false;
		}

		wrapper.empty();

		// show loading..
		wrapper.append("<span>Loading..</span>");

		var collectfavUrl = "https://" + window.location.hostname.replace("community.","") + "/exercises/collect2/api/browser_histories?type=favorites";

		collectfavUrl = collectfavUrl + "&token=" + utils.getProxyTicket(collectfavUrl) + "&service=" + collectfavUrl;

		jQuery.ajax({
			type: "GET",
			url: contextPath + '/ajax/proxy.action?url=' + encodeURIComponent(collectfavUrl),
			dataType: 'json',
			success: function (data, textStatus, jqXHR) {				

				var collectIsFubarMessage = "<div class='collect-fubar-message' style='padding-bottom: 8px; text-align: center;'>Collect Favorites is a new feature.  Only limited exercises are displayed.</div>";
				
				var favoritesFilter = jQuery(collectIsFubarMessage + "<div class='find-content-toolbar'>Filter: <input id='my-stuff-collect-favorites-tree-filter-input' type='text'></input></div>"); // <a href='#' class='toolbar-manage-my-page-watches'>Manage Collect Favorites</a>
				jQuery("#find-content-dialog-collect-favorites-wrapper").html(favoritesFilter);
				self.findContentCollectFavoritesFilterAdded = true;

				if (typeof(data.results) != "undefined") {  // success	
					wrapper.append("<div id='collect-fav-tree' style='padding: 10px 0px 20px 0px;'></div>");

					// collect json structure isnt correct.. create proper top level node wrapper.
					var wrapperCollectFavJson = JSON.parse('[{"data":{"title":"My Collect Favorites","attr":{}},"state":"open","children":[],"attr":{"id":"collect_favtree_root_li","rel":"root"}}]');
					wrapperCollectFavJson[0].children = data.results;
					jQuery_142("#collect-fav-tree").jstree({
						"json_data" : {
							"data" :  wrapperCollectFavJson //data.results
						},
						"plugins" : [ "themes", "json_data", "ui", "search"],
						"search" : {
							"case_insensitive" : true
						}
					}).bind("select_node.jstree", function (e, data) {		
						var url = jQuery(data.rslt.obj).find("a").attr('url');
						if (typeof(url) != "undefined") {	window.location = url ;}						
						return false;
					});

					jQuery_142("#my-stuff-collect-favorites-tree-filter-input").keyup(function() {
						var searchTerm = jQuery(this).val();
						if (jQuery_142.trim(searchTerm) == "") {
							jQuery_142.jstree._reference("#collect-fav-tree").clear_search();
							jQuery_142("#collect-fav-tree.jstree li").show();	
							return;
						}

						jQuery_142.jstree._reference("#collect-fav-tree").search(searchTerm);
						jQuery_142("#collect-fav-tree.jstree li").hide();
						jQuery_142("#collect-fav-tree.jstree li a[class=jstree-search]").parents("div.jstree li").show();						
						jQuery_142("#collect-fav-tree").jstree("search", searchTerm);
					});


				} else {
					// error
					alert("An error occurred when trying to retrieve your collect favorites");
				}
			},
			error: function (data, textStatus, jqXHR) {
				// error
				alert("An error occurred when trying to retrieve your collect favorites");
			}

		});

		//return false
		e.preventDefault();

	});


	// My favorites spaces 
	jQuery("#" + self.MyFavoriteSpacesTabId).click( function (e) {		

		self.selectedTabId = self.MyFavoriteSpacesTabId;

		jQuery("#find-content-dialog-nav-wrapper ul a").removeClass("active");
		jQuery(this).addClass("active");

		jQuery("#find-content-dialog-content-wrapper > div").addClass("hidden");
		jQuery("#find-content-dialog-favorite-spaces-wrapper").removeClass("hidden");

		if (self.favoriteSpacesLoaded) {
			return false;
		}

		// show loading..
		jQuery("#find-content-dialog-favorite-spaces-wrapper").append("<span>Loading..</span>");

		jQuery.ajax({
			type: "GET",
			url: contextPath + '/ajax/getspacesmacrohtml.action?spacesSelectedTab=my',
			dataType: 'html',
			complete: function xCompleteFunction(XMLHttpRequest, textStatus) { 
				var wrapper = jQuery("#find-content-dialog-favorite-spaces-wrapper");
				if (XMLHttpRequest.status==200) {  // success	
					var response = jQuery(XMLHttpRequest.responseText);
					var responseTable = response.find("div.spaceListDiv"); 
					// remove loading..
					wrapper.empty();

					// add toolbar
					var onclickJS = 'jQuery("#find-content-find-stuff-link").click(); jQuery("#find-content-other-spaces-link").click(); self.favoriteSpacesLoaded = false;';
					//var favoritesFilter = jQuery("<div class='find-content-toolbar'><a href='#' onclick='" + onclickJS + "' class='toolbar-manage-my-favorite-spaces'>Manage My Favorite Spaces</a></div>");
					//jQuery("#find-content-dialog-favorite-spaces-wrapper").append(favoritesFilter);

					wrapper.append(responseTable);
					// hide tab nav from macro
					// jQuery("#find-content-dialog-other-spaces-wrapper ul.tabnav, #find-content-dialog-other-spaces-wrapper td.operations").hide();
					self.favoriteSpacesLoaded = true;


				} else if (XMLHttpRequest.status==500) { // server error
					// remove loading..
					wrapper.empty();
					// set error message
					wrapper.append("<div>An error has occurred. Please refresh the page and try again. If the problem persists, please contact MAX Support.</div>");
				} else if (XMLHttpRequest.readyState == 4 && ( XMLHttpRequest.status == 0 || XMLHttpRequest.status == 12017	)){
					// remove loading..
					wrapper.empty();
					// set error message
					wrapper.append("<div>Your session has timed out, <a href='" + location.href  + "'>click here</a> to refresh.</div>");

				} else {  // catch all
					// remove loading..
					wrapper.empty();
					// set error message
					wrapper.append("<div>An error has occurred. Please refresh the page and try again. If the problem persists, please contact MAX Support.</div>");
				}
			}	
		});

		//return false;
		e.preventDefault();
	});

	// My Recently Updated
	jQuery("#" + self.RecentlyUpdatedTabId + ", #" + self.RecentlyUpdatedSectionTabId).click( function (e) {		
		self.selectedTabId = self.RecentlyUpdatedTabId;

		jQuery("#find-content-dialog-nav-wrapper ul a").removeClass("active");
		jQuery("#" + self.RecentlyUpdatedTabId).addClass("active");

		jQuery("#find-content-dialog-content-wrapper > div").addClass("hidden");
		jQuery("#find-content-dialog-recently-updated-wrapper").removeClass("hidden");

		if (self.RecentlyUpdated.loaded)
			return false;			

		self.RecentlyUpdated.getRecentlyUpdated();
		self.RecentlyUpdated.loaded = true;			 

		//return false;
		e.preventDefault();
	});

	//My Collect Recently Updated
	jQuery("#" + self.CollectRecentlyUpdatedTabId).click( function (e){

		var wrapper = jQuery("#find-content-dialog-collect-updated-wrapper");

		self.selectedTabId = self.CollectRecentlyUpdatedTabId;

		jQuery("#find-content-dialog-nav-wrapper ul a").removeClass("active");
		jQuery(this).addClass("active");

		jQuery("#find-content-dialog-content-wrapper > div").addClass("hidden");
		wrapper.removeClass("hidden");

		if(self.collectRecentlyEditedPagesLoaded){
			return false;
		}

		wrapper.empty();

		// show loading..
		wrapper.append("<span>Loading..</span>");

		var collectEditedUrl = "https://" + window.location.hostname.replace("community.","") + "/exercises/collect2/api/browser_histories?type=edited"; // our domains match

		collectEditedUrl = collectEditedUrl + "&token=" + utils.getProxyTicket(collectEditedUrl) + "&service=" + collectEditedUrl;
		
		// forget this.. collect doesnt use it.. always send ticket
		/*if (typeof(community.findContent.appUserSessionId) != "undefined") {
			collectEditedUrl = collectEditedUrl + "&app_user_session_id=" + community.findContent.appUserSessionId ;
		} else {
			collectEditedUrl = collectEditedUrl + "&token=" + utils.getProxyTicket(collectEditedUrl) + "&service=" + collectEditedUrl;
		}*/

		jQuery.ajax({
			type: "GET",
			url: contextPath + '/ajax/proxy.action?url=' + encodeURIComponent(collectEditedUrl),
			dataType: 'json',
			success: function (data, textStatus, jqXHR) {					
				// got collect session id? forget this.. collect doesnt use it.. always send ticket
				/*if (data.appUserSessionId) {
					community.findContent.appUserSessionId = data.appUserSessionId;
				}*/

				var collectIsFubarMessage = "<div class='collect-fubar-message' style='padding-bottom: 8px; text-align: center;'>Collect Recently Updated is a new feature.  Only limited exercises are displayed.</div>";
				
				var colectUpdatedHeader = jQuery(collectIsFubarMessage + "<div class='find-content-toolbar'>Filter: <input id='my-stuff-collect-recently-edited-filter-input' type='text'></input></div>" +
						"<div id='recently-updated-header'><div class='recently-updated-header-name'>Name</div><div class='recently-updated-header-updated'>Your last Update &nbsp;</div></div>")
				wrapper.html(colectUpdatedHeader);
				self.findContentCollectFavoritesFilterAdded = true;

				if (typeof(data.results) != "undefined") {  // success	
					wrapper.append("<div id='collect-recently-edited'></div>");

					var collectRecentlyUpdatedHtml = "<ul>";
					for(var i = 0; i < data.results.length; i++) { 
						var lastEditUser = "null";
						if (data.results[i].attr.last_date_edited != null) {
							lastEditDate = data.results[i].attr.last_date_edited.date;
						}
						collectRecentlyUpdatedHtml += "<li class='first update-item'><span class='icon-container content-type-page'><a href='" + data.results[i].attr.url + "'>" + data.results[i].data + "</a></span>" +
							"<div class='update-item-desc-and-misc'>" +
				            "<div class='update-item-desc-and-date'>updated " + lastEditDate + "</div>" +				            	
				        "</li>";
					
					}
					collectRecentlyUpdatedHtml += "</ul>";
					
					jQuery("#collect-recently-edited").append(collectRecentlyUpdatedHtml);

					jQuery_142("#my-stuff-collect-recently-edited-filter-input").keyup(function() {
						var searchTerm = jQuery(this).val().toLowerCase();
						var results = wrapper.find("li.update-item");
						
						results.each(function(){
							var element = jQuery(this);
							
							if(element.text().toLowerCase().indexOf(searchTerm) >= 0)
								element.removeClass("hidden");
							else
								element.addClass("hidden");
						});
					});

				} else {
					// error
					alert("An error occurred when trying to retrieve your collect recently edited");
				}
			},
			error: function (data, textStatus, jqXHR) {
				// error
				alert("An error occurred when trying to retrieve your collect recently edited");
			}

		});
		
		//return false
		e.preventDefault();
		
	});

	// My MAX Collaboration groups
	jQuery("#find-content-my-collaboration-groups-link").click( function (e) {


		self.selectedTabId = "find-content-my-collaboration-groups-link";

		jQuery("#find-content-dialog-nav-wrapper ul a").removeClass("active");
		jQuery(this).addClass("active");

		jQuery("#find-content-dialog-content-wrapper > div").addClass("hidden");
		jQuery("#find-content-dialog-collaboration-groups-wrapper").removeClass("hidden");

		if (self.collabGroupsLoaded) {
			return false;
		}

		// show loading..
		jQuery("#find-content-dialog-collaboration-groups-wrapper").append("<span>Loading..</span>");

		jQuery.ajax({
			type: "GET",
			url: contextPath + '/ajax/getcollabgroupslistmacrohtml.action',
			dataType: 'html',
			complete: function xCompleteFunction(XMLHttpRequest, textStatus) { 
				var wrapper = jQuery("#find-content-dialog-collaboration-groups-wrapper");
				if (XMLHttpRequest.status==200) {  // success
					var response = jQuery(XMLHttpRequest.responseText);
					var responseDiv = response.find(".collaboration-groups-container");
					// remove loading..
					wrapper.empty();
					wrapper.append(responseDiv);
					self.collabGroupsLoaded = true;
				} else if (XMLHttpRequest.status==500) { // server error
					// remove loading..
					wrapper.empty();
					// set error message
					wrapper.append("<div>An error has occurred. Please refresh the page and try again. If the problem persists, please contact MAX Support.</div>");
				} else if (XMLHttpRequest.readyState == 4 && ( XMLHttpRequest.status == 0 || XMLHttpRequest.status == 12017	)){
					// remove loading..
					wrapper.empty();
					// set error message
					wrapper.append("<div>Your session has timed out, <a href='" + location.href  + "'>click here</a> to refresh.</div>");

				} else {  // catch all
					// remove loading..
					wrapper.empty();
					// set error message
					wrapper.append("<div>An error has occurred. Please refresh the page and try again. If the problem persists, please contact MAX Support.</div>");
				}
			}			
		}
		);

		//return false;
		e.preventDefault();
	});

	// My Page Watches
	jQuery("#" + self.PageWatchesTabId).click(function(e)
	{
		self.selectedTabId = self.PageWatchesTabId;

		jQuery("#find-content-dialog-nav-wrapper ul a").removeClass("active");
		jQuery(this).addClass("active");

		jQuery("#find-content-dialog-content-wrapper > div").addClass("hidden");
		jQuery("#find-content-dialog-page-watches-wrapper").removeClass("hidden");

		if (self.PageWatches.loaded) {
			return false;
		}

		self.PageWatches.getPageWatches();
		self.PageWatches.loaded = true;

		//return false;
		e.preventDefault();
	});

	// My Community Recently Viewed
	jQuery("#" + self.RecentlyViewedTabId + ", #" + self.RecentlyViewedSectionTabId).click(function(e)
	{
		self.selectedTabId = self.RecentlyViewedTabId;

		jQuery("#find-content-dialog-nav-wrapper ul a").removeClass("active");
		jQuery("#" + self.RecentlyViewedTabId).addClass("active");

		jQuery("#find-content-dialog-content-wrapper > div").addClass("hidden");
		jQuery("#" + self.RecentlyViewed.wrapperId).removeClass("hidden");

		if (self.RecentlyViewed.loaded) {
			return false;
		}

		self.RecentlyViewed.getRecentlyViewed();
		self.RecentlyViewed.loaded = true;

		//return false;
		e.preventDefault();
	});

	//My Collect Recently Viewed
	jQuery("#" + self.CollectRecentlyViewedTabId).click(function(e){

		var wrapper = jQuery("#find-content-dialog-collect-viewed-wrapper");

		self.selectedTabId = self.CollectRecentlyEditedTabId;

		jQuery("#find-content-dialog-nav-wrapper ul a").removeClass("active");
		jQuery(this).addClass("active");

		jQuery("#find-content-dialog-content-wrapper > div").addClass("hidden");
		wrapper.removeClass("hidden");

		if(self.collectRecentlyViewedPagesLoaded){
			return false;
		}

		wrapper.empty();

		// show loading..
		wrapper.append("<span>Loading..</span>");

		var collectViewedUrl = "https://" + window.location.hostname.replace("community.","") + "/exercises/collect2/api/browser_histories?type=viewed"; // our domains match
		
		collectViewedUrl = collectViewedUrl + "&token=" + utils.getProxyTicket(collectViewedUrl) + "&service=" + collectViewedUrl;
		
		//forget this.. collect doesnt use it.. always send ticket
		/*if (typeof(community.findContent.appUserSessionId) != "undefined") {
			collectViewedUrl = collectViewedUrl + "&app_user_session_id=" + community.findContent.appUserSessionId ;
		} else {
			collectViewedUrl = collectViewedUrl + "&token=" + utils.getProxyTicket(collectViewedUrl) + "&service=" + collectViewedUrl;
		}*/

		jQuery.ajax({
			type: "GET",
			url: contextPath + '/ajax/proxy.action?url=' + encodeURIComponent(collectViewedUrl),
			dataType: 'json',
			success: function (data, textStatus, jqXHR) {					
				// got collect session id? forget this.. collect doesnt use it.. always send ticket
				/*if (data.appUserSessionId) {
					community.findContent.appUserSessionId = data.appUserSessionId;
				}*/
				
				var collectIsFubarMessage = "<div class='collect-fubar-message' style='padding-bottom: 8px; text-align: center;'>Collect Recently Viewed is a new feature.  Only limited exercises are displayed.</div>";

				var collectViewedHeader = jQuery(collectIsFubarMessage + "<div class='find-content-toolbar'>Filter: <input id='my-stuff-collect-recently-viewed-filter-input' type='text'></input></div>" +
						"<div id='recently-updated-header'><div class='recently-updated-header-name'>Name</div><div class='recently-updated-header-updated'>Last Update &nbsp;</div></div>")
				wrapper.html(collectViewedHeader);

				if (typeof(data.results) != "undefined") {  // success	
					wrapper.append("<div id='collect-recently-viewed'></div>");

					var collectRecentlyViewedHtml = "<ul>";
					for(var i = 0; i < data.results.length; i++) { 
						var lastEditUsername = "null";
						var lastEditUserEmail = "null";
						if (data.results[i].attr.last_person_edited != null) {
							lastEditUsername = data.results[i].attr.last_person_edited.name;
							lastEditUserEmail = data.results[i].attr.last_person_edited.email;
						}
						var lastEditDate = "null";
						if (data.results[i].attr.last_date_edited != null) {
							lastEditDate = data.results[i].attr.last_date_edited.date;
						}
						collectRecentlyViewedHtml += "<li class='first update-item'><span class='icon-container content-type-page'><a href='" + data.results[i].attr.url + "'>" + data.results[i].data + "</a></span>" +
							"<div class='update-item-desc-and-misc'>" +
				            "<div class='update-item-desc-and-date'>by <a target='_blank' href='" + contextPath + "/display/~" + lastEditUserEmail + "'>" + lastEditUsername + "</a>" + " (" + lastEditDate + ")</div>" +				            	
				        "</li>";
					
					}
					collectRecentlyViewedHtml += "</ul>";
					
					jQuery("#collect-recently-viewed").append(collectRecentlyViewedHtml);

					jQuery_142("#my-stuff-collect-recently-viewed-filter-input").keyup(function() {
						var searchTerm = jQuery(this).val().toLowerCase();
						var results = wrapper.find("li.update-item");
						
						results.each(function(){
							var element = jQuery(this);
							
							if(element.text().toLowerCase().indexOf(searchTerm) >= 0)
								element.removeClass("hidden");
							else
								element.addClass("hidden");
						});
					});

				} else {
					// error
					alert("An error occurred when trying to retrieve your collect recently viewed");
				}
			},
			error: function (data, textStatus, jqXHR) {
				// error
				alert("An error occurred when trying to retrieve your collect recently viewed");
			}

		});

		//return false
		e.preventDefault();

	});


	// Search
	jQuery("#" + self.SearchTabId).click(function (e){
		self.selectedTabId = self.SearchTabId;

		jQuery("#find-content-dialog-nav-wrapper ul a").removeClass("active");
		jQuery(this).addClass("active");

		jQuery("#find-content-dialog-content-wrapper > div").addClass("hidden");
		jQuery("#find-content-dialog-search-wrapper").removeClass("hidden");

		if(self.search.loaded)
			return false;			

		self.search.createSearchForm();
		self.search.loaded = true;

		//return false;
		e.preventDefault();
	});

	// Agency Communities
	jQuery("#" + self.AgencyCommunitiesTabId).click( function (e) {

		self.selectedTabId = self.AgencyCommunitiesTabId;

		jQuery("#find-content-dialog-nav-wrapper ul a").removeClass("active");
		jQuery(this).addClass("active");

		jQuery("#find-content-dialog-content-wrapper > div").addClass("hidden");
		jQuery("#find-content-dialog-agency-communities-wrapper").removeClass("hidden");

		if (self.AgencyCommunities.loaded) {
			return false;
		}

		var agencyCommunitiesHTML = jQuery("<h2>Agency Communities</h2>" +
				"<ul class='column1'>" +
				"<li><a href='/community/x/ZAFqE'>Access Board</a></li>" +
				"<li><a href='/community/x/iQ0'>Army Corps of Engineers</a></li>" +
				"<li><a href='/community/x/pRM'>Broadcasting Board of Governors</a></li>" +
				"<li><a href='/community/x/EoKAFw'>Commission on Civil Rights</a></li>" +
				"<li><a href='/community/x/GwMQIg'>Consumer Financial Protection Bureau</a></li>" +				
				"<li><a href='/community/x/0YHsC'>Consumer Products Safety Commission</a></li>" +
				"<li><a href='/community/x/QoDBAw'>Corporation for National &amp; Community Service</a></li>" +
				"<li><a href='/community/x/vgGQEw'>Council on Environmental Quality</a></li>" +
				"<li><a href='/community/x/bA0'>Department of Agriculture</a></li>" +
				"<li><a href='/community/x/bw0'>Department of Commerce</a></li>" +
				"<li><a href='/community/x/cQ0'>Department of Defense</a></li>" +
				"<li><a href='/community/x/cw0'>Department of Education</a></li>" +
				"<li><a href='/community/x/dQ0'>Department of Energy</a></li>" +
				"<li><a href='/community/x/dw0'>Department of Health and Human Services</a></li>" +
				"<li><a href='/community/x/ew0'>Department of Homeland Security</a></li>" +
				"<li><a href='/community/x/fQ0'>Department of Housing &amp; Urban Development</a></li>" +
				"<li><a href='/community/x/fw0'>Department of the Interior</a></li>" +
				"<li><a href='/community/x/gQ0'>Department of Justice</a></li>" +
				"<li><a href='/community/x/gw0'>Department of Labor</a></li>" +
				"<li><a href='/community/x/oQ0'>Department of State</a></li>" +
				"<li><a href='/community/x/hQ0'>Department of Transportation</a></li>" +
				"<li><a href='/community/x/nw0'>Department of the Treasury</a></li>" +
				"<li><a href='/community/x/hw0'>Department of Veterans Affairs</a></li>" +
				"<li><a href='/community/x/iw0'>Environmental Protection Agency</a></li>" +
				"<li><a href='/community/x/uYDDGw'>Equal Employment Opportunity Commission</a></li>" +
				"</ul>" +
				"<ul class='column2'>" +
				"<li><a href='/community/x/lICaF'>Executive Office of the President</a></li>" +
				"<li><a href='/community/x/W4B5G'>Export-Import Bank of the United States</a></li>" +
				"<li><a href='/community/x/rxM'>Federal Communications Commission</a></li>" +
				"<li><a href='/community/x/VIAHBg'>Federal Deposit Insurance Corporation</a></li>" +
				"<li><a href='/community/x/GoEZGw'>Federal Trade Commission</a></li>" +
				"<li><a href='/community/x/mw0'>General Services Administration</a></li>" +
				"<li><a href='/community/x/jQ0'>National Aeronautics &amp; Space Admininistration</a></li>" +
				"<li><a href='/community/x/8A0'>National Archives &amp; Records Administration</a></li>" +
				"<li><a href='/community/x/3YHPCg'>National Gallery of Art</a></li>" +
				"<li><a href='/community/x/jw0'>National Science Foundation</a></li>" +
				"<li><a href='/community/x/7oAfC'>Nuclear Regulatory Commission</a></li>" +
				"<li><a href='/community/x/AQFEC'>Office of the Director of National Intelligence</a></li>" +
				"<li><a href='/community/x/-A8'>Office of Management and Budget</a></li>" +
				"<li><a href='/community/x/SQHpF'>Office of National Drug Control Policy</a></li>" +
				"<li><a href='/community/x/hQDsBg'>Office of Personnel Management</a></li>" +
				"<li><a href='/community/x/EgAc'>Office of Science &amp; Technology Policy</a></li>" +
				"<li><a href='/community/x/eADrBw'>Pension Benefit Guaranty Corporation</a></li>" +
				"<li><a href='/community/x/kw0'>Small Business Administration</a></li>" +
				"<li><a href='/community/x/P4DBAw'>Smithsonian Institution</a></li>" +
				"<li><a href='/community/x/mQ0'>Social Security Administration</a></li>" +
				"<li><a href='/community/x/JAqDJg'>USAID</a></li>" +
				"<li><a href='/community/x/HQNNG'>US Institute of Peace</a></li>" +
				"<li><a href='/community/x/0IA5Bg'>US Trade Representative</a></li>" +
				"</ul>" +
				"<ul class='column3'>" +
				"<li><a href='/community/x/6BQ'>Test Space</a></li>" +
				"<li><a href='/community/x/fIPDGg'>MAX Design Space</a></li>" +
				"<li><a href='/community/x/CABnAQ'>MAX Development Space</a></li>" +
		"</ul>");

		jQuery("#find-content-dialog-agency-communities-wrapper").append(agencyCommunitiesHTML);

		self.AgencyCommunities.loaded = true;

		//return false;
		e.preventDefault();
	});


	// Government Wide Communities
	jQuery("#" + self.GovWideCommunitiesTabId).click( function (e) {

		self.selectedTabId = self.GovWideCommunitiesTabId;

		jQuery("#find-content-dialog-nav-wrapper ul a").removeClass("active");
		jQuery(this).addClass("active");

		jQuery("#find-content-dialog-content-wrapper > div").addClass("hidden");
		jQuery("#find-content-dialog-gov-wide-link-wrapper").removeClass("hidden");

		if (self.GovWideCommunities.loaded) {
			return false;
		}

		var govWideCommunitiesHTML = jQuery("<div>" +
				"<h2>Government-Wide Communities</h2>" +
				"<ul>" +
				"	<li><a href='/community/x/IgBnAQ'>Acquisition</a></li>" +
				"	<li><a href='/community/x/3wU'>Budget</a></li>" +
				"	<li><a href='/community/x/Dw4'>E-Government</a></li>" +
				"	<li><a href='/community/x/EQ4'>Financial Management</a></li>" +
				"	<li><a href='/community/x/HgDp'>Grants</a></li>" +
				"	<li><a href='/community/x/OIBIB'>Homeland Security</a></li>" +
				"</ul>" +
				"</div>	" +	
				"<div><ul>" +				
				"	<li><a href='/community/x/S4CAAQ'>Human Capital</a></li>" +
				"	<li><a title='IT Infrastructure Line of Business' href='/community/x/IAG5Bw'>IT Infrastructure</a></li>" +
				"	<li><a href='/community/x/6IAkDw'>Management</a></li>" +
				"	<li><a href='/community/x/goGXDw'>Open Government</a></li>" +
				"	<li><a href='/community/x/dwDp'>Performance</a></li>" +
				"	<li><a href='/community/x/MABnAQ'>Planning</a></li>" +
				"</ul>" +
				"</div>	" +	
				"<div><ul>" +
				"	<li><a href='/community/x/9AOxE'>Recovery Act</a></li>" +
				"	<li><a href='/community/x/OwAxCw'>Small Agencies</a></li>" +
				"	<li><a href='/community/x/OwM1Hg'>Sustainability</a></li>" +
				"	<li><a href='/community/x/M4o5J'>Web and New Media</a></li>" +
				"</ul>" +
		"</div>");

		jQuery("#find-content-dialog-gov-wide-link-wrapper").append(govWideCommunitiesHTML);

		self.GovWideCommunities.loaded = true;

		//return false;
		e.preventDefault();
	});

	// Cross-Community Topics 
	jQuery("#" + self.CrossCommunitiesTabId).click( function (e) {

		self.selectedTabId = self.CrossCommunitiesTabId;

		jQuery("#find-content-dialog-nav-wrapper ul a").removeClass("active");
		jQuery(this).addClass("active");

		jQuery("#find-content-dialog-content-wrapper > div").addClass("hidden");
		jQuery("#find-content-dialog-cross-community-wrapper").removeClass("hidden");

		if (self.CrossCommunities.loaded) {
			return false;
		}

		var crossCommunitiesHTML = jQuery("<div>" +
				"<h2>Cross-Community Topics</h2>" +
				"<ul>" +
				"		<li><a href='/community/display/FedCom/Collaborations+%28All+Communities%29'>Collaborations</a></li>" +
				"		<li><a href='/community/display/FedCom/Data+Calls+and+Exercises+%28All+Communities%29'>Data Calls &amp; Exercises</a></li>" +
				"		<li><a href='/community/display/FedCom/Documents+and+Guidance+%28All+Communities%29'>Documents &amp; Guidance</a></li>" +
				"	</ul>" +
				"	</div>" +			
				"	<div><ul>" +
				"		<li><a href='/community/display/FedCom/Highlights+%28All+Communities%29'>Highlights</a></li>" +
				"		<li><a href='/community/display/FedCom/Human+Capital+%28All+Communities%29'>Human Capital</a></li>" +
				"		<li><a href='/community/display/FedCom/Media+%28All+Communities%29'>Media</a></li>" +
				"	</ul>" +
				"	</div>" +
				"	<div><ul>" +
				"		<li><a href='/community/display/FedCom/Recent+Updates+%28All+Communities%29'>Recent Updates</a></li>" +
				"		<li><a href='/community/display/FedCom/Shared+Information+%28All+Communities%29'>Shared Information</a></li>" +
				"	</ul>" +
		"</div>");

		jQuery("#find-content-dialog-cross-community-wrapper").append(crossCommunitiesHTML);

		self.CrossCommunities.loaded = true;

		//return false;
		e.preventDefault();
	});


	// Other spaces 
	jQuery("#" + self.OtherSpacesTabId).click( function (e) {		

		self.selectedTabId = self.OtherSpacesTabId;

		jQuery("#find-content-dialog-nav-wrapper ul a").removeClass("active");
		jQuery(this).addClass("active");

		jQuery("#find-content-dialog-content-wrapper > div").addClass("hidden");
		jQuery("#find-content-dialog-other-spaces-wrapper").removeClass("hidden");

		if (self.OtherSpaces.loaded) {
			return false;
		}

		// show loading..
		jQuery("#find-content-dialog-other-spaces-wrapper").append("<span>Loading..</span>");

		jQuery.ajax({
			type: "GET",
			url: contextPath + '/ajax/getspacesmacrohtml.action?spacesSelectedTab=all',
			dataType: 'html',
			complete: function xCompleteFunction(XMLHttpRequest, textStatus) { 
				var wrapper = jQuery_142("#find-content-dialog-other-spaces-wrapper");
				if (XMLHttpRequest.status==200) {  // success				 		
					var response = jQuery_142(XMLHttpRequest.responseText);
					var responseTable = response.find("div.spaceListDiv"); 
					// remove loading..
					wrapper.empty();
					wrapper.append(responseTable);
					// hide tab nav from macro
					// jQuery("#find-content-dialog-other-spaces-wrapper ul.tabnav, #find-content-dialog-other-spaces-wrapper td.operations").hide();
					self.OtherSpaces.loaded = true;

				} else if (XMLHttpRequest.status==500) { // server error
					// remove loading..
					wrapper.empty();
					// set error message
					wrapper.append("<div>An error has occurred. Please refresh the page and try again. If the problem persists, please contact MAX Support.</div>");
				} else if (XMLHttpRequest.readyState == 4 && ( XMLHttpRequest.status == 0 || XMLHttpRequest.status == 12017	)){
					// remove loading..
					wrapper.empty();
					// set error message
					wrapper.append("<div>Your session has timed out, <a href='" + location.href  + "'>click here</a> to refresh.</div>");

				} else {  // catch all
					// remove loading..
					wrapper.empty();
					// set error message
					wrapper.append("<div>An error has occurred. Please refresh the page and try again. If the problem persists, please contact MAX Support.</div>");
				}
			}	
		});

		//return false;
		e.preventDefault();
	});
}
} catch (err) {
    if (console && console.log && console.error) {
        console.log("Error running batched script.");
        console.error(err);
    }
}

;
;try {
/* module-key = 'gov.eop.omb.confluence.resources.MAX-Resources:design-resources', location = 'gov/eop/omb/confluence/resources/design/scripts/FindContent/find-content-search.js' */
function FindContentSearch()
{
	// Local Variables
	var self = this;
	
	var constants = {};
	var filter = {};
	var autocompleteResults = [];
	var responseType = { search: 0, autocomplete: 1 };
	
	constants.minFilterLength = 3;
	constants.searchTimeout = 500;
	
	filter.query = {};
	filter.query.available = true;
	filter.query.previous = "";
	
	filter.user = {};
	filter.user.available = true;
	filter.user.previous = "";
	
	// Public Variables
	this.loaded = false;
	this.maxResults = 50;
	this.autocompleteFocus = false;
	
	this.wrapperId = "find-content-dialog-search-wrapper";
	
	// Public Functions
	this.createSearchForm = function()
	{
		var searchWrapper = jQuery("#" + self.wrapperId);

		var searchForm = jQuery("#find-content-search-form")
		
		if(searchForm.size() == 0)
		{
			searchForm = jQuery("<form id='find-content-search-form' action='" + contextPath + "/json/search.action' method='get'></form>");
			
			var query = jQuery("<input type='text' id='find-content-search-query' name='queryString' />");
			var where = jQuery("<select id='find-content-search-where' name='where'></select>");
			var what = jQuery("<select id='find-content-search-what' name='where'></select>");
			var when = jQuery("<select id='find-content-search-when' name='when'></select>");
			var who = jQuery_142("<input type='text' id='find-content-search-who' name='who' />");
			var search = jQuery("<input type='submit' id='find-content-search-button' value='Search' />");
			var results = jQuery("<div class='find-content-search-results'></div>");
			
			var whereWrapper = jQuery("<div class='search-filter-container'></div>");
			var whatWrapper = jQuery("<div class='search-filter-container'></div>");
			var whenWrapper = jQuery("<div class='search-filter-container'></div>");
			var whoWrapper = jQuery("<div class='search-filter-container'></div>");
			
			var queryContainer = jQuery("<div class='find-content-query-container'></div>");
			var filterContainer = jQuery("<div class='find-content-filter-container'></div>");
			
			var userAutocompleter = jQuery("<ul class='find-content-search-user-autocompleter hidden'></ul>");
		
			query.attr("autocomplete", "off");
			who.attr("autocomplete", "off");
			
			queryContainer.append(query);
			queryContainer.append(search);
			
			where.append(jQuery("<option value='conf_all'>All Spaces</option>"));
			
			// Current Page Option
			if(jQuery("#confluence-page-id").attr("content") > 0)
				where.append(jQuery("<option value='max_page_children'>Current Page and Children</option>"));
			
			where.append(jQuery("<option value='max_this_space'>This Space</option>"));
			where.append(jQuery("<option value='conf_favorites'>Favorite Spaces</option>"));
			where.append(jQuery("<option value='conf_global'>Global Spaces</option>"));
			//where.append(jQuery("<option value='conf_personal'>Personal Spaces</option>"));
			whereWrapper.append(jQuery("<div class='search-filter-heading'>Where</div>"));
			whereWrapper.append(where);
			
			what.append(jQuery("<option value=''>All Content Types</option>"));
			what.append(jQuery("<option value='page'>Pages</option>"));
			what.append(jQuery("<option value='blogpost'>Blog Posts</option>"));
			what.append(jQuery("<option value='comment'>Comments</option>"));
			what.append(jQuery("<option value='attachment'>Attachments</option>"));
			what.append(jQuery("<option value='status'>Status Updates</option>"));
			what.append(jQuery("<option value='userinfo'>Profiles</option>"));
			what.append(jQuery("<option value='mail'>Mail</option>"));
			what.append(jQuery("<option value='spacedesc'>Space Descriptions</option>"));
			whatWrapper.append(jQuery("<div class='search-filter-heading'>What</div>"));
			whatWrapper.append(what);
		
			when.append(jQuery("<option value=''>Any Date</option>"));
			when.append(jQuery("<option value='LASTDAY'>Last 24 Hours</option>"));
			when.append(jQuery("<option value='LASTTWODAYS'>Last 48 Hours</option>"));
			when.append(jQuery("<option value='LASTWEEK'>Last Week</option>"));
			when.append(jQuery("<option value='LASTMONTH'>Last Month</option>"));
			when.append(jQuery("<option value='LASTSIXMONTHS'>Last Six Months</option>"));
			when.append(jQuery("<option value='LASTYEAR'>Last Year</option>"));
			when.append(jQuery("<option value='LASTTWOYEARS'>Last Two Years</option>"));
			whenWrapper.append(jQuery("<div class='search-filter-heading'>When</div>"));
			whenWrapper.append(when);
		
			whoWrapper.append(jQuery("<div class='search-filter-heading'>Who</div>"));
			whoWrapper.append(who);
			whoWrapper.append(userAutocompleter);
			
			filterContainer.append(whereWrapper);
			filterContainer.append(whatWrapper);
			filterContainer.append(whenWrapper);
			filterContainer.append(whoWrapper);
			
			searchForm.append(queryContainer);
			searchForm.append(filterContainer);
			
			search.click(self.getSearchResults);
			//query.keyup(self.getSearchResults);
			who.keyup(self.getUsers);
			
			if(!jQuery.browser.msie)
			{
				userAutocompleter.hover(function(){ self.autocompleteFocus = true; }, function(){ self.autocompleteFocus = false; });
				who.blur(self.hideUserAutocomplete);
			}
			else
			{
				// IE Hack because apparently it doesn't know how to queue events properly.
				userAutocompleter.hover(
						function()
						{ 
							self.autocompleteFocus = true; 
							who.unbind("blur");
						}, 
						function()
						{ 
							self.autocompleteFocus = false;
							who.blur(self.hideUserAutocomplete);
						});
			}
			
			searchWrapper.append(searchForm);
			searchWrapper.append(results);
		}
	};
	
	// Site Search
	this.getSearchResults = function()
	{
		var wrapper = jQuery("#" + self.wrapperId);
		var resultsContainer = wrapper.find("div.find-content-search-results");
		
		var query = {};
		var who = wrapper.find("#find-content-search-who").val();
		var where = wrapper.find("#find-content-search-where").val();
		
		var queryString = wrapper.find("#find-content-search-query").val();
		var pageId = jQuery("#confluence-page-id").attr("content");
		var spaceKey = jQuery("#confluence-space-key").attr("content");
		
		if(filter.query.available && queryString.length >= constants.minFilterLength)
		{
			filter.query.available = false;
			filter.query.previous = queryString;
	
			resultsContainer.empty();
			resultsContainer.append("<div>Loading...</div>");
			
			query.queryString = queryString;
			query.type = jQuery("#find-content-search-what").val();
			query.lastModified = jQuery("#find-content-search-when").val();
			query.maxResultsPerPageInt = self.maxResults;
			
			// Where Special Cases
			if(where == "max_page_children")
				query.queryString = "ancestorIds:" + pageId + " AND " + query.queryString;
			else if(where == "max_this_space")
				query.where = spaceKey;
			else
				query.where = where;
	
			// Who
			if(who.length > 0)
				query.contributor = who;
	
			jQuery.ajax({
				type: "GET",
				url: contextPath + '/ajax/customsearch.action',
				data: query,
				dataType: 'json',
				complete: function(XMLHttpRequest, textStatus){
						self.requestComplete(XMLHttpRequest, textStatus, responseType.search, query);
					}
				});
		}
		
		return false;
	};
	
	// User Autocomplete
	this.getUsers = function()
	{
		var wrapper = jQuery("#" + self.wrapperId);
		var autocompleter = wrapper.find("ul.find-content-search-user-autocompleter");
		
		var data = {};
		
		data.query = wrapper.find("#find-content-search-who").val();
		
		if(filter.user.available && data.query.length >= constants.minFilterLength)
		{
			filter.user.available = false;
			filter.user.previous = data.query;
	
			autocompleter.empty();
	
			jQuery.ajax({
				type: "GET",
				url: contextPath + '/json/usersearch.action',
				data: data,
				dataType: 'json',
				complete: function(XMLHttpRequest, textStatus) {
						self.requestComplete(XMLHttpRequest, textStatus, responseType.autocomplete);
					}
				});
		}
		
		return false;
	};
	
	this.requestComplete = function(XMLHttpRequest, textStatus, requestType, query)
	{
		var wrapper = jQuery("#" + self.wrapperId);
		var results = wrapper.find("div.find-content-search-results"); 
		
		results.empty();
		
		if(XMLHttpRequest.status == 200 && requestType == responseType.search) // Success
			self.renderSearchResults(XMLHttpRequest.responseText, query);
		else if(XMLHttpRequest.status == 200 && requestType == responseType.autocomplete) // Success
			self.renderAutocompleteResults(XMLHttpRequest.responseText);
		else if(XMLHttpRequest.status == 500) // Server Error
			results.append("<div>An Error [" + XMLHttpRequest.status + "] occured: " + textStatus + "</div>");
		else if (XMLHttpRequest.readyState == 4 && (XMLHttpRequest.status == 0 || XMLHttpRequest.status == 12017)) // Session Timeout
			results.append("<div>Your session has timed out, <a href='" + location.href  + "'>click here</a> to refresh.</div>");
		else // Unknown Error
			results.append("<div>An Error [" + XMLHttpRequest.status + "] occured: " + textStatus + "</div>");
	};
	
	// Render Search Results
	this.renderSearchResults = function(htmlData, query)
	{
		var wrapper = jQuery("#" + self.wrapperId);
		var resultsContainer = wrapper.find("div.find-content-search-results");
		var data = JSON.parse(htmlData);
		
		resultsContainer.empty();

		var resultsTable = jQuery("<table id='find-content-search-results-table' cellspacing='0'></table>");
		var resultsFooter = jQuery("<div class='find-content-search-results-footer'></div>");

		if(data.total > 0)
		{
			var tableHead = jQuery("<thead class='find-content-search-results-header'></thead>");
			var tableBody = jQuery("<tbody class='find-content-search-results-body'></tbody>");
			var headRow = jQuery("<tr></tr>");

			headRow.append(jQuery("<th class='search-result-title'>Page Title</th>"));
			headRow.append(jQuery("<th class='search-result-space'>Space</th>"));
			headRow.append(jQuery("<th class='search-result-date'>Updated</th>"));

			tableHead.append(headRow);
			
			resultsTable.append(tableHead);

			jQuery.each(data.results, function(){
				var row, title, space, date, pageLink, spaceLink;

				row = jQuery("<tr></tr>");
				row.addClass("search-result");
				row.addClass("content-type-" + this.type);

				title = jQuery("<td class='search-result-title'></td>");
				pageLink = jQuery("<a></a>");
				pageLink.attr("href", this.url)
				pageLink.text(this.title);

				title.append(pageLink);
				row.append(title);

				space = jQuery("<td class='search-result-space'></td>")
				spaceLink = jQuery("<a></a>");
				spaceLink.attr("title", this.spaceName);
				spaceLink.attr("href", contextPath + "/display/" + this.spaceKey + "/")
				spaceLink.text(this.spaceName);

				space.append(spaceLink);
				row.append(space);

				date = jQuery("<td class='search-result-date'></td>");
				date.attr("title", this.date);
				date.text(this.friendlyDate);

				row.append(date);

				tableBody.append(row);
			});

			resultsTable.append(tableBody);
			resultsContainer.append(resultsTable);

			if(data.total <= this.maxResults)
			{
				resultsFooter.append(jQuery("<span>No additional results.</span>"));
			}
			else
			{
				var siteSearchURL = contextPath + "/dosearchsite.action";
				siteSearchURL = siteSearchURL + "?queryString=" + query.queryString;
				siteSearchURL = siteSearchURL + "&where=" + query.where;
				siteSearchURL = siteSearchURL + "&type=" + query.type;
				siteSearchURL = siteSearchURL + "&lastModified=" + query.lastModified;

				if(query.contributor)
				{
					siteSearchURL = siteSearchURL + "&contributor=" + query.contributor;
				}

				resultsFooter.append(jQuery("<span>Showing 1-" + this.maxResults + " of " + data.total + " results.</span>"));
				resultsFooter.append(jQuery("<a href='" + siteSearchURL + "'>Full Site Search</a>"));
			}
		}
		else
		{
			resultsFooter.append(jQuery("<span>There were no pages found.</span>"));
		}

		resultsContainer.append(resultsFooter);
		
		self.resetFilter();
	};
	
	// Render User Autocomplete
	this.renderAutocompleteResults = function(htmlData, query)
	{
		var wrapper = jQuery("#" + self.wrapperId);
		var autocompleteContainer = wrapper.find("ul.find-content-search-user-autocompleter");
		var data = JSON.parse(htmlData);
		
		if(data.length > 0 && data[0].status == null)
		{
			autocompleteResults = data;
			
			jQuery.each(autocompleteResults, function(){
				var li = jQuery("<li>" + this.fullName + "</li>");
				var span = jQuery("<span>" + this.username + "</span>");
				
				li.append(span);
				
				li.data("fullName", this.fullName);
				li.data("username", this.username);
				li.click(self.addUserFilter);
				
				autocompleteContainer.append(li);
			});
		}
		else
		{
			autocompleteContainer.append("<li>No matches found.</li>");
		}
		
		autocompleteContainer.removeClass("hidden");
		
		self.resetUserFilter();
	}
	
	this.resetFilter = function()
	{
		var wrapper = jQuery("#" + self.wrapperId);
		var query = wrapper.find("#find-content-search-query");
		
		filter.query.available = true;
		
		if(query.val() != filter.query.previous)
			self.getSearchResults();
	};
	
	this.resetUserFilter = function()
	{
		var wrapper = jQuery("#" + self.wrapperId);
		var who = wrapper.find("#find-content-search-who");
		
		filter.user.available = true;
		
		if(who.val() != filter.user.previous)
			self.getUsers();
	};
	
	this.addUserFilter = function()
	{
		var wrapper = jQuery("#" + self.wrapperId);
		var who = wrapper.find("#find-content-search-who");
		var autocompleteContainer = wrapper.find("ul.find-content-search-user-autocompleter");
		var selection = jQuery(this);
		
		jQuery.each(autocompleteResults, function(){
			if(this.fullName == selection.data("fullName"))
			{
				who.val(this.username);
				return false;
			}
		});
		
		self.autocompleteFocus = false
		self.hideUserAutocomplete();
	}
	
	
	this.hideUserAutocomplete = function()
	{
		var wrapper = jQuery("#" + self.wrapperId);
		var autocompleteContainer = wrapper.find("ul.find-content-search-user-autocompleter");
		
		if(self.autocompleteFocus == false)
			autocompleteContainer.addClass("hidden");
		else
			setTimeout("community.findContent.search.hideUserAutocomplete();", 1000);
	};
}

function initializeFindContentSearch()
{
	if(community.findContent.search == null)
	{
		community.findContent.search = new FindContentSearch();
	}
}
} catch (err) {
    if (console && console.log && console.error) {
        console.log("Error running batched script.");
        console.error(err);
    }
}

;
;try {
/* module-key = 'gov.eop.omb.confluence.resources.MAX-Resources:design-resources', location = 'gov/eop/omb/confluence/resources/design/scripts/FindContent/find-content-recently-viewed.js' */
function FindContentRecentlyViewed()
{
	var self = this;
	
	this.loaded = false;
	this.wrapperId = "find-content-dialog-recently-viewed-wrapper";
	
	this.getRecentlyViewed = function()
	{
		var wrapper = jQuery("#" + self.wrapperId);
		
		wrapper.empty();
		wrapper.text("Loading...");
		
		jQuery.ajax({
			type: "GET",
			url: contextPath + '/users/viewuserhistory.action',
			dataType: 'html',
			complete: self.requestComplete
		});
	};
	
	this.requestComplete = function(XMLHttpRequest, textStatus)
	{
		var wrapper = jQuery("#" + self.wrapperId);
		
		wrapper.empty();
		
		if(XMLHttpRequest.status == 200) // Success
			self.showRecentlyViewed(jQuery(XMLHttpRequest.responseText));
		else if(XMLHttpRequest.status == 500) // Server Error
			wrapper.append("<div>An error has occurred. Please refresh the page and try again. If the problem persists, please contact MAX Support.</div>");
		else if (XMLHttpRequest.readyState == 4 && (XMLHttpRequest.status == 0 || XMLHttpRequest.status == 12017)) // Session Timeout
			wrapper.append("<div>Your session has timed out, <a href='" + location.href  + "'>click here</a> to refresh.</div>");
		else // Unknown Error
			wrapper.append("<div>An error has occurred. Please refresh the page and try again. If the problem persists, please contact MAX Support.</div>");
	};
	
	this.showRecentlyViewed = function(data)
	{
		var wrapper = jQuery("#" + self.wrapperId);
		var responseTable = data.find("#content").children("table");
		var filter = jQuery("<div class='find-content-toolbar'></div>");
		var filterText = jQuery("<input />");
		
		var thead = jQuery("<thead></thead>");
		var headRow = jQuery("<tr></tr>");
		var headCell = jQuery("<th></th>");
		var name = jQuery("<span></span>");
		var updated = jQuery("<span></span>");
		
		name.text("Name");
		name.addClass("recently-viewed-heading-name");
		updated.html("Last Updated &nbsp;");
		updated.addClass("recently-viewed-heading-updated");
		
		headCell.append(name);
		headCell.append(updated);
		
		headRow.append(headCell);
		thead.append(headRow);
		
		responseTable.attr("id", "find-content-recently-viewed-table");
		responseTable.prepend(thead);
		
		filterText.attr("type", "text");
		filterText.keyup(function(){
		   jQuery.uiTableFilter(jQuery("#find-content-recently-viewed-table"), jQuery(this).val());
		});
		
		filter.text("Filter: ");
		filter.append(filterText);
		
		wrapper.empty();
		wrapper.append(filter);
		wrapper.append(responseTable);
	};
}

function initializeFindContentRecentlyViewed()
{
	if(community.findContent.RecentlyViewed == null)
	{
		community.findContent.RecentlyViewed = new FindContentRecentlyViewed();
	}
}
} catch (err) {
    if (console && console.log && console.error) {
        console.log("Error running batched script.");
        console.error(err);
    }
}

;
;try {
/* module-key = 'gov.eop.omb.confluence.resources.MAX-Resources:design-resources', location = 'gov/eop/omb/confluence/resources/design/scripts/FindContent/find-content-page-watches.js' */
function FindContentPageWatches()
{
	var self = this;
	
	var constants = {};
	constants.minFilterLength = 3;
	constants.filterTimeout = 500;
	
	var filterAvailable = true;
	var previousFilter = "";
	
	this.loaded = false;
	this.wrapperId = "find-content-dialog-page-watches-wrapper";
	
	this.getPageWatches = function()
	{
		var wrapper = jQuery_142("#" + self.wrapperId);
		
		wrapper.empty();
		wrapper.text("Loading...");
		
		jQuery_142.ajax({
			type: "GET",
			url: contextPath + '/ajax/getmypagewatches.action',
			dataType: 'html',
			complete: self.requestComplete
		});
	};
	
	this.requestComplete = function(XMLHttpRequest, textStatus)
	{
		var wrapper = jQuery_142("#" + self.wrapperId);
		
		wrapper.empty();
		
		if(XMLHttpRequest.status == 200) // Success
			self.showPageWatches(jQuery_142(XMLHttpRequest.responseText));
		else if(XMLHttpRequest.status == 500) // Server Error
			wrapper.append("<div>An error has occurred. Please refresh the page and try again. If the problem persists, please contact MAX Support.</div>");
		else if (XMLHttpRequest.readyState == 4 && (XMLHttpRequest.status == 0 || XMLHttpRequest.status == 12017)) // Session Timeout
			wrapper.append("<div>Your session has timed out, <a href='" + location.href  + "'>click here</a> to refresh.</div>");
		else // Unknown Error
			wrapper.append("<div>An error has occurred. Please refresh the page and try again. If the problem persists, please contact MAX Support.</div>");
	};
	
	this.showPageWatches = function(data)
	{
		var wrapper = jQuery_142("#" + self.wrapperId);
		var responseDiv = data.find(".my-page-watches-container");
		
		var head = jQuery_142("<div></div>");
		var name = jQuery_142("<div></div>");
		var updated = jQuery_142("<div></div>");
		var filter = jQuery_142("<div class='find-content-toolbar'></div>");
		var filterText = jQuery_142("<input />");
		
		filterText.attr("type", "text");
		filterText.keyup(self.filterResults);
		
		filter.text("Filter: ");
		filter.addClass("find-content-toolbar");
		filter.append(filterText);
		
		filter.append("<a class='toolbar-manage-my-page-watches' href='" + contextPath + "/users/viewnotifications.action' >Manage Page Watches</a><span id='my-page-watches-count'></span>");
		
		name.text("Name");
		name.addClass("page-watches-header-name");
		
		updated.text("Last Updated");
		updated.addClass("page-watches-header-updated");
		
		head.attr("id", "page-watches-header");
		
		head.append(name);
		head.append(updated);
		
		wrapper.empty();
		wrapper.append(filter);
		wrapper.append(head);
		wrapper.append(responseDiv);
		
		// now update the page watch count
		var myPageWatchesCount = jQuery_142("#myPageWatchesCount").val();
		jQuery_142("#my-page-watches-count").html("You are watching " + jQuery_142("#myPageWatchesCount").val() + " page(s)");
	};
	
	this.filterResults = function()
	{
		var wrapper = jQuery_142("#" + self.wrapperId);
		var filter = wrapper.find("input").val().toLowerCase();
		
		if(filter != previousFilter && (filter.length >= constants.minFilterLength || filter.length == 0))
		{
			var results = wrapper.find("li.my-page-watches-list-item");
			
			previousFilter = filter;
			
			results.each(function(){
				var element = jQuery_142(this);
				
				if(element.text().toLowerCase().indexOf(filter) >= 0)
					element.removeClass("hidden");
				else
					element.addClass("hidden");
			});
			
			setTimeout("community.findContent.PageWatches.resetFilter();", constants.filterTimeout);
		}
	};
	
	this.resetFilter = function()
	{
		var wrapper = jQuery_142("#" + self.wrapperId);
		var query = wrapper.find("input");
		
		filterAvailable = true;
		
		if(query.val() != previousFilter)
		{
			self.filterResults();
		}
	};
}

function initializeFindContentPageWatches()
{
	if(community.findContent.PageWatches == null)
	{
		community.findContent.PageWatches = new FindContentPageWatches();
	}
}
} catch (err) {
    if (console && console.log && console.error) {
        console.log("Error running batched script.");
        console.error(err);
    }
}

;
;try {
/* module-key = 'gov.eop.omb.confluence.resources.MAX-Resources:design-resources', location = 'gov/eop/omb/confluence/resources/design/scripts/FindContent/find-content-recently-updated.js' */
function FindContentRecentlyUpdated()
{
	var self = this;
	
	var constants = {};
	constants.minFilterLength = 1;
	constants.filterTimeout = 500;
	constants.pageSize = 50;
	
	var filterAvailable = true;
	var previousFilter = "";
	
	this.loaded = false;
	this.wrapperId = "find-content-dialog-recently-updated-wrapper";
	
	this.getRecentlyUpdated = function()
	{
		var wrapper = jQuery("#" + self.wrapperId);
		var query = {};
		var startHandle = jQuery(".find-content-dialog .more-link-container a").attr("href");
		
		if(self.loaded == false)
		{
			wrapper.empty();
			wrapper.append("<div class='loading'>Loading...</div>");
		}
		
		query.theme = "concise";
		query.pageSize = constants.pageSize;
		query.startIndex = "0";
		query.authors = jQuery("meta[name=loggedInUsername]").attr("content");
		query.spaceKeys = "*";
		query.contentType = "-mail,page,comment,blogpost,attachment,userinfo,spacedesc,personalspacedesc,status";
		
		if(startHandle != undefined)
			query.startHandle = startHandle.substring(startHandle.indexOf("&startHandle") + 13, startHandle.indexOf("&authors"));
		
		jQuery.ajax({
				type: "GET",
			 	url: contextPath + '/plugins/recently-updated/changes.action',
			 	data: query,
			 	dataType: 'html',
			 	complete: self.requestComplete
			}
		);
	   
	   return false;
	};
	
	this.requestComplete = function(XMLHttpRequest, textStatus)
	{
		var wrapper = jQuery("#" + self.wrapperId);
		
		wrapper.find(".loading").hide();
		
		if(XMLHttpRequest.status == 200) // Success
			self.showRecentlyUpdated(jQuery(XMLHttpRequest.responseText));
		else if(XMLHttpRequest.status == 500) // Server Error
			wrapper.append("<div>An error has occurred. Please refresh the page and try again. If the problem persists, please contact MAX Support.</div>");
		else if (XMLHttpRequest.readyState == 4 && (XMLHttpRequest.status == 0 || XMLHttpRequest.status == 12017)) // Session Timeout
			wrapper.append("<div>Your session has timed out, <a href='" + location.href  + "'>click here</a> to refresh.</div>");
		else // Unknown Error
			wrapper.append("<div>An error has occurred. Please refresh the page and try again. If the problem persists, please contact MAX Support.</div>");
	};
	
	this.showRecentlyUpdated = function(data)
	{
		var wrapper = jQuery("#" + self.wrapperId);
		var list = wrapper.find("ul");
		
		if(list.size() == 0)
		{
			var head = jQuery("<div></div>");
			var name = jQuery("<div></div>");
			var updated = jQuery("<div></div>");
			var filter = jQuery("<div></div>");
			var filterText = jQuery("<input />");
			
			filterText.attr("type", "text");
			filterText.keyup(self.filterResults);
			
			filter.text("Filter: ");
			filter.addClass("find-content-toolbar");
			filter.append(filterText);
			
			name.text("Name");
			name.addClass("recently-updated-header-name");
			
			updated.html("Your last Update &nbsp;");
			updated.addClass("recently-updated-header-updated");
			
			head.attr("id", "recently-updated-header");
			
			head.append(name);
			head.append(updated);
			
			wrapper.append(filter);
			wrapper.append(head);
			
			list = jQuery("<ul></ul>");
			list.append(data);
			wrapper.append(list);
		}
		else
		{
			list.find(".hidden").removeClass("hidden");
			list.append(data);
		}
		
		$(wrapper).find(".more-link-container").remove();
		
		list.find(".more-link-container").click(self.getRecentlyUpdated);
	};
	
	this.filterResults = function()
	{
		var wrapper = jQuery("#" + self.wrapperId);
		var filter = wrapper.find("input").val().toLowerCase();
		
		if(filter != previousFilter && (filter.length >= constants.minFilterLength || filter.length == 0))
		{
			var results = wrapper.find("li.update-item");
			
			previousFilter = filter;
			
			results.each(function(){
				var element = jQuery(this);
				
				if(element.text().toLowerCase().indexOf(filter) >= 0)
					element.removeClass("hidden");
				else
					element.addClass("hidden");
			});
			
			setTimeout("community.findContent.RecentlyUpdated.resetFilter();", constants.filterTimeout);
		}
	};
	
	this.resetFilter = function()
	{
		var wrapper = jQuery("#" + self.wrapperId);
		var query = wrapper.find("input");
		
		filterAvailable = true;
		
		if(query.val() != previousFilter)
		{
			self.filterResults();
		}
	};
}

function initializeFindContentRecentlyUpdated()
{
	if(community.findContent.RecentlyUpdated == null)
	{
		community.findContent.RecentlyUpdated = new FindContentRecentlyUpdated();
	}
}
} catch (err) {
    if (console && console.log && console.error) {
        console.log("Error running batched script.");
        console.error(err);
    }
}

;
;try {
/* module-key = 'gov.eop.omb.confluence.resources.MAX-Resources:design-resources', location = 'gov/eop/omb/confluence/resources/design/scripts/click-stats.js' */
community.bindLinksForClickStatisitics = function ()
{	
	// live event for manage fav buttons 
	jQuery_142("#manage-favorites-tree-add-folder, #manage-favorites-tree-rename-node, #manage-favorites-tree-remove-node").live('click', function(e) {  
		var current = new Date();
		var endTime = (current - clickEventsStartTime );
		clickEvents.push(
				{ "event" : {
					"eventId" : this.id, 
					"timeSinceLoad" : endTime,
					"occuredAt" : current.getTime()
				}
				});		
		return true;
	});

	// bind each click event and add to var for later storage on unload event - elements that are not in the page onload
	jQuery_142("#find-content-agency-communities-link, #find-content-gov-wide-link, #find-content-cross-community-link, " +
			"#find-content-other-spaces-link, #find-content-my-search-link, #find-content-my-favorites-link, " +
			"#find-content-my-favorite-pages-link, #find-content-my-favorite-spaces-link, #find-content-my-recently-viewed-link, " +
			"#find-content-my-recently-updated-link, #find-content-my-page-watches-link, #find-content-my-collaboration-groups-link, " +
			"#find-content-my-home-space, #find-content-my-agency-space, #find-content-my-search-link, " +
			"#max-sd-collaborate-button, #share-create-email-button, #jquery-perm-link-input, " +
			"#share-dialog-done-button").live('click', function(e) {  
				var current = new Date();
				var endTime = (current - clickEventsStartTime );
				clickEvents.push(
						{ "event" : {
							"eventId" : this.id, 
							"timeSinceLoad" : endTime,
							"occuredAt" : current.getTime()
						}
						});		
				return true;
			});
	
	// bind each click event and add to var for later storage on unload event
	jQuery("#jquery-attachments-link, #button-email-alerts-link, #start-watching-page-link, #stop-watching-page-link," + 
			"#watch-page-family-link, #watch-page-edit-link, #watch-my-watch-list-link, #jquery-favorite-remove-link," + 
			"#jquery-favorite-add-link, #options-edit-link, #options-edit-in-word-link, #action-page-permissions-link," + 
			"#options-details-link,#options-history-link, #action-view-source-link, #action-view-in-hierarchy-link," + 
			"#options-print-link, #options-export-word-link, #options-pdf-link, #options-import-word-link," + 
			"#options-copy-link, #action-move-page-dialog-link, #options-delete-link, #button-add-new-content-link," + 
			"#content-page-link, #add-attachment-menu-link, #content-comment-link, #content-diagram-link, #content-blog-link, " +
			"#button-edit-page-link, #page-tree-open-link, #page-tree-close-link, #nav-home-link, " +
			"#nav-favorites, #nav-directory-link, #nav-menu-help-link, #help-community-help-link, #help-getting-started-link, " + 
			"#help-get-help-link, #help-ask-a-question-link, #help-sign-up-for-training-link #nav-advanced-link, " + 
			"#browse-space2, #browse-pages, #browse-blog, #browse-attachments, #browse-labels, #space-admin, " +
			"#space-advanced, #jquery-link-to-page, #jquery-link-to-page2, #nav-feedback-link, #nav-admin-link, #search_Button, " + 
			"#set-user-status-link, #user-recently-viewed-link, #user-password-link, #user-max-profile-link, " + 
			"#user-community-profile-link, #user-network-link, #user-labels-link, #user-watches-link, #user-drafts-link, " +  
			"#user-settings-link, #user-confluence-link, #user-logout-link, #profile-myprofile-link, #profile-myhomespace-link, " + 
			"#profile-signout-link, #pagefooter-home, #pagefooter-faq, #pagefooter-policies, #pagefooter-help, " + 
			"#pagefooter-contactus, #pagefooter-poweredbymax, #page-footer-feedback, #pagefooter-providefeedback, " + 
			"#pagefooter-atlassian, #comment-add-comment-bottom, #space-title-link, #add-child-page-link-breadcrumb-menu, " +
			"#lastedited-viewchanges-link, #lastedited-pagehistory-link, #lastedited-username-link, #lastedited-useremail-link, " +
			"#button-last-editedby-link, #breadcrumb-button-attachments, #breadcrumb-button-comments, #button-favorites, " +
			"#jquery-favorites-add-button, #jquery-favorites-remove-button, #jquery-favorites-manage-button, #favorites-tree, " +
			"#btn-add-attachment, #unsaved-edits-alert-link, #home-space-link, #home-space-link-set, #user-agency-space-link, " +
			"#dashboard-link, #home-page-link, #nav-find-content-link, #findstuff-agency-communities-link, " +
			"#findstuff-government-wide-communities-link, #findstuff-cross-community-topics-link, #findstuff-other-spaces-link, " +
			"#findstuff-my-favorites-link, #findstuff-my-recently-viewed-link, #findstuff-my-recently-updated-link, " +
			"#findstuff-my-watching-link, #findstuff-my-collaborations-link, #viewInfoLink, #jquery-universal-home, #shared-desktop-page-link, " +
			"#nav-find-people-heading, #nav-find-people-link, #nav-find-max-admins, #make-me-open-findstuff, #make-me-open-mystuff, " +
			"#findstuff-full-search-link, #nav-header-help, #nav-header-feedback-link, #nav-header-advanced-menu-link, " +
			"#list-browsespace, #list-page, #list-blog, #list-attachments, #list-labels, #keyboard-shortcuts-link, #list-space-admin, " +
			"#list-advanced, #nav-header-signout, #nav-alert-unsave-drafts, #documents-assemble-link, #documents-compare-link" +
	"").click(function(event) {
		var current = new Date();
		var endTime = (current - clickEventsStartTime );
		clickEvents.push(
				{ "event" : {
					"eventId" : this.id, 
					"timeSinceLoad" : endTime,
					"occuredAt" : current.getTime()
				}
				});	
		return true;
	});


	// capture navigation clicks from children drop down
	jQuery("#child-pages li a").click(function(e) {  
		var current = new Date();
		var endTime = (current - clickEventsStartTime );
		clickEvents.push(
				{ "event" : {
					"eventId" : "navigate-children-dropdown-link", 
					"timeSinceLoad" : endTime,
					"occuredAt" : current.getTime()
				}
				});			
		return true;
	});
	
	// capture navigation clicks from children section
	jQuery("#page-controls-children li a").click(function(e) {  
		var current = new Date();
		var endTime = (current - clickEventsStartTime );
		clickEvents.push(
				{ "event" : {
					"eventId" : "navigate-children-section-link", 
					"timeSinceLoad" : endTime,
					"occuredAt" : current.getTime()
				}
				});			
		return true;
	});
	
	// capture navigation clicks from children drop down	
	jQuery_142("#quick-search div.aui-dropdown li a").live('click', function(e) {  
		var current = new Date();
		var endTime = (current - clickEventsStartTime );
		clickEvents.push(
				{ "event" : {
					"eventId" : "navigate-quick-search-results-link", 
					"timeSinceLoad" : endTime,
					"occuredAt" : current.getTime()
				}
				});			
		return true;
	});
	
	// capture dashboard breadcrumb link click
	jQuery("#breadcrumbs-list li.first a").click(function(e) {  
		var current = new Date();
		var endTime = (current - clickEventsStartTime );
		clickEvents.push(
				{ "event" : {
					"eventId" : "dashboard-breadcrumb-link", 
					"timeSinceLoad" : endTime,
					"occuredAt" : current.getTime()
				}
				});			
		return true;
	});
	
	// bind right click event
	jQuery("#nav-feedback-link li a").mousedown(function(e) {  
		if (e.which === 3) {         
			/* Right Mousebutton was clicked! */
			var current = new Date();
			var endTime = (current - clickEventsStartTime );
			clickEvents.push(
					{ "event" : {
						"eventId" : "nav-feedback-link-right-clicked", 
						"timeSinceLoad" : endTime,
						"occuredAt" : current.getTime()
					}
			});			
		} 
		return true;
	});
	
	// capture add addition attachment upload (green plus sign clicks)	
	jQuery_142("#attach-add-attachments div a").click(function(e) {  
		var current = new Date();
		var endTime = (current - clickEventsStartTime );
		var eventId = "add-additonal-attachment-plus-button";
		if (jQuery_142(this).parent().hasClass("first")) {
			 eventId = "add-additonal-attachment-first-plus-button";
		}
		clickEvents.push(
				{ "event" : {
					"eventId" : eventId, 
					"timeSinceLoad" : endTime,
					"occuredAt" : current.getTime()
				}
				});			
		return true;
	});
	
	// bind adv assemble doc button click	
	jQuery_142(".am-assemble-button").click(function(e) {  
		var current = new Date();
		var endTime = (current - clickEventsStartTime );
		var eventId;
		
		if (jQuery_142(this).siblings("input[name=isDocumentCompare]").val() == "true"  ) {
			eventId= "adv-document-compare-button";
		} else {
			eventId= "adv-document-assemble-button";
		}
		clickEvents.push(
				{ "event" : {
					"eventId" : eventId, 
					"timeSinceLoad" : endTime,
					"occuredAt" : current.getTime()
				}
				});			
		return true;
	});
	
	// bind adv assemble doc configure button click	
	jQuery_142(".am-assemble-button-details").click(function(e) {  
		var current = new Date();
		var endTime = (current - clickEventsStartTime );
		
		if (jQuery_142(this).siblings("input[name=isDocumentCompare]").val() == "true"  ) {
			eventId= "adv-document-compare-configure-button";
		} else {
			eventId= "adv-document-assemble-configure-button";
		}
		
		clickEvents.push(
				{ "event" : {
					"eventId" : eventId, 
					"timeSinceLoad" : endTime,
					"occuredAt" : current.getTime()
				}
				});			
		return true;
	});

	// bind unload event, fire ajax 
	jQuery(window).unload(function(event) { 
		// add total time on page
		var current = new Date();
		var endTime = (current - clickEventsStartTime );			
		clickEvents.push(	
				{ "event" : {
					"eventId" : "totalTimeOnPage", 
					"timeSinceLoad" : endTime,
					"occuredAt" : current.getTime()
				}
				}
		);	

		var data = {};
		data["pageUrl"] = location.href;
		data["pageId"] = jQuery("input#pageId").val();
		data["spaceKey"] = jQuery("input[name='spaceKey']").val();
		data["userAgent"] =  navigator.userAgent;
		data["screenWidth"] = screen.width;
		data["screenHeight"] = screen.height;
		data["windowWidth"] = jQuery(window).width() ;
		data["windowHeight"] =   jQuery(window).height();
		data["clickEventsJson"] =  JSON.stringify(clickEvents);


		jQuery_142.ajax({
			type: 'POST',
			async: false,
			dataType: 'json',
			url: contextPath + '/special/storeclickstats.action',
			data: data,
			success: function() {   AJS.log("--> Page click stats have been saved sucessfully."); },
			error: function() { AJS.log("---> An error occured when saving the page click stats!"); }						
		});


		AJS.log("--> Completed click stat ajax.");
	});  
};
} catch (err) {
    if (console && console.log && console.error) {
        console.log("Error running batched script.");
        console.error(err);
    }
}

;
;try {
/* module-key = 'gov.eop.omb.confluence.resources.MAX-Resources:design-resources', location = 'gov/eop/omb/confluence/resources/design/scripts/edit-page.js' */
var editPageSessionChecked = false;

$(document).ready(function() {

	// check and fix session - COP-3344
	// Adding #editpageform selector so this only applies to page edit, not comment edit (COP-3624) -AWP 
	$("#editpageform #rte-button-publish").click(function(event) {
		
		// only do this for edit page, make sure not on add page or other
		if ($("meta[name=ajs-page-id]").attr('content') == "0"){
			return true; // allow default action (the save)
		}
		
		if (editPageSessionChecked === true) {
			return true; // allow default action (the save)
		}
		
		$.ajax({
			url : Confluence.getContextPath() + "/rest/tinymce/1/content/" + $("meta[name=ajs-page-id]").attr('content') + ".json",
			async : false,
			success : function(data) {
				// check the atlToken is the same value we have in the current
				// form,
				// if not update it
				if (data.atlToken != AJS.Meta.get('atl-token')) {
					console.log("Fix Session: success - atl-token differs!!");
					$('input[name=atl_token]').val(data.atlToken);
					AJS.Meta.set('atl-token', data.atlToken);

					editPageSessionChecked = true;
					// click save, should be good to go now
					Confluence.Editor.UI.saveButton.click();
				} else {
					console.log("Fix Session: success - session and token were good.");
				}

			},
			error : function(jqXHR, textStatus, errorThrown) {

				// 404 = your session has timed out
				if (jqXHR.status == "404") {
					console.log("Fix Session: error 404");
					$("body").prepend("<iframe id='fix-session-iframe' style='position: absolute; left: -2000em;'></iframe>");

					$("#fix-session-iframe").load(function() {
						console.log("Fix Session: iframe has loaded");
						// check session now
						$.ajax({
							url : Confluence.getContextPath() + "/rest/tinymce/1/content/" + $("meta[name=ajs-page-id]").attr('content') + ".json",
							async : false,
							success : function(data) {
								console.log("Fix Session: success 2");
								// hide iframe if was hidden
								$("#fix-session-iframe").css("position", "absolute");
								// check the atlToken is the same value we have
								// in
								// the current form, if not update it
								if (data.atlToken != AJS.Meta.get('atl-token')) {
									console.log("Fix Session: success - atl-token differs!!");
									$('input[name=atl_token]').val(data.atlToken);
									AJS.Meta.set('atl-token', data.atlToken);

									editPageSessionChecked = true;
									
									// click save, should be good to go now
									Confluence.Editor.UI.saveButton.click();
								} else {
									console.log("Fix Session: success - session and token were good.");
								}
							},
							error : function(jqXHR, textStatus, errorThrown) {
								// this means the user was logged out and need
								// to
								// auth again with cas (sso didnt work)
								console.log("Fix Session: error 2");
								var width = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;
								var height = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;
								// show the hidden iframe so they can login
								$("#fix-session-iframe").css("position", "static").css("width", (width * .98)).css("height", (height * .80));
							}
						});
					});

					$("#fix-session-iframe").attr("src", "/users/viewuserprofile.action");
					
					//return false;
					event.preventDefault(); // stop the save click
				} else {
					console.log("Fix Session: error");
					//return false;
					event.preventDefault(); // stop the save click
				}

			}
		});

	});

	// Animation and seed text for edit page comment box
	$(".edit-page-comment-field").focus(function() {
		// $(".watch-display-on-edit-page").fadeOut('fast');
		// $(".toolbar-section.toolbar-minor-edits").hide('slow');
		$("#edit-page-comment-placeholder").hide();
		$(".toolbar-edit-options").addClass("active");
		// $(this).animate({width:'500px'}, 1000);
	});

	$(".edit-page-comment-field").blur(function() {
		// $(this).animate({width:'350px'}, 1000);
		$(".toolbar-edit-options").removeClass("active");

		// $(".watch-display-on-edit-page").fadeIn('fast');
		$(".toolbar-section.toolbar-minor-edits").show('slow');
	});

	// capture click on the actual seed and trigger focus - MJK
	$("#edit-page-comment-placeholder").click(function() {
		$(".edit-page-comment-field").focus();
	});

	// move watchers html down
	$(".toolbar-watchers").append(jQuery(".watch-display-on-edit-page"));

});

} catch (err) {
    if (console && console.log && console.error) {
        console.log("Error running batched script.");
        console.error(err);
    }
}

;
;try {
/* module-key = 'gov.eop.omb.confluence.resources.MAX-Resources:design-resources', location = 'gov/eop/omb/confluence/resources/design/scripts/recently-viewed.js' */
// Community Namespace
if(typeof community == 'undefined')
	community = {};

//Community Page Namespace
if(community.recentlyViewed == undefined)
	community.recentlyViewed = {};

community.recentlyViewed.getRecentlyViewed = function()
{
	var dialog = jQuery("#recently-viewed-dialog");
	
	if(dialog.size() == 0)
	{
		jQuery.ajax({
			type: "GET",
			url: contextPath + '/users/viewuserhistory.action',
			dataType: 'html',
			success: community.recentlyViewed.showRecentlyViewed
		});
	}
	else
	{
		dialog.dialog("open");
	}
	
	return false;
};

community.recentlyViewed.showRecentlyViewed = function(data)
{
   var dialog = jQuery("#recently-viewed-dialog");
   var response = jQuery(data);
   var responseTable = response.find("#content").children("table");
   var filter = jQuery("<div></div>");
   var filterText = jQuery("<input />");
   
   var thead = jQuery("<thead></thead>");
   var headRow = jQuery("<tr></tr>");
   var headCell = jQuery("<th></th>");
   var name = jQuery("<span></span>");
   var updated = jQuery("<span></span>");
   
   name.text("Name");
   name.addClass("recently-viewed-heading-name");
   updated.text("Last Updated");
   updated.addClass("recently-viewed-heading-updated");
   
   headCell.append(name);
   headCell.append(updated);
   
   headRow.append(headCell);
   thead.append(headRow);
   
   responseTable.attr("id", "recently-viewed-table");
   responseTable.prepend(thead);
   
   filterText.attr("type", "text");
   filterText.keyup(function(){
	   jQuery_142.uiTableFilter(jQuery("#recently-viewed-table"), jQuery(this).val());
   });
   
   filter.text("Filter: ");
   filter.addClass("toolbar");
   filter.append(filterText);
   
   responseTable.addClass("popin-recentlyviewed");
   
   if(dialog.size() == 0)
   {
	   var dialogConfig = new JQUERYUI_DIALOG_INFO_HASH;
	   
	   dialog = jQuery("<div></div>");
	   dialog.attr("id", "recently-viewed-dialog");
	   
	   dialogConfig.title = "Recently Viewed";
	   dialogConfig.width = 600;
	   dialogConfig.height = 400;
	   
	   dialog.append(filter);
	   dialog.append(responseTable);
	   dialog.dialog(dialogConfig);
   }
   else
   {
	   dialog.empty();
	   dialog.append(filter);
	   dialog.append(responseTable);
	   
	   dialog.dialog("open");
   }
};
} catch (err) {
    if (console && console.log && console.error) {
        console.log("Error running batched script.");
        console.error(err);
    }
}

;
;try {
/* module-key = 'gov.eop.omb.confluence.resources.MAX-Resources:design-resources', location = 'gov/eop/omb/confluence/resources/scripts/pageLoadStats.js' */


function getServerTime(confRequestRecieveTime, pageGenServerTime) {
var xmlhttp = getXmlHttp();
	var spacekey = jQuery("#confluence-space-key").attr("content"); 
	var pageTitle = jQuery("input[title=pageTitle]").val();
    var url = contextPath + "/special/getservertime.action?pageTitle=" + pageTitle + "&spaceKey=" + spacekey + 
    "&confRequestTime=" + confRequestRecieveTime + "&serverGenTime=" + pageGenServerTime +
    "&userAgent=" + navigator.userAgent
    ;
    
    xmlhttp.open("GET", url, true);    
    xmlhttp.onreadystatechange = function()
    {
      if (xmlhttp.readyState == 4)
      {
        try
        {
          if (xmlhttp.status == 200)
          {
            endtimestamp = xmlhttp.responseText;
            var executionTime = 3;
            //call function to calculate stats and put info in footer
            writeStats(endtimestamp, executionTime, 0, confRequestRecieveTime, pageGenServerTime);
          }
          else
          {
            //alert("An error occured: " + xmlhttp.responseText);
          }
        }
        catch(e)
        {
          //alert("Exception thrown: " + e);
        }
      }
    }
    xmlhttp.send(null);
}

function writeStats(serverEndTime, ajaxExecutionTime, clientendtime, confRequestRecieveTime, pageGenServerTime){
	//get cookie value for generation time
	//	if error or zero exit
	if (!pageGenServerTime == 0 || !pageGenServerTime == null) {
			var endtimestamp = serverEndTime;
			var totalElapsedTime = Number(endtimestamp)  - Number(confRequestRecieveTime);
			var other = Number(totalElapsedTime) - Number(pageGenServerTime);
			PLT_DisplayFormat = "Total elapsed time: <span id='totalElapsedTime'>" +  totalElapsedTime/1000 + "</span> sec. ==> Server: " + pageGenServerTime/1000 + " sec. | <span id='maxFusionChartElapsedTime'></span>&nbsp; User (e.g. browser, network, internet): " + other/1000 + " sec. ";
			jQuery("#page-footer-stats").html(PLT_DisplayFormat);
			//get cookie for display setting
			var displayDiv = readCookie('X-perfomance-display');
			if (displayDiv == "true" || displayDiv ==  null) {
				showPerformanceDiv();
			}
	}//from top pageGenServerTime check
}// end function

function calcTime() {
	// dont run if pageid is zero dont run
	if (jQuery("#confluence-page-id").attr('content') == "0") {  return;}
	
	var endtimestamp = 0;
	// get cookie values, set to variables
	var pageGenServerTime = readCookie('PageGenTimeMS');
	eraseCookie('PageGenTimeMS');
	var confRequestRecieveTime = readCookie('XConfluenceRequestTime');
	eraseCookie('XConfluenceRequestTime');
	endtimestamp = getServerTime(confRequestRecieveTime, pageGenServerTime);
}


// native ajax
function getXmlHttp() {
	var XMLHttpFactories = [
	                        function() {return new XMLHttpRequest();},
	                        function() {return new ActiveXObject("Msxml2.XMLHTTP");},
	                        function() {return new ActiveXObject("Msxml3.XMLHTTP");},
	                        function() {return new ActiveXObject("Microsoft.XMLHTTP");},
	                        function() {return new ActiveXObject("Msxml2.XMLHTTP.3.0");},
	                        function() {return new ActiveXObject("Msxml2.XMLHTTP.4.0");}
	                        ];
	var xmlhttp = false, xhr = null;
	for (var i = 0, ii = XMLHttpFactories.length; i < ii; i++) {
		try {
			xhr = XMLHttpFactories[i];
			xmlhttp = xhr();
		}
		catch(e) {
			continue;
		}
		break;
	}
	arguments.callee = function() {
		return xhr();
	};
	return xmlhttp;
}


// cookie stuff
function createCookie(name,value,days) {
  if (days) {
    var date = new Date();
    date.setTime(date.getTime()+(days*24*60*60*1000));
    var expires = "; expires="+date.toGMTString();
  }
  else var expires = "";
  document.cookie = name+"="+value+expires+"; path=/";
}
function readCookie(name) {
  var nameEQ = name + "=";
  var ca = document.cookie.split(';');
  for(var i=0;i < ca.length;i++) {
    var c = ca[i];
    while (c.charAt(0)==' ') c = c.substring(1,c.length);
    if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length,c.length);
  }
  return null;
}
function eraseCookie(name) {
    createCookie(name,"",-1);
}
} catch (err) {
    if (console && console.log && console.error) {
        console.log("Error running batched script.");
        console.error(err);
    }
}

;
;try {
/* module-key = 'gov.eop.omb.confluence.resources.MAX-Resources:design-resources', location = 'gov/eop/omb/confluence/resources/design/scripts/splash-screen.js' */
if(typeof community == 'undefined')
	community = {};

if(community.splashScreen == undefined)
	community.splashScreen = {};

community.splashScreen.render = function ()
{
	jQuery.ajax({
		type: "GET",
		url: contextPath + "/json/getsplashscreen.action",
		dataType: "json",
		complete: function(XMLHttpRequest, textStatus) 
			{
				var dialog = jQuery("<div></div>");
				var buttonPane;
				var optionWrapper = jQuery("<div></div>");
				var dialogConfig = new JQUERYUI_DIALOG_INFO_HASH;
				
				dialogConfig.modal = true;
		
				if(XMLHttpRequest.status == 200) // Success
				{
					var data = JSON.parse(XMLHttpRequest.responseText);
					var checkBox = jQuery("<input id='splash-hide' type='checkbox' />");
					var text = jQuery("<label for='splash-hide'></label>");
					
					dialogConfig.title = data.title;
					dialogConfig.width = "auto";
					
					checkBox.click(function(){
						if(jQuery(this).attr("checked"))
						{							
							userPreferences.data.splashScreen.preferences[userPreferences.data.splashScreen.settings.currentId].active = false;
						}
					});
					
					dialogConfig.buttons.OK = function(){
						userPreferences.save();
						dialog.dialog("close");
						
						dialog.remove();
					};
					
					text.text("Don't show this message again.");
					
					optionWrapper.addClass("splash-hide-option");
					optionWrapper.append(checkBox);
					optionWrapper.append(text);
					
					dialog.append(data.content);
					dialog.dialog(dialogConfig);
					
					if(data.pageTitleToggle == false)
						dialog.siblings(".ui-dialog-titlebar").hide();
				}
				else // Unknown Error
				{
					dialogConfig.title = "Error";
					dialog.text("An error occured while loading the splash screen.");
					dialog.dialog(dialogConfig);
				}
				
				buttonPane = dialog.siblings(".ui-dialog-buttonpane");
				buttonPane.prepend(optionWrapper);
			}
	});
};
} catch (err) {
    if (console && console.log && console.error) {
        console.log("Error running batched script.");
        console.error(err);
    }
}

;
;try {
/* module-key = 'gov.eop.omb.confluence.resources.MAX-Resources:design-resources', location = 'gov/eop/omb/confluence/resources/jQuery/jquery-jqote2/jquery.jqote2.min.js' */
/*
 * jQote2 - client-side Javascript templating engine
 * Copyright (C) 2010, aefxx
 * http://aefxx.com/
 *
 * Dual licensed under the WTFPL v2 or MIT (X11) licenses
 * WTFPL v2 Copyright (C) 2004, Sam Hocevar
 *
 * Date: Thu, Oct 21st, 2010
 * Version: 0.9.7
 */
(function($){var _=false,E1="UndefinedTemplateError",E2="TemplateCompilationError",E3="TemplateExecutionError",A="[object Array]",S="[object String]",F="[object Function]",n=1,c="%",q=/^[^<]*(<[\w\W]+>)[^>]*$/,ts=Object.prototype.toString;function r(e,x){throw ($.extend(e,x),e)}function dns(f) {var a=[];if(ts.call(f)!==A)return _;for(var i=0,l=f.length;i<l;i++)a[i]=f[i].jqote_id;return a.length?a.sort().join('.').replace(/(\b\d+\b)\.(?:\1(\.|$))+/g,"$1$2"):_}function l(s,t){var f,g=[],t=t||c,x=ts.call(s);if(x===F)return s.jqote_id?[s]:_;if(x!==A)return[$.jqotec(s,t)];if(x===A)for(var i=0,l=s.length;i<l;i++)return g.length?g:_}$.fn.extend({jqote:function(x,y){var x=ts.call(x)===A?x:[x],d="";this.each(function(i){var f=$.jqotec(this,y);for(var j=0;j<x.length;j++)d+=f.call(x[j],i,j,x,f)});return d}});$.each({app:"append",pre:"prepend",sub:"html"},function(x,y){$.fn["jqote"+x]=function(e,d,t){var p,r,s=$.jqote(e,d,t),$$=!q.test(s)?function(s){return $(document.createTextNode(s))}:$;if(!!(p=dns(l(e))))r=new RegExp("(^|\\.)"+p.split(".").join("\\.(.*)?")+"(\\.|$)");return this.each(function(){var z=$$(s);$(this)[y](z);(z[0].nodeType===3?$(this):z).trigger("jqote."+x,[z,r])})}});
$.extend({jqote:function(e,d,t){var s="",t=t||c,f=l(e);if(f===_)r(new Error("Empty or undefined template passed to $.jqote"),{type:E1});d=ts.call(d)!==A?[d]:d;for(var i=0,m=f.length;i<m;i++)for(var j=0;j<d.length;j++)s+=f[i].call(d[j],i,j,d,f[i]);return s},jqotec:function(x,t){var h,e,y,t=t||c,z=ts.call(x);if(z===S&&q.test(x)){e=y=x;if(h=$.jqotecache[x])return h}else{e=z===S||x.nodeType?$(x):x instanceof jQuery?x:null;if(!e[0]||!(y=e[0].innerHTML)&&!(y=e.text()))r(new Error("Empty or undefined template passed to $.jqotec"),{type:E1});if(h=$.jqotecache[$.data(e[0],"jqote_id")])return h}var s="",i,a=y.replace(/\s*<!\[CDATA\[\s*|\s*\]\]>\s*|[\r\n\t]/g,"").split("<"+t).join(t+">\x1b").split(t+">");for(var m=0,k=a.length;m<k;m++)s+=a[m].charAt(0)!=="\x1b"?"out+='"+a[m].replace(/(\\|["'])/g,"\\$1")+"'":(a[m].charAt(1)==="="?";out+=("+a[m].substr(2)+");":(a[m].charAt(1)==="!"?";out+=$.jqotenc(("+a[m].substr(2)+"));":";"+a[m].substr(1)));s="try{"+('var out="";'+s+";return out;").split("out+='';").join("").split('var out="";out+=').join("var out=")+'}catch(e){e.type="'+E3+'";e.args=arguments;e.template=arguments.callee.toString();throw e;}';try{var f=new Function("i, j, data, fn",s)}catch(e){r(e,{type:E2})}i=e instanceof jQuery?$.data(e[0],"jqote_id",n):e;return $.jqotecache[i]=(f.jqote_id=n++,f)},
jqotefn:function(e){var t=ts.call(e),i=t===S&&q.test(e)?e:$.data($(e)[0],"jqote_id");return $.jqotecache[i]||_},jqotetag:function(s){if(ts.call(s)===S)c=s},jqotenc:function(s){return s.toString().replace(/&(?!\w+;)/g,'&#38;').split('<').join('&#60;').split('>').join('&#62;').split('"').join('&#34;').split("'").join('&#39;')},jqotecache:{}});$.event.special.jqote={add:function(o){var n,h=o.handler,d=!o.data?[]:ts.call(o.data)!==A?[o.data]:o.data;if(!o.namespace)o.namespace="app.pre.sub";if(!d.length||!(n=dns(l(d))))return;o.handler=function(e,m,r){return !r||r.test(n)?h.apply(this,[e,m]):null}}}})(jQuery);

} catch (err) {
    if (console && console.log && console.error) {
        console.log("Error running batched script.");
        console.error(err);
    }
}

;
